
Microphone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005068  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  080051f0  080051f0  000151f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005290  08005290  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  08005290  08005290  00015290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005298  08005298  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005298  08005298  00015298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800529c  0800529c  0001529c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  080052a0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200a8  2**0
                  CONTENTS
 10 .bss          00000244  200000a8  200000a8  000200a8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200002ec  200002ec  000200a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b56f  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f54  00000000  00000000  0002b647  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000998  00000000  00000000  0002d5a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008d0  00000000  00000000  0002df38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000215f7  00000000  00000000  0002e808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cb0f  00000000  00000000  0004fdff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5cee  00000000  00000000  0005c90e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001225fc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002dcc  00000000  00000000  0012264c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000a8 	.word	0x200000a8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080051d8 	.word	0x080051d8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000ac 	.word	0x200000ac
 80001c4:	080051d8 	.word	0x080051d8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2iz>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d215      	bcs.n	800099a <__aeabi_d2iz+0x36>
 800096e:	d511      	bpl.n	8000994 <__aeabi_d2iz+0x30>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d912      	bls.n	80009a0 <__aeabi_d2iz+0x3c>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800098a:	fa23 f002 	lsr.w	r0, r3, r2
 800098e:	bf18      	it	ne
 8000990:	4240      	negne	r0, r0
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d105      	bne.n	80009ac <__aeabi_d2iz+0x48>
 80009a0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	bf08      	it	eq
 80009a6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop

080009b4 <__aeabi_uldivmod>:
 80009b4:	b953      	cbnz	r3, 80009cc <__aeabi_uldivmod+0x18>
 80009b6:	b94a      	cbnz	r2, 80009cc <__aeabi_uldivmod+0x18>
 80009b8:	2900      	cmp	r1, #0
 80009ba:	bf08      	it	eq
 80009bc:	2800      	cmpeq	r0, #0
 80009be:	bf1c      	itt	ne
 80009c0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80009c4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80009c8:	f000 b974 	b.w	8000cb4 <__aeabi_idiv0>
 80009cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009d4:	f000 f806 	bl	80009e4 <__udivmoddi4>
 80009d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e0:	b004      	add	sp, #16
 80009e2:	4770      	bx	lr

080009e4 <__udivmoddi4>:
 80009e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e8:	9d08      	ldr	r5, [sp, #32]
 80009ea:	4604      	mov	r4, r0
 80009ec:	468e      	mov	lr, r1
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d14d      	bne.n	8000a8e <__udivmoddi4+0xaa>
 80009f2:	428a      	cmp	r2, r1
 80009f4:	4694      	mov	ip, r2
 80009f6:	d969      	bls.n	8000acc <__udivmoddi4+0xe8>
 80009f8:	fab2 f282 	clz	r2, r2
 80009fc:	b152      	cbz	r2, 8000a14 <__udivmoddi4+0x30>
 80009fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000a02:	f1c2 0120 	rsb	r1, r2, #32
 8000a06:	fa20 f101 	lsr.w	r1, r0, r1
 8000a0a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a0e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a12:	4094      	lsls	r4, r2
 8000a14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a18:	0c21      	lsrs	r1, r4, #16
 8000a1a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a1e:	fa1f f78c 	uxth.w	r7, ip
 8000a22:	fb08 e316 	mls	r3, r8, r6, lr
 8000a26:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a2a:	fb06 f107 	mul.w	r1, r6, r7
 8000a2e:	4299      	cmp	r1, r3
 8000a30:	d90a      	bls.n	8000a48 <__udivmoddi4+0x64>
 8000a32:	eb1c 0303 	adds.w	r3, ip, r3
 8000a36:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000a3a:	f080 811f 	bcs.w	8000c7c <__udivmoddi4+0x298>
 8000a3e:	4299      	cmp	r1, r3
 8000a40:	f240 811c 	bls.w	8000c7c <__udivmoddi4+0x298>
 8000a44:	3e02      	subs	r6, #2
 8000a46:	4463      	add	r3, ip
 8000a48:	1a5b      	subs	r3, r3, r1
 8000a4a:	b2a4      	uxth	r4, r4
 8000a4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a50:	fb08 3310 	mls	r3, r8, r0, r3
 8000a54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a58:	fb00 f707 	mul.w	r7, r0, r7
 8000a5c:	42a7      	cmp	r7, r4
 8000a5e:	d90a      	bls.n	8000a76 <__udivmoddi4+0x92>
 8000a60:	eb1c 0404 	adds.w	r4, ip, r4
 8000a64:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000a68:	f080 810a 	bcs.w	8000c80 <__udivmoddi4+0x29c>
 8000a6c:	42a7      	cmp	r7, r4
 8000a6e:	f240 8107 	bls.w	8000c80 <__udivmoddi4+0x29c>
 8000a72:	4464      	add	r4, ip
 8000a74:	3802      	subs	r0, #2
 8000a76:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a7a:	1be4      	subs	r4, r4, r7
 8000a7c:	2600      	movs	r6, #0
 8000a7e:	b11d      	cbz	r5, 8000a88 <__udivmoddi4+0xa4>
 8000a80:	40d4      	lsrs	r4, r2
 8000a82:	2300      	movs	r3, #0
 8000a84:	e9c5 4300 	strd	r4, r3, [r5]
 8000a88:	4631      	mov	r1, r6
 8000a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8e:	428b      	cmp	r3, r1
 8000a90:	d909      	bls.n	8000aa6 <__udivmoddi4+0xc2>
 8000a92:	2d00      	cmp	r5, #0
 8000a94:	f000 80ef 	beq.w	8000c76 <__udivmoddi4+0x292>
 8000a98:	2600      	movs	r6, #0
 8000a9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000a9e:	4630      	mov	r0, r6
 8000aa0:	4631      	mov	r1, r6
 8000aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa6:	fab3 f683 	clz	r6, r3
 8000aaa:	2e00      	cmp	r6, #0
 8000aac:	d14a      	bne.n	8000b44 <__udivmoddi4+0x160>
 8000aae:	428b      	cmp	r3, r1
 8000ab0:	d302      	bcc.n	8000ab8 <__udivmoddi4+0xd4>
 8000ab2:	4282      	cmp	r2, r0
 8000ab4:	f200 80f9 	bhi.w	8000caa <__udivmoddi4+0x2c6>
 8000ab8:	1a84      	subs	r4, r0, r2
 8000aba:	eb61 0303 	sbc.w	r3, r1, r3
 8000abe:	2001      	movs	r0, #1
 8000ac0:	469e      	mov	lr, r3
 8000ac2:	2d00      	cmp	r5, #0
 8000ac4:	d0e0      	beq.n	8000a88 <__udivmoddi4+0xa4>
 8000ac6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000aca:	e7dd      	b.n	8000a88 <__udivmoddi4+0xa4>
 8000acc:	b902      	cbnz	r2, 8000ad0 <__udivmoddi4+0xec>
 8000ace:	deff      	udf	#255	; 0xff
 8000ad0:	fab2 f282 	clz	r2, r2
 8000ad4:	2a00      	cmp	r2, #0
 8000ad6:	f040 8092 	bne.w	8000bfe <__udivmoddi4+0x21a>
 8000ada:	eba1 010c 	sub.w	r1, r1, ip
 8000ade:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ae2:	fa1f fe8c 	uxth.w	lr, ip
 8000ae6:	2601      	movs	r6, #1
 8000ae8:	0c20      	lsrs	r0, r4, #16
 8000aea:	fbb1 f3f7 	udiv	r3, r1, r7
 8000aee:	fb07 1113 	mls	r1, r7, r3, r1
 8000af2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000af6:	fb0e f003 	mul.w	r0, lr, r3
 8000afa:	4288      	cmp	r0, r1
 8000afc:	d908      	bls.n	8000b10 <__udivmoddi4+0x12c>
 8000afe:	eb1c 0101 	adds.w	r1, ip, r1
 8000b02:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000b06:	d202      	bcs.n	8000b0e <__udivmoddi4+0x12a>
 8000b08:	4288      	cmp	r0, r1
 8000b0a:	f200 80cb 	bhi.w	8000ca4 <__udivmoddi4+0x2c0>
 8000b0e:	4643      	mov	r3, r8
 8000b10:	1a09      	subs	r1, r1, r0
 8000b12:	b2a4      	uxth	r4, r4
 8000b14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b18:	fb07 1110 	mls	r1, r7, r0, r1
 8000b1c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b20:	fb0e fe00 	mul.w	lr, lr, r0
 8000b24:	45a6      	cmp	lr, r4
 8000b26:	d908      	bls.n	8000b3a <__udivmoddi4+0x156>
 8000b28:	eb1c 0404 	adds.w	r4, ip, r4
 8000b2c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000b30:	d202      	bcs.n	8000b38 <__udivmoddi4+0x154>
 8000b32:	45a6      	cmp	lr, r4
 8000b34:	f200 80bb 	bhi.w	8000cae <__udivmoddi4+0x2ca>
 8000b38:	4608      	mov	r0, r1
 8000b3a:	eba4 040e 	sub.w	r4, r4, lr
 8000b3e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b42:	e79c      	b.n	8000a7e <__udivmoddi4+0x9a>
 8000b44:	f1c6 0720 	rsb	r7, r6, #32
 8000b48:	40b3      	lsls	r3, r6
 8000b4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b52:	fa20 f407 	lsr.w	r4, r0, r7
 8000b56:	fa01 f306 	lsl.w	r3, r1, r6
 8000b5a:	431c      	orrs	r4, r3
 8000b5c:	40f9      	lsrs	r1, r7
 8000b5e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b62:	fa00 f306 	lsl.w	r3, r0, r6
 8000b66:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b6a:	0c20      	lsrs	r0, r4, #16
 8000b6c:	fa1f fe8c 	uxth.w	lr, ip
 8000b70:	fb09 1118 	mls	r1, r9, r8, r1
 8000b74:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b78:	fb08 f00e 	mul.w	r0, r8, lr
 8000b7c:	4288      	cmp	r0, r1
 8000b7e:	fa02 f206 	lsl.w	r2, r2, r6
 8000b82:	d90b      	bls.n	8000b9c <__udivmoddi4+0x1b8>
 8000b84:	eb1c 0101 	adds.w	r1, ip, r1
 8000b88:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000b8c:	f080 8088 	bcs.w	8000ca0 <__udivmoddi4+0x2bc>
 8000b90:	4288      	cmp	r0, r1
 8000b92:	f240 8085 	bls.w	8000ca0 <__udivmoddi4+0x2bc>
 8000b96:	f1a8 0802 	sub.w	r8, r8, #2
 8000b9a:	4461      	add	r1, ip
 8000b9c:	1a09      	subs	r1, r1, r0
 8000b9e:	b2a4      	uxth	r4, r4
 8000ba0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ba4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ba8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bac:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bb0:	458e      	cmp	lr, r1
 8000bb2:	d908      	bls.n	8000bc6 <__udivmoddi4+0x1e2>
 8000bb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bb8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000bbc:	d26c      	bcs.n	8000c98 <__udivmoddi4+0x2b4>
 8000bbe:	458e      	cmp	lr, r1
 8000bc0:	d96a      	bls.n	8000c98 <__udivmoddi4+0x2b4>
 8000bc2:	3802      	subs	r0, #2
 8000bc4:	4461      	add	r1, ip
 8000bc6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bca:	fba0 9402 	umull	r9, r4, r0, r2
 8000bce:	eba1 010e 	sub.w	r1, r1, lr
 8000bd2:	42a1      	cmp	r1, r4
 8000bd4:	46c8      	mov	r8, r9
 8000bd6:	46a6      	mov	lr, r4
 8000bd8:	d356      	bcc.n	8000c88 <__udivmoddi4+0x2a4>
 8000bda:	d053      	beq.n	8000c84 <__udivmoddi4+0x2a0>
 8000bdc:	b15d      	cbz	r5, 8000bf6 <__udivmoddi4+0x212>
 8000bde:	ebb3 0208 	subs.w	r2, r3, r8
 8000be2:	eb61 010e 	sbc.w	r1, r1, lr
 8000be6:	fa01 f707 	lsl.w	r7, r1, r7
 8000bea:	fa22 f306 	lsr.w	r3, r2, r6
 8000bee:	40f1      	lsrs	r1, r6
 8000bf0:	431f      	orrs	r7, r3
 8000bf2:	e9c5 7100 	strd	r7, r1, [r5]
 8000bf6:	2600      	movs	r6, #0
 8000bf8:	4631      	mov	r1, r6
 8000bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfe:	f1c2 0320 	rsb	r3, r2, #32
 8000c02:	40d8      	lsrs	r0, r3
 8000c04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c08:	fa21 f303 	lsr.w	r3, r1, r3
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	4301      	orrs	r1, r0
 8000c10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c14:	fa1f fe8c 	uxth.w	lr, ip
 8000c18:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c1c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c20:	0c0b      	lsrs	r3, r1, #16
 8000c22:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c26:	fb00 f60e 	mul.w	r6, r0, lr
 8000c2a:	429e      	cmp	r6, r3
 8000c2c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c30:	d908      	bls.n	8000c44 <__udivmoddi4+0x260>
 8000c32:	eb1c 0303 	adds.w	r3, ip, r3
 8000c36:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000c3a:	d22f      	bcs.n	8000c9c <__udivmoddi4+0x2b8>
 8000c3c:	429e      	cmp	r6, r3
 8000c3e:	d92d      	bls.n	8000c9c <__udivmoddi4+0x2b8>
 8000c40:	3802      	subs	r0, #2
 8000c42:	4463      	add	r3, ip
 8000c44:	1b9b      	subs	r3, r3, r6
 8000c46:	b289      	uxth	r1, r1
 8000c48:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c4c:	fb07 3316 	mls	r3, r7, r6, r3
 8000c50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c54:	fb06 f30e 	mul.w	r3, r6, lr
 8000c58:	428b      	cmp	r3, r1
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x28a>
 8000c5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c60:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000c64:	d216      	bcs.n	8000c94 <__udivmoddi4+0x2b0>
 8000c66:	428b      	cmp	r3, r1
 8000c68:	d914      	bls.n	8000c94 <__udivmoddi4+0x2b0>
 8000c6a:	3e02      	subs	r6, #2
 8000c6c:	4461      	add	r1, ip
 8000c6e:	1ac9      	subs	r1, r1, r3
 8000c70:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c74:	e738      	b.n	8000ae8 <__udivmoddi4+0x104>
 8000c76:	462e      	mov	r6, r5
 8000c78:	4628      	mov	r0, r5
 8000c7a:	e705      	b.n	8000a88 <__udivmoddi4+0xa4>
 8000c7c:	4606      	mov	r6, r0
 8000c7e:	e6e3      	b.n	8000a48 <__udivmoddi4+0x64>
 8000c80:	4618      	mov	r0, r3
 8000c82:	e6f8      	b.n	8000a76 <__udivmoddi4+0x92>
 8000c84:	454b      	cmp	r3, r9
 8000c86:	d2a9      	bcs.n	8000bdc <__udivmoddi4+0x1f8>
 8000c88:	ebb9 0802 	subs.w	r8, r9, r2
 8000c8c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c90:	3801      	subs	r0, #1
 8000c92:	e7a3      	b.n	8000bdc <__udivmoddi4+0x1f8>
 8000c94:	4646      	mov	r6, r8
 8000c96:	e7ea      	b.n	8000c6e <__udivmoddi4+0x28a>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	e794      	b.n	8000bc6 <__udivmoddi4+0x1e2>
 8000c9c:	4640      	mov	r0, r8
 8000c9e:	e7d1      	b.n	8000c44 <__udivmoddi4+0x260>
 8000ca0:	46d0      	mov	r8, sl
 8000ca2:	e77b      	b.n	8000b9c <__udivmoddi4+0x1b8>
 8000ca4:	3b02      	subs	r3, #2
 8000ca6:	4461      	add	r1, ip
 8000ca8:	e732      	b.n	8000b10 <__udivmoddi4+0x12c>
 8000caa:	4630      	mov	r0, r6
 8000cac:	e709      	b.n	8000ac2 <__udivmoddi4+0xde>
 8000cae:	4464      	add	r4, ip
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	e742      	b.n	8000b3a <__udivmoddi4+0x156>

08000cb4 <__aeabi_idiv0>:
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <_write>:

/* USER CODE END PFP */


int _write(int fd, char * ptr, int len)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	607a      	str	r2, [r7, #4]
  //HAL_UART_Transmit(&huart4, (uint8_t *) ptr, len, HAL_MAX_DELAY);
  HAL_UART_Transmit_DMA(&huart4, (uint8_t *) ptr, len);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	b29b      	uxth	r3, r3
 8000cc8:	461a      	mov	r2, r3
 8000cca:	68b9      	ldr	r1, [r7, #8]
 8000ccc:	4803      	ldr	r0, [pc, #12]	; (8000cdc <_write+0x24>)
 8000cce:	f003 f913 	bl	8003ef8 <HAL_UART_Transmit_DMA>
  return len;
 8000cd2:	687b      	ldr	r3, [r7, #4]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3710      	adds	r7, #16
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	200001cc 	.word	0x200001cc

08000ce0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ce4:	f000 fd78 	bl	80017d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ce8:	f000 f81a 	bl	8000d20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cec:	f000 f8fa 	bl	8000ee4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000cf0:	f000 f8d8 	bl	8000ea4 <MX_DMA_Init>
  MX_I2S2_Init();
 8000cf4:	f000 f87e 	bl	8000df4 <MX_I2S2_Init>
  MX_UART4_Init();
 8000cf8:	f000 f8aa 	bl	8000e50 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  HAL_I2SEx_TransmitReceive_DMA(&hi2s2, tx_buf, rx_buf, 4);
 8000cfc:	2304      	movs	r3, #4
 8000cfe:	4a04      	ldr	r2, [pc, #16]	; (8000d10 <main+0x30>)
 8000d00:	4904      	ldr	r1, [pc, #16]	; (8000d14 <main+0x34>)
 8000d02:	4805      	ldr	r0, [pc, #20]	; (8000d18 <main+0x38>)
 8000d04:	f001 fe3e 	bl	8002984 <HAL_I2SEx_TransmitReceive_DMA>

  //uint8_t message[] = "transmit receive started!\n\r";
  printf("transmit receive started!\r\n");
 8000d08:	4804      	ldr	r0, [pc, #16]	; (8000d1c <main+0x3c>)
 8000d0a:	f003 fdd5 	bl	80048b8 <puts>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d0e:	e7fe      	b.n	8000d0e <main+0x2e>
 8000d10:	20000210 	.word	0x20000210
 8000d14:	20000220 	.word	0x20000220
 8000d18:	200000c4 	.word	0x200000c4
 8000d1c:	080051f0 	.word	0x080051f0

08000d20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b094      	sub	sp, #80	; 0x50
 8000d24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d26:	f107 0320 	add.w	r3, r7, #32
 8000d2a:	2230      	movs	r2, #48	; 0x30
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f003 fd4c 	bl	80047cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d34:	f107 030c 	add.w	r3, r7, #12
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d44:	2300      	movs	r3, #0
 8000d46:	60bb      	str	r3, [r7, #8]
 8000d48:	4b28      	ldr	r3, [pc, #160]	; (8000dec <SystemClock_Config+0xcc>)
 8000d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4c:	4a27      	ldr	r2, [pc, #156]	; (8000dec <SystemClock_Config+0xcc>)
 8000d4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d52:	6413      	str	r3, [r2, #64]	; 0x40
 8000d54:	4b25      	ldr	r3, [pc, #148]	; (8000dec <SystemClock_Config+0xcc>)
 8000d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d5c:	60bb      	str	r3, [r7, #8]
 8000d5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d60:	2300      	movs	r3, #0
 8000d62:	607b      	str	r3, [r7, #4]
 8000d64:	4b22      	ldr	r3, [pc, #136]	; (8000df0 <SystemClock_Config+0xd0>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a21      	ldr	r2, [pc, #132]	; (8000df0 <SystemClock_Config+0xd0>)
 8000d6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d6e:	6013      	str	r3, [r2, #0]
 8000d70:	4b1f      	ldr	r3, [pc, #124]	; (8000df0 <SystemClock_Config+0xd0>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d78:	607b      	str	r3, [r7, #4]
 8000d7a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d86:	2302      	movs	r3, #2
 8000d88:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d8a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d90:	2304      	movs	r3, #4
 8000d92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000d94:	23a8      	movs	r3, #168	; 0xa8
 8000d96:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d9c:	2304      	movs	r3, #4
 8000d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000da0:	f107 0320 	add.w	r3, r7, #32
 8000da4:	4618      	mov	r0, r3
 8000da6:	f002 fa81 	bl	80032ac <HAL_RCC_OscConfig>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000db0:	f000 fa9e 	bl	80012f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000db4:	230f      	movs	r3, #15
 8000db6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000db8:	2302      	movs	r3, #2
 8000dba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000dc0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000dc4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000dc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000dcc:	f107 030c 	add.w	r3, r7, #12
 8000dd0:	2105      	movs	r1, #5
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f002 fce2 	bl	800379c <HAL_RCC_ClockConfig>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000dde:	f000 fa87 	bl	80012f0 <Error_Handler>
  }
}
 8000de2:	bf00      	nop
 8000de4:	3750      	adds	r7, #80	; 0x50
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40023800 	.word	0x40023800
 8000df0:	40007000 	.word	0x40007000

08000df4 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000df8:	4b13      	ldr	r3, [pc, #76]	; (8000e48 <MX_I2S2_Init+0x54>)
 8000dfa:	4a14      	ldr	r2, [pc, #80]	; (8000e4c <MX_I2S2_Init+0x58>)
 8000dfc:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000dfe:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <MX_I2S2_Init+0x54>)
 8000e00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e04:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000e06:	4b10      	ldr	r3, [pc, #64]	; (8000e48 <MX_I2S2_Init+0x54>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000e0c:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <MX_I2S2_Init+0x54>)
 8000e0e:	2203      	movs	r2, #3
 8000e10:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000e12:	4b0d      	ldr	r3, [pc, #52]	; (8000e48 <MX_I2S2_Init+0x54>)
 8000e14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e18:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000e1a:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <MX_I2S2_Init+0x54>)
 8000e1c:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000e20:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000e22:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <MX_I2S2_Init+0x54>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000e28:	4b07      	ldr	r3, [pc, #28]	; (8000e48 <MX_I2S2_Init+0x54>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <MX_I2S2_Init+0x54>)
 8000e30:	2201      	movs	r2, #1
 8000e32:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000e34:	4804      	ldr	r0, [pc, #16]	; (8000e48 <MX_I2S2_Init+0x54>)
 8000e36:	f001 fb5f 	bl	80024f8 <HAL_I2S_Init>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8000e40:	f000 fa56 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000e44:	bf00      	nop
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	200000c4 	.word	0x200000c4
 8000e4c:	40003800 	.word	0x40003800

08000e50 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000e54:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <MX_UART4_Init+0x4c>)
 8000e56:	4a12      	ldr	r2, [pc, #72]	; (8000ea0 <MX_UART4_Init+0x50>)
 8000e58:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000e5a:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <MX_UART4_Init+0x4c>)
 8000e5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e60:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000e62:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <MX_UART4_Init+0x4c>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000e68:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <MX_UART4_Init+0x4c>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000e6e:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <MX_UART4_Init+0x4c>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000e74:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <MX_UART4_Init+0x4c>)
 8000e76:	220c      	movs	r2, #12
 8000e78:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e7a:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <MX_UART4_Init+0x4c>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <MX_UART4_Init+0x4c>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000e86:	4805      	ldr	r0, [pc, #20]	; (8000e9c <MX_UART4_Init+0x4c>)
 8000e88:	f002 ffe8 	bl	8003e5c <HAL_UART_Init>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000e92:	f000 fa2d 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	200001cc 	.word	0x200001cc
 8000ea0:	40004c00 	.word	0x40004c00

08000ea4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	607b      	str	r3, [r7, #4]
 8000eae:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <MX_DMA_Init+0x3c>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	4a0b      	ldr	r2, [pc, #44]	; (8000ee0 <MX_DMA_Init+0x3c>)
 8000eb4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eba:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <MX_DMA_Init+0x3c>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ec2:	607b      	str	r3, [r7, #4]
 8000ec4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2100      	movs	r1, #0
 8000eca:	200e      	movs	r0, #14
 8000ecc:	f000 fdd1 	bl	8001a72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000ed0:	200e      	movs	r0, #14
 8000ed2:	f000 fdea 	bl	8001aaa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  //HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
  //HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);

}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40023800 	.word	0x40023800

08000ee4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	4b1e      	ldr	r3, [pc, #120]	; (8000f68 <MX_GPIO_Init+0x84>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	4a1d      	ldr	r2, [pc, #116]	; (8000f68 <MX_GPIO_Init+0x84>)
 8000ef4:	f043 0304 	orr.w	r3, r3, #4
 8000ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8000efa:	4b1b      	ldr	r3, [pc, #108]	; (8000f68 <MX_GPIO_Init+0x84>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	f003 0304 	and.w	r3, r3, #4
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	60bb      	str	r3, [r7, #8]
 8000f0a:	4b17      	ldr	r3, [pc, #92]	; (8000f68 <MX_GPIO_Init+0x84>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	4a16      	ldr	r2, [pc, #88]	; (8000f68 <MX_GPIO_Init+0x84>)
 8000f10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f14:	6313      	str	r3, [r2, #48]	; 0x30
 8000f16:	4b14      	ldr	r3, [pc, #80]	; (8000f68 <MX_GPIO_Init+0x84>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f1e:	60bb      	str	r3, [r7, #8]
 8000f20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	607b      	str	r3, [r7, #4]
 8000f26:	4b10      	ldr	r3, [pc, #64]	; (8000f68 <MX_GPIO_Init+0x84>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	4a0f      	ldr	r2, [pc, #60]	; (8000f68 <MX_GPIO_Init+0x84>)
 8000f2c:	f043 0301 	orr.w	r3, r3, #1
 8000f30:	6313      	str	r3, [r2, #48]	; 0x30
 8000f32:	4b0d      	ldr	r3, [pc, #52]	; (8000f68 <MX_GPIO_Init+0x84>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	607b      	str	r3, [r7, #4]
 8000f3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	603b      	str	r3, [r7, #0]
 8000f42:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <MX_GPIO_Init+0x84>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	4a08      	ldr	r2, [pc, #32]	; (8000f68 <MX_GPIO_Init+0x84>)
 8000f48:	f043 0302 	orr.w	r3, r3, #2
 8000f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4e:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <MX_GPIO_Init+0x84>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	f003 0302 	and.w	r3, r3, #2
 8000f56:	603b      	str	r3, [r7, #0]
 8000f58:	683b      	ldr	r3, [r7, #0]

}
 8000f5a:	bf00      	nop
 8000f5c:	3714      	adds	r7, #20
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	40023800 	.word	0x40023800

08000f6c <HAL_I2SEx_TxRxHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
	char side = 0x00;
 8000f74:	2300      	movs	r3, #0
 8000f76:	73fb      	strb	r3, [r7, #15]
	Process_Data(&side);
 8000f78:	f107 030f 	add.w	r3, r7, #15
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f000 f813 	bl	8000fa8 <Process_Data>
}
 8000f82:	bf00      	nop
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <HAL_I2SEx_TxRxCpltCallback>:
void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b084      	sub	sp, #16
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
	char side = 0x01;
 8000f92:	2301      	movs	r3, #1
 8000f94:	73fb      	strb	r3, [r7, #15]
	Process_Data(&side);
 8000f96:	f107 030f 	add.w	r3, r7, #15
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 f804 	bl	8000fa8 <Process_Data>
}
 8000fa0:	bf00      	nop
 8000fa2:	3710      	adds	r7, #16
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <Process_Data>:


void Process_Data(char *side) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08c      	sub	sp, #48	; 0x30
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
	int start = 0;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (*side == 0x01) {
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d102      	bne.n	8000fc2 <Process_Data+0x1a>
		start += 4;
 8000fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fbe:	3304      	adds	r3, #4
 8000fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	int left_in = (((int)rx_buf[start]<<16)|rx_buf[start+1])>>8;
 8000fc2:	4a31      	ldr	r2, [pc, #196]	; (8001088 <Process_Data+0xe0>)
 8000fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fca:	041b      	lsls	r3, r3, #16
 8000fcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fce:	3201      	adds	r2, #1
 8000fd0:	492d      	ldr	r1, [pc, #180]	; (8001088 <Process_Data+0xe0>)
 8000fd2:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	121b      	asrs	r3, r3, #8
 8000fda:	62bb      	str	r3, [r7, #40]	; 0x28
	int right_in = (((int)rx_buf[start+2]<<16)|rx_buf[start+3])>>8;
 8000fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fde:	3302      	adds	r3, #2
 8000fe0:	4a29      	ldr	r2, [pc, #164]	; (8001088 <Process_Data+0xe0>)
 8000fe2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fe6:	041b      	lsls	r3, r3, #16
 8000fe8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fea:	3203      	adds	r2, #3
 8000fec:	4926      	ldr	r1, [pc, #152]	; (8001088 <Process_Data+0xe0>)
 8000fee:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	121b      	asrs	r3, r3, #8
 8000ff6:	627b      	str	r3, [r7, #36]	; 0x24
	// we can do processing on them here, as long as it is
	// done in time for the buffer to be passed on by the DMA unit

	// implement a simple tanh soft distortion mechanism

	double float_left_in = (double)left_in;
 8000ff8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000ffa:	f7ff fa37 	bl	800046c <__aeabi_i2d>
 8000ffe:	4602      	mov	r2, r0
 8001000:	460b      	mov	r3, r1
 8001002:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double float_right_in = (double)right_in;
 8001006:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001008:	f7ff fa30 	bl	800046c <__aeabi_i2d>
 800100c:	4602      	mov	r2, r0
 800100e:	460b      	mov	r3, r1
 8001010:	e9c7 2304 	strd	r2, r3, [r7, #16]

	float_left_in = low_pass_filter(float_left_in, float_right_in);
 8001014:	ed97 1b04 	vldr	d1, [r7, #16]
 8001018:	ed97 0b06 	vldr	d0, [r7, #24]
 800101c:	f000 f838 	bl	8001090 <low_pass_filter>
 8001020:	ed87 0b06 	vstr	d0, [r7, #24]
	float_right_in = float_left_in;
 8001024:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001028:	e9c7 2304 	strd	r2, r3, [r7, #16]

	//float_left_in = 2 * float_left_in * 16777216.0;
	//float_right_in = 2 * float_right_in * 16777216.0;


	int left_out = (int)float_left_in;
 800102c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001030:	f7ff fc98 	bl	8000964 <__aeabi_d2iz>
 8001034:	4603      	mov	r3, r0
 8001036:	60fb      	str	r3, [r7, #12]
	int right_out = (int)float_right_in;
 8001038:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800103c:	f7ff fc92 	bl	8000964 <__aeabi_d2iz>
 8001040:	4603      	mov	r3, r0
 8001042:	60bb      	str	r3, [r7, #8]

	//int left_out = left_in;
	//int right_out = right_in;

	tx_buf[start] = (left_out>>8) & 0xFFFF;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	121b      	asrs	r3, r3, #8
 8001048:	b299      	uxth	r1, r3
 800104a:	4a10      	ldr	r2, [pc, #64]	; (800108c <Process_Data+0xe4>)
 800104c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800104e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	tx_buf[start+1] = left_out & 0xFFFF;
 8001052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001054:	3301      	adds	r3, #1
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	b291      	uxth	r1, r2
 800105a:	4a0c      	ldr	r2, [pc, #48]	; (800108c <Process_Data+0xe4>)
 800105c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	tx_buf[start+2] = (right_out>>8) & 0xFFFF;
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	121a      	asrs	r2, r3, #8
 8001064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001066:	3302      	adds	r3, #2
 8001068:	b291      	uxth	r1, r2
 800106a:	4a08      	ldr	r2, [pc, #32]	; (800108c <Process_Data+0xe4>)
 800106c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	tx_buf[start+3] = right_out & 0xFFFF;
 8001070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001072:	3303      	adds	r3, #3
 8001074:	68ba      	ldr	r2, [r7, #8]
 8001076:	b291      	uxth	r1, r2
 8001078:	4a04      	ldr	r2, [pc, #16]	; (800108c <Process_Data+0xe4>)
 800107a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 800107e:	bf00      	nop
 8001080:	3730      	adds	r7, #48	; 0x30
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000210 	.word	0x20000210
 800108c:	20000220 	.word	0x20000220

08001090 <low_pass_filter>:



double low_pass_filter(double left, double right) {
 8001090:	b5b0      	push	{r4, r5, r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0
 8001096:	ed87 0b02 	vstr	d0, [r7, #8]
 800109a:	ed87 1b00 	vstr	d1, [r7]

	double return_value;
	input_list[9] = input_list[8];
 800109e:	4b8a      	ldr	r3, [pc, #552]	; (80012c8 <low_pass_filter+0x238>)
 80010a0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80010a4:	4988      	ldr	r1, [pc, #544]	; (80012c8 <low_pass_filter+0x238>)
 80010a6:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	input_list[8] = input_list[7];
 80010aa:	4b87      	ldr	r3, [pc, #540]	; (80012c8 <low_pass_filter+0x238>)
 80010ac:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80010b0:	4985      	ldr	r1, [pc, #532]	; (80012c8 <low_pass_filter+0x238>)
 80010b2:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	input_list[7] = input_list[6];
 80010b6:	4b84      	ldr	r3, [pc, #528]	; (80012c8 <low_pass_filter+0x238>)
 80010b8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80010bc:	4982      	ldr	r1, [pc, #520]	; (80012c8 <low_pass_filter+0x238>)
 80010be:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	input_list[6] = input_list[5];
 80010c2:	4b81      	ldr	r3, [pc, #516]	; (80012c8 <low_pass_filter+0x238>)
 80010c4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80010c8:	497f      	ldr	r1, [pc, #508]	; (80012c8 <low_pass_filter+0x238>)
 80010ca:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	input_list[5] = input_list[4];
 80010ce:	4b7e      	ldr	r3, [pc, #504]	; (80012c8 <low_pass_filter+0x238>)
 80010d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80010d4:	497c      	ldr	r1, [pc, #496]	; (80012c8 <low_pass_filter+0x238>)
 80010d6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	input_list[4] = input_list[3];
 80010da:	4b7b      	ldr	r3, [pc, #492]	; (80012c8 <low_pass_filter+0x238>)
 80010dc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80010e0:	4979      	ldr	r1, [pc, #484]	; (80012c8 <low_pass_filter+0x238>)
 80010e2:	e9c1 2308 	strd	r2, r3, [r1, #32]
	input_list[3] = input_list[2];
 80010e6:	4b78      	ldr	r3, [pc, #480]	; (80012c8 <low_pass_filter+0x238>)
 80010e8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80010ec:	4976      	ldr	r1, [pc, #472]	; (80012c8 <low_pass_filter+0x238>)
 80010ee:	e9c1 2306 	strd	r2, r3, [r1, #24]
	input_list[2] = input_list[1];
 80010f2:	4b75      	ldr	r3, [pc, #468]	; (80012c8 <low_pass_filter+0x238>)
 80010f4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80010f8:	4973      	ldr	r1, [pc, #460]	; (80012c8 <low_pass_filter+0x238>)
 80010fa:	e9c1 2304 	strd	r2, r3, [r1, #16]
	input_list[1] = input_list[0];
 80010fe:	4b72      	ldr	r3, [pc, #456]	; (80012c8 <low_pass_filter+0x238>)
 8001100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001104:	4970      	ldr	r1, [pc, #448]	; (80012c8 <low_pass_filter+0x238>)
 8001106:	e9c1 2302 	strd	r2, r3, [r1, #8]
	input_list[0] = left;
 800110a:	496f      	ldr	r1, [pc, #444]	; (80012c8 <low_pass_filter+0x238>)
 800110c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001110:	e9c1 2300 	strd	r2, r3, [r1]

	output_list[9] = output_list[8];
 8001114:	4b6d      	ldr	r3, [pc, #436]	; (80012cc <low_pass_filter+0x23c>)
 8001116:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800111a:	496c      	ldr	r1, [pc, #432]	; (80012cc <low_pass_filter+0x23c>)
 800111c:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	output_list[8] = output_list[7];
 8001120:	4b6a      	ldr	r3, [pc, #424]	; (80012cc <low_pass_filter+0x23c>)
 8001122:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001126:	4969      	ldr	r1, [pc, #420]	; (80012cc <low_pass_filter+0x23c>)
 8001128:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	output_list[7] = output_list[6];
 800112c:	4b67      	ldr	r3, [pc, #412]	; (80012cc <low_pass_filter+0x23c>)
 800112e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001132:	4966      	ldr	r1, [pc, #408]	; (80012cc <low_pass_filter+0x23c>)
 8001134:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	output_list[6] = output_list[5];
 8001138:	4b64      	ldr	r3, [pc, #400]	; (80012cc <low_pass_filter+0x23c>)
 800113a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800113e:	4963      	ldr	r1, [pc, #396]	; (80012cc <low_pass_filter+0x23c>)
 8001140:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	output_list[5] = output_list[4];
 8001144:	4b61      	ldr	r3, [pc, #388]	; (80012cc <low_pass_filter+0x23c>)
 8001146:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800114a:	4960      	ldr	r1, [pc, #384]	; (80012cc <low_pass_filter+0x23c>)
 800114c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	output_list[4] = output_list[3];
 8001150:	4b5e      	ldr	r3, [pc, #376]	; (80012cc <low_pass_filter+0x23c>)
 8001152:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001156:	495d      	ldr	r1, [pc, #372]	; (80012cc <low_pass_filter+0x23c>)
 8001158:	e9c1 2308 	strd	r2, r3, [r1, #32]
	output_list[3] = output_list[2];
 800115c:	4b5b      	ldr	r3, [pc, #364]	; (80012cc <low_pass_filter+0x23c>)
 800115e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001162:	495a      	ldr	r1, [pc, #360]	; (80012cc <low_pass_filter+0x23c>)
 8001164:	e9c1 2306 	strd	r2, r3, [r1, #24]
	output_list[2] = output_list[1];
 8001168:	4b58      	ldr	r3, [pc, #352]	; (80012cc <low_pass_filter+0x23c>)
 800116a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800116e:	4957      	ldr	r1, [pc, #348]	; (80012cc <low_pass_filter+0x23c>)
 8001170:	e9c1 2304 	strd	r2, r3, [r1, #16]
	output_list[1] = output_list[0];
 8001174:	4b55      	ldr	r3, [pc, #340]	; (80012cc <low_pass_filter+0x23c>)
 8001176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117a:	4954      	ldr	r1, [pc, #336]	; (80012cc <low_pass_filter+0x23c>)
 800117c:	e9c1 2302 	strd	r2, r3, [r1, #8]

	if (count < 10) {
 8001180:	4b53      	ldr	r3, [pc, #332]	; (80012d0 <low_pass_filter+0x240>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b09      	cmp	r3, #9
 8001186:	dc0a      	bgt.n	800119e <low_pass_filter+0x10e>
		output_list[0] = left;
 8001188:	4950      	ldr	r1, [pc, #320]	; (80012cc <low_pass_filter+0x23c>)
 800118a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800118e:	e9c1 2300 	strd	r2, r3, [r1]
		return_value = output_list[0];
 8001192:	4b4e      	ldr	r3, [pc, #312]	; (80012cc <low_pass_filter+0x23c>)
 8001194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001198:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800119c:	e07d      	b.n	800129a <low_pass_filter+0x20a>
	}
	else {
		output_list[0] = input_list[0]*b0 + input_list[1]*b1 + input_list[2]*b2
 800119e:	4b4a      	ldr	r3, [pc, #296]	; (80012c8 <low_pass_filter+0x238>)
 80011a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011a4:	4b4b      	ldr	r3, [pc, #300]	; (80012d4 <low_pass_filter+0x244>)
 80011a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011aa:	f7ff f9c9 	bl	8000540 <__aeabi_dmul>
 80011ae:	4602      	mov	r2, r0
 80011b0:	460b      	mov	r3, r1
 80011b2:	4614      	mov	r4, r2
 80011b4:	461d      	mov	r5, r3
 80011b6:	4b44      	ldr	r3, [pc, #272]	; (80012c8 <low_pass_filter+0x238>)
 80011b8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80011bc:	4b46      	ldr	r3, [pc, #280]	; (80012d8 <low_pass_filter+0x248>)
 80011be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c2:	f7ff f9bd 	bl	8000540 <__aeabi_dmul>
 80011c6:	4602      	mov	r2, r0
 80011c8:	460b      	mov	r3, r1
 80011ca:	4620      	mov	r0, r4
 80011cc:	4629      	mov	r1, r5
 80011ce:	f7ff f801 	bl	80001d4 <__adddf3>
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
 80011d6:	4614      	mov	r4, r2
 80011d8:	461d      	mov	r5, r3
 80011da:	4b3b      	ldr	r3, [pc, #236]	; (80012c8 <low_pass_filter+0x238>)
 80011dc:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80011e0:	4b3e      	ldr	r3, [pc, #248]	; (80012dc <low_pass_filter+0x24c>)
 80011e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e6:	f7ff f9ab 	bl	8000540 <__aeabi_dmul>
 80011ea:	4602      	mov	r2, r0
 80011ec:	460b      	mov	r3, r1
 80011ee:	4620      	mov	r0, r4
 80011f0:	4629      	mov	r1, r5
 80011f2:	f7fe ffef 	bl	80001d4 <__adddf3>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	4614      	mov	r4, r2
 80011fc:	461d      	mov	r5, r3
						+ input_list[3]*b3 - output_list[1]*a1 - output_list[2]*a2
 80011fe:	4b32      	ldr	r3, [pc, #200]	; (80012c8 <low_pass_filter+0x238>)
 8001200:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001204:	4b36      	ldr	r3, [pc, #216]	; (80012e0 <low_pass_filter+0x250>)
 8001206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800120a:	f7ff f999 	bl	8000540 <__aeabi_dmul>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	4620      	mov	r0, r4
 8001214:	4629      	mov	r1, r5
 8001216:	f7fe ffdd 	bl	80001d4 <__adddf3>
 800121a:	4602      	mov	r2, r0
 800121c:	460b      	mov	r3, r1
 800121e:	4614      	mov	r4, r2
 8001220:	461d      	mov	r5, r3
 8001222:	4b2a      	ldr	r3, [pc, #168]	; (80012cc <low_pass_filter+0x23c>)
 8001224:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001228:	4b2e      	ldr	r3, [pc, #184]	; (80012e4 <low_pass_filter+0x254>)
 800122a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122e:	f7ff f987 	bl	8000540 <__aeabi_dmul>
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	4620      	mov	r0, r4
 8001238:	4629      	mov	r1, r5
 800123a:	f7fe ffc9 	bl	80001d0 <__aeabi_dsub>
 800123e:	4602      	mov	r2, r0
 8001240:	460b      	mov	r3, r1
 8001242:	4614      	mov	r4, r2
 8001244:	461d      	mov	r5, r3
 8001246:	4b21      	ldr	r3, [pc, #132]	; (80012cc <low_pass_filter+0x23c>)
 8001248:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800124c:	4b26      	ldr	r3, [pc, #152]	; (80012e8 <low_pass_filter+0x258>)
 800124e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001252:	f7ff f975 	bl	8000540 <__aeabi_dmul>
 8001256:	4602      	mov	r2, r0
 8001258:	460b      	mov	r3, r1
 800125a:	4620      	mov	r0, r4
 800125c:	4629      	mov	r1, r5
 800125e:	f7fe ffb7 	bl	80001d0 <__aeabi_dsub>
 8001262:	4602      	mov	r2, r0
 8001264:	460b      	mov	r3, r1
 8001266:	4614      	mov	r4, r2
 8001268:	461d      	mov	r5, r3
						- output_list[3]*a3;
 800126a:	4b18      	ldr	r3, [pc, #96]	; (80012cc <low_pass_filter+0x23c>)
 800126c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001270:	4b1e      	ldr	r3, [pc, #120]	; (80012ec <low_pass_filter+0x25c>)
 8001272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001276:	f7ff f963 	bl	8000540 <__aeabi_dmul>
 800127a:	4602      	mov	r2, r0
 800127c:	460b      	mov	r3, r1
 800127e:	4620      	mov	r0, r4
 8001280:	4629      	mov	r1, r5
 8001282:	f7fe ffa5 	bl	80001d0 <__aeabi_dsub>
 8001286:	4602      	mov	r2, r0
 8001288:	460b      	mov	r3, r1
		output_list[0] = input_list[0]*b0 + input_list[1]*b1 + input_list[2]*b2
 800128a:	4910      	ldr	r1, [pc, #64]	; (80012cc <low_pass_filter+0x23c>)
 800128c:	e9c1 2300 	strd	r2, r3, [r1]
		return_value = output_list[0];
 8001290:	4b0e      	ldr	r3, [pc, #56]	; (80012cc <low_pass_filter+0x23c>)
 8001292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001296:	e9c7 2304 	strd	r2, r3, [r7, #16]
	}

	count++;
 800129a:	4b0d      	ldr	r3, [pc, #52]	; (80012d0 <low_pass_filter+0x240>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	3301      	adds	r3, #1
 80012a0:	4a0b      	ldr	r2, [pc, #44]	; (80012d0 <low_pass_filter+0x240>)
 80012a2:	6013      	str	r3, [r2, #0]
	if (count > 15) {
 80012a4:	4b0a      	ldr	r3, [pc, #40]	; (80012d0 <low_pass_filter+0x240>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2b0f      	cmp	r3, #15
 80012aa:	dd02      	ble.n	80012b2 <low_pass_filter+0x222>
		count = 15;
 80012ac:	4b08      	ldr	r3, [pc, #32]	; (80012d0 <low_pass_filter+0x240>)
 80012ae:	220f      	movs	r2, #15
 80012b0:	601a      	str	r2, [r3, #0]
	}
	return return_value;
 80012b2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80012b6:	ec43 2b17 	vmov	d7, r2, r3
}
 80012ba:	eeb0 0a47 	vmov.f32	s0, s14
 80012be:	eef0 0a67 	vmov.f32	s1, s15
 80012c2:	3718      	adds	r7, #24
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bdb0      	pop	{r4, r5, r7, pc}
 80012c8:	20000230 	.word	0x20000230
 80012cc:	20000280 	.word	0x20000280
 80012d0:	200002d0 	.word	0x200002d0
 80012d4:	20000000 	.word	0x20000000
 80012d8:	20000008 	.word	0x20000008
 80012dc:	20000010 	.word	0x20000010
 80012e0:	20000018 	.word	0x20000018
 80012e4:	20000020 	.word	0x20000020
 80012e8:	20000028 	.word	0x20000028
 80012ec:	20000030 	.word	0x20000030

080012f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f4:	b672      	cpsid	i
}
 80012f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012f8:	e7fe      	b.n	80012f8 <Error_Handler+0x8>
	...

080012fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	607b      	str	r3, [r7, #4]
 8001306:	4b10      	ldr	r3, [pc, #64]	; (8001348 <HAL_MspInit+0x4c>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	4a0f      	ldr	r2, [pc, #60]	; (8001348 <HAL_MspInit+0x4c>)
 800130c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001310:	6453      	str	r3, [r2, #68]	; 0x44
 8001312:	4b0d      	ldr	r3, [pc, #52]	; (8001348 <HAL_MspInit+0x4c>)
 8001314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001316:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800131a:	607b      	str	r3, [r7, #4]
 800131c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	603b      	str	r3, [r7, #0]
 8001322:	4b09      	ldr	r3, [pc, #36]	; (8001348 <HAL_MspInit+0x4c>)
 8001324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001326:	4a08      	ldr	r2, [pc, #32]	; (8001348 <HAL_MspInit+0x4c>)
 8001328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800132c:	6413      	str	r3, [r2, #64]	; 0x40
 800132e:	4b06      	ldr	r3, [pc, #24]	; (8001348 <HAL_MspInit+0x4c>)
 8001330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001336:	603b      	str	r3, [r7, #0]
 8001338:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800133a:	bf00      	nop
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	40023800 	.word	0x40023800

0800134c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08e      	sub	sp, #56	; 0x38
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001364:	f107 0314 	add.w	r3, r7, #20
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI2)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a6b      	ldr	r2, [pc, #428]	; (8001524 <HAL_I2S_MspInit+0x1d8>)
 8001378:	4293      	cmp	r3, r2
 800137a:	f040 80cf 	bne.w	800151c <HAL_I2S_MspInit+0x1d0>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800137e:	2301      	movs	r3, #1
 8001380:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001382:	23c0      	movs	r3, #192	; 0xc0
 8001384:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001386:	2302      	movs	r3, #2
 8001388:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800138a:	f107 0314 	add.w	r3, r7, #20
 800138e:	4618      	mov	r0, r3
 8001390:	f002 fc24 	bl	8003bdc <HAL_RCCEx_PeriphCLKConfig>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 800139a:	f7ff ffa9 	bl	80012f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	613b      	str	r3, [r7, #16]
 80013a2:	4b61      	ldr	r3, [pc, #388]	; (8001528 <HAL_I2S_MspInit+0x1dc>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	4a60      	ldr	r2, [pc, #384]	; (8001528 <HAL_I2S_MspInit+0x1dc>)
 80013a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013ac:	6413      	str	r3, [r2, #64]	; 0x40
 80013ae:	4b5e      	ldr	r3, [pc, #376]	; (8001528 <HAL_I2S_MspInit+0x1dc>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013b6:	613b      	str	r3, [r7, #16]
 80013b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	4b5a      	ldr	r3, [pc, #360]	; (8001528 <HAL_I2S_MspInit+0x1dc>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	4a59      	ldr	r2, [pc, #356]	; (8001528 <HAL_I2S_MspInit+0x1dc>)
 80013c4:	f043 0302 	orr.w	r3, r3, #2
 80013c8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ca:	4b57      	ldr	r3, [pc, #348]	; (8001528 <HAL_I2S_MspInit+0x1dc>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	60bb      	str	r3, [r7, #8]
 80013da:	4b53      	ldr	r3, [pc, #332]	; (8001528 <HAL_I2S_MspInit+0x1dc>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	4a52      	ldr	r2, [pc, #328]	; (8001528 <HAL_I2S_MspInit+0x1dc>)
 80013e0:	f043 0304 	orr.w	r3, r3, #4
 80013e4:	6313      	str	r3, [r2, #48]	; 0x30
 80013e6:	4b50      	ldr	r3, [pc, #320]	; (8001528 <HAL_I2S_MspInit+0x1dc>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	f003 0304 	and.w	r3, r3, #4
 80013ee:	60bb      	str	r3, [r7, #8]
 80013f0:	68bb      	ldr	r3, [r7, #8]
    PB13     ------> I2S2_CK
    PB14     ------> I2S2_ext_SD
    PB15     ------> I2S2_SD
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80013f2:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80013f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f8:	2302      	movs	r3, #2
 80013fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001400:	2300      	movs	r3, #0
 8001402:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001404:	2305      	movs	r3, #5
 8001406:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001408:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800140c:	4619      	mov	r1, r3
 800140e:	4847      	ldr	r0, [pc, #284]	; (800152c <HAL_I2S_MspInit+0x1e0>)
 8001410:	f000 fed6 	bl	80021c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001414:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001418:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141a:	2302      	movs	r3, #2
 800141c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001422:	2300      	movs	r3, #0
 8001424:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8001426:	2306      	movs	r3, #6
 8001428:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800142a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800142e:	4619      	mov	r1, r3
 8001430:	483e      	ldr	r0, [pc, #248]	; (800152c <HAL_I2S_MspInit+0x1e0>)
 8001432:	f000 fec5 	bl	80021c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001436:	2340      	movs	r3, #64	; 0x40
 8001438:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143a:	2302      	movs	r3, #2
 800143c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001442:	2300      	movs	r3, #0
 8001444:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001446:	2305      	movs	r3, #5
 8001448:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800144a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800144e:	4619      	mov	r1, r3
 8001450:	4837      	ldr	r0, [pc, #220]	; (8001530 <HAL_I2S_MspInit+0x1e4>)
 8001452:	f000 feb5 	bl	80021c0 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* I2S2_EXT_RX Init */
    hdma_i2s2_ext_rx.Instance = DMA1_Stream3;
 8001456:	4b37      	ldr	r3, [pc, #220]	; (8001534 <HAL_I2S_MspInit+0x1e8>)
 8001458:	4a37      	ldr	r2, [pc, #220]	; (8001538 <HAL_I2S_MspInit+0x1ec>)
 800145a:	601a      	str	r2, [r3, #0]
    hdma_i2s2_ext_rx.Init.Channel = DMA_CHANNEL_3;
 800145c:	4b35      	ldr	r3, [pc, #212]	; (8001534 <HAL_I2S_MspInit+0x1e8>)
 800145e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001462:	605a      	str	r2, [r3, #4]
    hdma_i2s2_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001464:	4b33      	ldr	r3, [pc, #204]	; (8001534 <HAL_I2S_MspInit+0x1e8>)
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
    hdma_i2s2_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800146a:	4b32      	ldr	r3, [pc, #200]	; (8001534 <HAL_I2S_MspInit+0x1e8>)
 800146c:	2200      	movs	r2, #0
 800146e:	60da      	str	r2, [r3, #12]
    hdma_i2s2_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001470:	4b30      	ldr	r3, [pc, #192]	; (8001534 <HAL_I2S_MspInit+0x1e8>)
 8001472:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001476:	611a      	str	r2, [r3, #16]
    hdma_i2s2_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001478:	4b2e      	ldr	r3, [pc, #184]	; (8001534 <HAL_I2S_MspInit+0x1e8>)
 800147a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800147e:	615a      	str	r2, [r3, #20]
    hdma_i2s2_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001480:	4b2c      	ldr	r3, [pc, #176]	; (8001534 <HAL_I2S_MspInit+0x1e8>)
 8001482:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001486:	619a      	str	r2, [r3, #24]
    hdma_i2s2_ext_rx.Init.Mode = DMA_CIRCULAR;
 8001488:	4b2a      	ldr	r3, [pc, #168]	; (8001534 <HAL_I2S_MspInit+0x1e8>)
 800148a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800148e:	61da      	str	r2, [r3, #28]
    hdma_i2s2_ext_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001490:	4b28      	ldr	r3, [pc, #160]	; (8001534 <HAL_I2S_MspInit+0x1e8>)
 8001492:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001496:	621a      	str	r2, [r3, #32]
    hdma_i2s2_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001498:	4b26      	ldr	r3, [pc, #152]	; (8001534 <HAL_I2S_MspInit+0x1e8>)
 800149a:	2200      	movs	r2, #0
 800149c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2s2_ext_rx) != HAL_OK)
 800149e:	4825      	ldr	r0, [pc, #148]	; (8001534 <HAL_I2S_MspInit+0x1e8>)
 80014a0:	f000 fb1e 	bl	8001ae0 <HAL_DMA_Init>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <HAL_I2S_MspInit+0x162>
    {
      Error_Handler();
 80014aa:	f7ff ff21 	bl	80012f0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_i2s2_ext_rx);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a20      	ldr	r2, [pc, #128]	; (8001534 <HAL_I2S_MspInit+0x1e8>)
 80014b2:	63da      	str	r2, [r3, #60]	; 0x3c
 80014b4:	4a1f      	ldr	r2, [pc, #124]	; (8001534 <HAL_I2S_MspInit+0x1e8>)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80014ba:	4b20      	ldr	r3, [pc, #128]	; (800153c <HAL_I2S_MspInit+0x1f0>)
 80014bc:	4a20      	ldr	r2, [pc, #128]	; (8001540 <HAL_I2S_MspInit+0x1f4>)
 80014be:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80014c0:	4b1e      	ldr	r3, [pc, #120]	; (800153c <HAL_I2S_MspInit+0x1f0>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014c6:	4b1d      	ldr	r3, [pc, #116]	; (800153c <HAL_I2S_MspInit+0x1f0>)
 80014c8:	2240      	movs	r2, #64	; 0x40
 80014ca:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014cc:	4b1b      	ldr	r3, [pc, #108]	; (800153c <HAL_I2S_MspInit+0x1f0>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014d2:	4b1a      	ldr	r3, [pc, #104]	; (800153c <HAL_I2S_MspInit+0x1f0>)
 80014d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014d8:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014da:	4b18      	ldr	r3, [pc, #96]	; (800153c <HAL_I2S_MspInit+0x1f0>)
 80014dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014e0:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014e2:	4b16      	ldr	r3, [pc, #88]	; (800153c <HAL_I2S_MspInit+0x1f0>)
 80014e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014e8:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 80014ea:	4b14      	ldr	r3, [pc, #80]	; (800153c <HAL_I2S_MspInit+0x1f0>)
 80014ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014f0:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80014f2:	4b12      	ldr	r3, [pc, #72]	; (800153c <HAL_I2S_MspInit+0x1f0>)
 80014f4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80014f8:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014fa:	4b10      	ldr	r3, [pc, #64]	; (800153c <HAL_I2S_MspInit+0x1f0>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001500:	480e      	ldr	r0, [pc, #56]	; (800153c <HAL_I2S_MspInit+0x1f0>)
 8001502:	f000 faed 	bl	8001ae0 <HAL_DMA_Init>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <HAL_I2S_MspInit+0x1c4>
    {
      Error_Handler();
 800150c:	f7ff fef0 	bl	80012f0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	4a0a      	ldr	r2, [pc, #40]	; (800153c <HAL_I2S_MspInit+0x1f0>)
 8001514:	639a      	str	r2, [r3, #56]	; 0x38
 8001516:	4a09      	ldr	r2, [pc, #36]	; (800153c <HAL_I2S_MspInit+0x1f0>)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800151c:	bf00      	nop
 800151e:	3738      	adds	r7, #56	; 0x38
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40003800 	.word	0x40003800
 8001528:	40023800 	.word	0x40023800
 800152c:	40020400 	.word	0x40020400
 8001530:	40020800 	.word	0x40020800
 8001534:	2000010c 	.word	0x2000010c
 8001538:	40026058 	.word	0x40026058
 800153c:	2000016c 	.word	0x2000016c
 8001540:	40026070 	.word	0x40026070

08001544 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b08a      	sub	sp, #40	; 0x28
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154c:	f107 0314 	add.w	r3, r7, #20
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a19      	ldr	r2, [pc, #100]	; (80015c8 <HAL_UART_MspInit+0x84>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d12b      	bne.n	80015be <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	613b      	str	r3, [r7, #16]
 800156a:	4b18      	ldr	r3, [pc, #96]	; (80015cc <HAL_UART_MspInit+0x88>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156e:	4a17      	ldr	r2, [pc, #92]	; (80015cc <HAL_UART_MspInit+0x88>)
 8001570:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001574:	6413      	str	r3, [r2, #64]	; 0x40
 8001576:	4b15      	ldr	r3, [pc, #84]	; (80015cc <HAL_UART_MspInit+0x88>)
 8001578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800157e:	613b      	str	r3, [r7, #16]
 8001580:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	4b11      	ldr	r3, [pc, #68]	; (80015cc <HAL_UART_MspInit+0x88>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	4a10      	ldr	r2, [pc, #64]	; (80015cc <HAL_UART_MspInit+0x88>)
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	6313      	str	r3, [r2, #48]	; 0x30
 8001592:	4b0e      	ldr	r3, [pc, #56]	; (80015cc <HAL_UART_MspInit+0x88>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800159e:	2303      	movs	r3, #3
 80015a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a2:	2302      	movs	r3, #2
 80015a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015aa:	2303      	movs	r3, #3
 80015ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80015ae:	2308      	movs	r3, #8
 80015b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b2:	f107 0314 	add.w	r3, r7, #20
 80015b6:	4619      	mov	r1, r3
 80015b8:	4805      	ldr	r0, [pc, #20]	; (80015d0 <HAL_UART_MspInit+0x8c>)
 80015ba:	f000 fe01 	bl	80021c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80015be:	bf00      	nop
 80015c0:	3728      	adds	r7, #40	; 0x28
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40004c00 	.word	0x40004c00
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40020000 	.word	0x40020000

080015d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015d8:	e7fe      	b.n	80015d8 <NMI_Handler+0x4>

080015da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015de:	e7fe      	b.n	80015de <HardFault_Handler+0x4>

080015e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e4:	e7fe      	b.n	80015e4 <MemManage_Handler+0x4>

080015e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ea:	e7fe      	b.n	80015ea <BusFault_Handler+0x4>

080015ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f0:	e7fe      	b.n	80015f0 <UsageFault_Handler+0x4>

080015f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015f2:	b480      	push	{r7}
 80015f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800160e:	b480      	push	{r7}
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001620:	f000 f92c 	bl	800187c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001624:	bf00      	nop
 8001626:	bd80      	pop	{r7, pc}

08001628 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s2_ext_rx);
 800162c:	4802      	ldr	r0, [pc, #8]	; (8001638 <DMA1_Stream3_IRQHandler+0x10>)
 800162e:	f000 fb5d 	bl	8001cec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	2000010c 	.word	0x2000010c

0800163c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001640:	4802      	ldr	r0, [pc, #8]	; (800164c <DMA1_Stream4_IRQHandler+0x10>)
 8001642:	f000 fb53 	bl	8001cec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	2000016c 	.word	0x2000016c

08001650 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800165c:	2300      	movs	r3, #0
 800165e:	617b      	str	r3, [r7, #20]
 8001660:	e00a      	b.n	8001678 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001662:	f3af 8000 	nop.w
 8001666:	4601      	mov	r1, r0
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	1c5a      	adds	r2, r3, #1
 800166c:	60ba      	str	r2, [r7, #8]
 800166e:	b2ca      	uxtb	r2, r1
 8001670:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	3301      	adds	r3, #1
 8001676:	617b      	str	r3, [r7, #20]
 8001678:	697a      	ldr	r2, [r7, #20]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	429a      	cmp	r2, r3
 800167e:	dbf0      	blt.n	8001662 <_read+0x12>
	}

return len;
 8001680:	687b      	ldr	r3, [r7, #4]
}
 8001682:	4618      	mov	r0, r3
 8001684:	3718      	adds	r7, #24
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <_close>:
	}
	return len;
}

int _close(int file)
{
 800168a:	b480      	push	{r7}
 800168c:	b083      	sub	sp, #12
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
	return -1;
 8001692:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001696:	4618      	mov	r0, r3
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr

080016a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016a2:	b480      	push	{r7}
 80016a4:	b083      	sub	sp, #12
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
 80016aa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016b2:	605a      	str	r2, [r3, #4]
	return 0;
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <_isatty>:

int _isatty(int file)
{
 80016c2:	b480      	push	{r7}
 80016c4:	b083      	sub	sp, #12
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
	return 1;
 80016ca:	2301      	movs	r3, #1
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
	return 0;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3714      	adds	r7, #20
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
	...

080016f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016fc:	4a14      	ldr	r2, [pc, #80]	; (8001750 <_sbrk+0x5c>)
 80016fe:	4b15      	ldr	r3, [pc, #84]	; (8001754 <_sbrk+0x60>)
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001708:	4b13      	ldr	r3, [pc, #76]	; (8001758 <_sbrk+0x64>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d102      	bne.n	8001716 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001710:	4b11      	ldr	r3, [pc, #68]	; (8001758 <_sbrk+0x64>)
 8001712:	4a12      	ldr	r2, [pc, #72]	; (800175c <_sbrk+0x68>)
 8001714:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001716:	4b10      	ldr	r3, [pc, #64]	; (8001758 <_sbrk+0x64>)
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4413      	add	r3, r2
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	429a      	cmp	r2, r3
 8001722:	d207      	bcs.n	8001734 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001724:	f003 f828 	bl	8004778 <__errno>
 8001728:	4603      	mov	r3, r0
 800172a:	220c      	movs	r2, #12
 800172c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800172e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001732:	e009      	b.n	8001748 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001734:	4b08      	ldr	r3, [pc, #32]	; (8001758 <_sbrk+0x64>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800173a:	4b07      	ldr	r3, [pc, #28]	; (8001758 <_sbrk+0x64>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4413      	add	r3, r2
 8001742:	4a05      	ldr	r2, [pc, #20]	; (8001758 <_sbrk+0x64>)
 8001744:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001746:	68fb      	ldr	r3, [r7, #12]
}
 8001748:	4618      	mov	r0, r3
 800174a:	3718      	adds	r7, #24
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	20020000 	.word	0x20020000
 8001754:	00000400 	.word	0x00000400
 8001758:	200002d4 	.word	0x200002d4
 800175c:	200002f0 	.word	0x200002f0

08001760 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001764:	4b06      	ldr	r3, [pc, #24]	; (8001780 <SystemInit+0x20>)
 8001766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800176a:	4a05      	ldr	r2, [pc, #20]	; (8001780 <SystemInit+0x20>)
 800176c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001770:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001774:	bf00      	nop
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	e000ed00 	.word	0xe000ed00

08001784 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001784:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001788:	480d      	ldr	r0, [pc, #52]	; (80017c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800178a:	490e      	ldr	r1, [pc, #56]	; (80017c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800178c:	4a0e      	ldr	r2, [pc, #56]	; (80017c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800178e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001790:	e002      	b.n	8001798 <LoopCopyDataInit>

08001792 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001792:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001794:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001796:	3304      	adds	r3, #4

08001798 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001798:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800179a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800179c:	d3f9      	bcc.n	8001792 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800179e:	4a0b      	ldr	r2, [pc, #44]	; (80017cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017a0:	4c0b      	ldr	r4, [pc, #44]	; (80017d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017a4:	e001      	b.n	80017aa <LoopFillZerobss>

080017a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017a8:	3204      	adds	r2, #4

080017aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017ac:	d3fb      	bcc.n	80017a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017ae:	f7ff ffd7 	bl	8001760 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017b2:	f002 ffe7 	bl	8004784 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017b6:	f7ff fa93 	bl	8000ce0 <main>
  bx  lr    
 80017ba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80017bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017c4:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 80017c8:	080052a0 	.word	0x080052a0
  ldr r2, =_sbss
 80017cc:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 80017d0:	200002ec 	.word	0x200002ec

080017d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017d4:	e7fe      	b.n	80017d4 <ADC_IRQHandler>
	...

080017d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017dc:	4b0e      	ldr	r3, [pc, #56]	; (8001818 <HAL_Init+0x40>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a0d      	ldr	r2, [pc, #52]	; (8001818 <HAL_Init+0x40>)
 80017e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017e8:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <HAL_Init+0x40>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a0a      	ldr	r2, [pc, #40]	; (8001818 <HAL_Init+0x40>)
 80017ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017f4:	4b08      	ldr	r3, [pc, #32]	; (8001818 <HAL_Init+0x40>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a07      	ldr	r2, [pc, #28]	; (8001818 <HAL_Init+0x40>)
 80017fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001800:	2003      	movs	r0, #3
 8001802:	f000 f92b 	bl	8001a5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001806:	200f      	movs	r0, #15
 8001808:	f000 f808 	bl	800181c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800180c:	f7ff fd76 	bl	80012fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40023c00 	.word	0x40023c00

0800181c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001824:	4b12      	ldr	r3, [pc, #72]	; (8001870 <HAL_InitTick+0x54>)
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	4b12      	ldr	r3, [pc, #72]	; (8001874 <HAL_InitTick+0x58>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	4619      	mov	r1, r3
 800182e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001832:	fbb3 f3f1 	udiv	r3, r3, r1
 8001836:	fbb2 f3f3 	udiv	r3, r2, r3
 800183a:	4618      	mov	r0, r3
 800183c:	f000 f943 	bl	8001ac6 <HAL_SYSTICK_Config>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e00e      	b.n	8001868 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2b0f      	cmp	r3, #15
 800184e:	d80a      	bhi.n	8001866 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001850:	2200      	movs	r2, #0
 8001852:	6879      	ldr	r1, [r7, #4]
 8001854:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001858:	f000 f90b 	bl	8001a72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800185c:	4a06      	ldr	r2, [pc, #24]	; (8001878 <HAL_InitTick+0x5c>)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001862:	2300      	movs	r3, #0
 8001864:	e000      	b.n	8001868 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
}
 8001868:	4618      	mov	r0, r3
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	20000038 	.word	0x20000038
 8001874:	20000040 	.word	0x20000040
 8001878:	2000003c 	.word	0x2000003c

0800187c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001880:	4b06      	ldr	r3, [pc, #24]	; (800189c <HAL_IncTick+0x20>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	461a      	mov	r2, r3
 8001886:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <HAL_IncTick+0x24>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4413      	add	r3, r2
 800188c:	4a04      	ldr	r2, [pc, #16]	; (80018a0 <HAL_IncTick+0x24>)
 800188e:	6013      	str	r3, [r2, #0]
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	20000040 	.word	0x20000040
 80018a0:	200002d8 	.word	0x200002d8

080018a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  return uwTick;
 80018a8:	4b03      	ldr	r3, [pc, #12]	; (80018b8 <HAL_GetTick+0x14>)
 80018aa:	681b      	ldr	r3, [r3, #0]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	200002d8 	.word	0x200002d8

080018bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018cc:	4b0c      	ldr	r3, [pc, #48]	; (8001900 <__NVIC_SetPriorityGrouping+0x44>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018d2:	68ba      	ldr	r2, [r7, #8]
 80018d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018d8:	4013      	ands	r3, r2
 80018da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ee:	4a04      	ldr	r2, [pc, #16]	; (8001900 <__NVIC_SetPriorityGrouping+0x44>)
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	60d3      	str	r3, [r2, #12]
}
 80018f4:	bf00      	nop
 80018f6:	3714      	adds	r7, #20
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	e000ed00 	.word	0xe000ed00

08001904 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001908:	4b04      	ldr	r3, [pc, #16]	; (800191c <__NVIC_GetPriorityGrouping+0x18>)
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	0a1b      	lsrs	r3, r3, #8
 800190e:	f003 0307 	and.w	r3, r3, #7
}
 8001912:	4618      	mov	r0, r3
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	e000ed00 	.word	0xe000ed00

08001920 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800192a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192e:	2b00      	cmp	r3, #0
 8001930:	db0b      	blt.n	800194a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	f003 021f 	and.w	r2, r3, #31
 8001938:	4907      	ldr	r1, [pc, #28]	; (8001958 <__NVIC_EnableIRQ+0x38>)
 800193a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193e:	095b      	lsrs	r3, r3, #5
 8001940:	2001      	movs	r0, #1
 8001942:	fa00 f202 	lsl.w	r2, r0, r2
 8001946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800194a:	bf00      	nop
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	e000e100 	.word	0xe000e100

0800195c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	6039      	str	r1, [r7, #0]
 8001966:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196c:	2b00      	cmp	r3, #0
 800196e:	db0a      	blt.n	8001986 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	b2da      	uxtb	r2, r3
 8001974:	490c      	ldr	r1, [pc, #48]	; (80019a8 <__NVIC_SetPriority+0x4c>)
 8001976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197a:	0112      	lsls	r2, r2, #4
 800197c:	b2d2      	uxtb	r2, r2
 800197e:	440b      	add	r3, r1
 8001980:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001984:	e00a      	b.n	800199c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	b2da      	uxtb	r2, r3
 800198a:	4908      	ldr	r1, [pc, #32]	; (80019ac <__NVIC_SetPriority+0x50>)
 800198c:	79fb      	ldrb	r3, [r7, #7]
 800198e:	f003 030f 	and.w	r3, r3, #15
 8001992:	3b04      	subs	r3, #4
 8001994:	0112      	lsls	r2, r2, #4
 8001996:	b2d2      	uxtb	r2, r2
 8001998:	440b      	add	r3, r1
 800199a:	761a      	strb	r2, [r3, #24]
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	e000e100 	.word	0xe000e100
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b089      	sub	sp, #36	; 0x24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f003 0307 	and.w	r3, r3, #7
 80019c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	f1c3 0307 	rsb	r3, r3, #7
 80019ca:	2b04      	cmp	r3, #4
 80019cc:	bf28      	it	cs
 80019ce:	2304      	movcs	r3, #4
 80019d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	3304      	adds	r3, #4
 80019d6:	2b06      	cmp	r3, #6
 80019d8:	d902      	bls.n	80019e0 <NVIC_EncodePriority+0x30>
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	3b03      	subs	r3, #3
 80019de:	e000      	b.n	80019e2 <NVIC_EncodePriority+0x32>
 80019e0:	2300      	movs	r3, #0
 80019e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	43da      	mvns	r2, r3
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	401a      	ands	r2, r3
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001a02:	43d9      	mvns	r1, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a08:	4313      	orrs	r3, r2
         );
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3724      	adds	r7, #36	; 0x24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
	...

08001a18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	3b01      	subs	r3, #1
 8001a24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a28:	d301      	bcc.n	8001a2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e00f      	b.n	8001a4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a2e:	4a0a      	ldr	r2, [pc, #40]	; (8001a58 <SysTick_Config+0x40>)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	3b01      	subs	r3, #1
 8001a34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a36:	210f      	movs	r1, #15
 8001a38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a3c:	f7ff ff8e 	bl	800195c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a40:	4b05      	ldr	r3, [pc, #20]	; (8001a58 <SysTick_Config+0x40>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a46:	4b04      	ldr	r3, [pc, #16]	; (8001a58 <SysTick_Config+0x40>)
 8001a48:	2207      	movs	r2, #7
 8001a4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	e000e010 	.word	0xe000e010

08001a5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f7ff ff29 	bl	80018bc <__NVIC_SetPriorityGrouping>
}
 8001a6a:	bf00      	nop
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b086      	sub	sp, #24
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	4603      	mov	r3, r0
 8001a7a:	60b9      	str	r1, [r7, #8]
 8001a7c:	607a      	str	r2, [r7, #4]
 8001a7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a80:	2300      	movs	r3, #0
 8001a82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a84:	f7ff ff3e 	bl	8001904 <__NVIC_GetPriorityGrouping>
 8001a88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	68b9      	ldr	r1, [r7, #8]
 8001a8e:	6978      	ldr	r0, [r7, #20]
 8001a90:	f7ff ff8e 	bl	80019b0 <NVIC_EncodePriority>
 8001a94:	4602      	mov	r2, r0
 8001a96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a9a:	4611      	mov	r1, r2
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff ff5d 	bl	800195c <__NVIC_SetPriority>
}
 8001aa2:	bf00      	nop
 8001aa4:	3718      	adds	r7, #24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b082      	sub	sp, #8
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff ff31 	bl	8001920 <__NVIC_EnableIRQ>
}
 8001abe:	bf00      	nop
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b082      	sub	sp, #8
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7ff ffa2 	bl	8001a18 <SysTick_Config>
 8001ad4:	4603      	mov	r3, r0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
	...

08001ae0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001aec:	f7ff feda 	bl	80018a4 <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d101      	bne.n	8001afc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e099      	b.n	8001c30 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2202      	movs	r2, #2
 8001b00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f022 0201 	bic.w	r2, r2, #1
 8001b1a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b1c:	e00f      	b.n	8001b3e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b1e:	f7ff fec1 	bl	80018a4 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b05      	cmp	r3, #5
 8001b2a:	d908      	bls.n	8001b3e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2220      	movs	r2, #32
 8001b30:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2203      	movs	r2, #3
 8001b36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e078      	b.n	8001c30 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0301 	and.w	r3, r3, #1
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d1e8      	bne.n	8001b1e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b54:	697a      	ldr	r2, [r7, #20]
 8001b56:	4b38      	ldr	r3, [pc, #224]	; (8001c38 <HAL_DMA_Init+0x158>)
 8001b58:	4013      	ands	r3, r2
 8001b5a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685a      	ldr	r2, [r3, #4]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	691b      	ldr	r3, [r3, #16]
 8001b70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a1b      	ldr	r3, [r3, #32]
 8001b88:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b8a:	697a      	ldr	r2, [r7, #20]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b94:	2b04      	cmp	r3, #4
 8001b96:	d107      	bne.n	8001ba8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	697a      	ldr	r2, [r7, #20]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	697a      	ldr	r2, [r7, #20]
 8001bae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	695b      	ldr	r3, [r3, #20]
 8001bb6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	f023 0307 	bic.w	r3, r3, #7
 8001bbe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc4:	697a      	ldr	r2, [r7, #20]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bce:	2b04      	cmp	r3, #4
 8001bd0:	d117      	bne.n	8001c02 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd6:	697a      	ldr	r2, [r7, #20]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d00e      	beq.n	8001c02 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f000 fa6f 	bl	80020c8 <DMA_CheckFifoParam>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d008      	beq.n	8001c02 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2240      	movs	r2, #64	; 0x40
 8001bf4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e016      	b.n	8001c30 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	697a      	ldr	r2, [r7, #20]
 8001c08:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f000 fa26 	bl	800205c <DMA_CalcBaseAndBitshift>
 8001c10:	4603      	mov	r3, r0
 8001c12:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c18:	223f      	movs	r2, #63	; 0x3f
 8001c1a:	409a      	lsls	r2, r3
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2201      	movs	r2, #1
 8001c2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001c2e:	2300      	movs	r3, #0
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3718      	adds	r7, #24
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	f010803f 	.word	0xf010803f

08001c3c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
 8001c48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c52:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d101      	bne.n	8001c62 <HAL_DMA_Start_IT+0x26>
 8001c5e:	2302      	movs	r3, #2
 8001c60:	e040      	b.n	8001ce4 <HAL_DMA_Start_IT+0xa8>
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2201      	movs	r2, #1
 8001c66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d12f      	bne.n	8001cd6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2202      	movs	r2, #2
 8001c7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2200      	movs	r2, #0
 8001c82:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	68b9      	ldr	r1, [r7, #8]
 8001c8a:	68f8      	ldr	r0, [r7, #12]
 8001c8c:	f000 f9b8 	bl	8002000 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c94:	223f      	movs	r2, #63	; 0x3f
 8001c96:	409a      	lsls	r2, r3
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f042 0216 	orr.w	r2, r2, #22
 8001caa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d007      	beq.n	8001cc4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f042 0208 	orr.w	r2, r2, #8
 8001cc2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f042 0201 	orr.w	r2, r2, #1
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	e005      	b.n	8001ce2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001cde:	2302      	movs	r3, #2
 8001ce0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001ce2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3718      	adds	r7, #24
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001cf8:	4b8e      	ldr	r3, [pc, #568]	; (8001f34 <HAL_DMA_IRQHandler+0x248>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a8e      	ldr	r2, [pc, #568]	; (8001f38 <HAL_DMA_IRQHandler+0x24c>)
 8001cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001d02:	0a9b      	lsrs	r3, r3, #10
 8001d04:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d16:	2208      	movs	r2, #8
 8001d18:	409a      	lsls	r2, r3
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d01a      	beq.n	8001d58 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0304 	and.w	r3, r3, #4
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d013      	beq.n	8001d58 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f022 0204 	bic.w	r2, r2, #4
 8001d3e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d44:	2208      	movs	r2, #8
 8001d46:	409a      	lsls	r2, r3
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d50:	f043 0201 	orr.w	r2, r3, #1
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	409a      	lsls	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	4013      	ands	r3, r2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d012      	beq.n	8001d8e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	695b      	ldr	r3, [r3, #20]
 8001d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d00b      	beq.n	8001d8e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	409a      	lsls	r2, r3
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d86:	f043 0202 	orr.w	r2, r3, #2
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d92:	2204      	movs	r2, #4
 8001d94:	409a      	lsls	r2, r3
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d012      	beq.n	8001dc4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d00b      	beq.n	8001dc4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db0:	2204      	movs	r2, #4
 8001db2:	409a      	lsls	r2, r3
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dbc:	f043 0204 	orr.w	r2, r3, #4
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc8:	2210      	movs	r2, #16
 8001dca:	409a      	lsls	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d043      	beq.n	8001e5c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0308 	and.w	r3, r3, #8
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d03c      	beq.n	8001e5c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de6:	2210      	movs	r2, #16
 8001de8:	409a      	lsls	r2, r3
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d018      	beq.n	8001e2e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d108      	bne.n	8001e1c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d024      	beq.n	8001e5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	4798      	blx	r3
 8001e1a:	e01f      	b.n	8001e5c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d01b      	beq.n	8001e5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	4798      	blx	r3
 8001e2c:	e016      	b.n	8001e5c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d107      	bne.n	8001e4c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f022 0208 	bic.w	r2, r2, #8
 8001e4a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d003      	beq.n	8001e5c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e60:	2220      	movs	r2, #32
 8001e62:	409a      	lsls	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	4013      	ands	r3, r2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	f000 808f 	beq.w	8001f8c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0310 	and.w	r3, r3, #16
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	f000 8087 	beq.w	8001f8c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e82:	2220      	movs	r2, #32
 8001e84:	409a      	lsls	r2, r3
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b05      	cmp	r3, #5
 8001e94:	d136      	bne.n	8001f04 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 0216 	bic.w	r2, r2, #22
 8001ea4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	695a      	ldr	r2, [r3, #20]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001eb4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d103      	bne.n	8001ec6 <HAL_DMA_IRQHandler+0x1da>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d007      	beq.n	8001ed6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f022 0208 	bic.w	r2, r2, #8
 8001ed4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eda:	223f      	movs	r2, #63	; 0x3f
 8001edc:	409a      	lsls	r2, r3
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d07e      	beq.n	8001ff8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	4798      	blx	r3
        }
        return;
 8001f02:	e079      	b.n	8001ff8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d01d      	beq.n	8001f4e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d10d      	bne.n	8001f3c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d031      	beq.n	8001f8c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	4798      	blx	r3
 8001f30:	e02c      	b.n	8001f8c <HAL_DMA_IRQHandler+0x2a0>
 8001f32:	bf00      	nop
 8001f34:	20000038 	.word	0x20000038
 8001f38:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d023      	beq.n	8001f8c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	4798      	blx	r3
 8001f4c:	e01e      	b.n	8001f8c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d10f      	bne.n	8001f7c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f022 0210 	bic.w	r2, r2, #16
 8001f6a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d003      	beq.n	8001f8c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d032      	beq.n	8001ffa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f98:	f003 0301 	and.w	r3, r3, #1
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d022      	beq.n	8001fe6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2205      	movs	r2, #5
 8001fa4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f022 0201 	bic.w	r2, r2, #1
 8001fb6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	60bb      	str	r3, [r7, #8]
 8001fbe:	697a      	ldr	r2, [r7, #20]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d307      	bcc.n	8001fd4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1f2      	bne.n	8001fb8 <HAL_DMA_IRQHandler+0x2cc>
 8001fd2:	e000      	b.n	8001fd6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001fd4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d005      	beq.n	8001ffa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	4798      	blx	r3
 8001ff6:	e000      	b.n	8001ffa <HAL_DMA_IRQHandler+0x30e>
        return;
 8001ff8:	bf00      	nop
    }
  }
}
 8001ffa:	3718      	adds	r7, #24
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
 800200c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800201c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	2b40      	cmp	r3, #64	; 0x40
 800202c:	d108      	bne.n	8002040 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68ba      	ldr	r2, [r7, #8]
 800203c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800203e:	e007      	b.n	8002050 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68ba      	ldr	r2, [r7, #8]
 8002046:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	60da      	str	r2, [r3, #12]
}
 8002050:	bf00      	nop
 8002052:	3714      	adds	r7, #20
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	b2db      	uxtb	r3, r3
 800206a:	3b10      	subs	r3, #16
 800206c:	4a14      	ldr	r2, [pc, #80]	; (80020c0 <DMA_CalcBaseAndBitshift+0x64>)
 800206e:	fba2 2303 	umull	r2, r3, r2, r3
 8002072:	091b      	lsrs	r3, r3, #4
 8002074:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002076:	4a13      	ldr	r2, [pc, #76]	; (80020c4 <DMA_CalcBaseAndBitshift+0x68>)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	4413      	add	r3, r2
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	461a      	mov	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2b03      	cmp	r3, #3
 8002088:	d909      	bls.n	800209e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002092:	f023 0303 	bic.w	r3, r3, #3
 8002096:	1d1a      	adds	r2, r3, #4
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	659a      	str	r2, [r3, #88]	; 0x58
 800209c:	e007      	b.n	80020ae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80020a6:	f023 0303 	bic.w	r3, r3, #3
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3714      	adds	r7, #20
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	aaaaaaab 	.word	0xaaaaaaab
 80020c4:	08005224 	.word	0x08005224

080020c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020d0:	2300      	movs	r3, #0
 80020d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d11f      	bne.n	8002122 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	2b03      	cmp	r3, #3
 80020e6:	d856      	bhi.n	8002196 <DMA_CheckFifoParam+0xce>
 80020e8:	a201      	add	r2, pc, #4	; (adr r2, 80020f0 <DMA_CheckFifoParam+0x28>)
 80020ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ee:	bf00      	nop
 80020f0:	08002101 	.word	0x08002101
 80020f4:	08002113 	.word	0x08002113
 80020f8:	08002101 	.word	0x08002101
 80020fc:	08002197 	.word	0x08002197
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002104:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d046      	beq.n	800219a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002110:	e043      	b.n	800219a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002116:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800211a:	d140      	bne.n	800219e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002120:	e03d      	b.n	800219e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800212a:	d121      	bne.n	8002170 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	2b03      	cmp	r3, #3
 8002130:	d837      	bhi.n	80021a2 <DMA_CheckFifoParam+0xda>
 8002132:	a201      	add	r2, pc, #4	; (adr r2, 8002138 <DMA_CheckFifoParam+0x70>)
 8002134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002138:	08002149 	.word	0x08002149
 800213c:	0800214f 	.word	0x0800214f
 8002140:	08002149 	.word	0x08002149
 8002144:	08002161 	.word	0x08002161
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	73fb      	strb	r3, [r7, #15]
      break;
 800214c:	e030      	b.n	80021b0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002152:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d025      	beq.n	80021a6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800215e:	e022      	b.n	80021a6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002164:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002168:	d11f      	bne.n	80021aa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800216e:	e01c      	b.n	80021aa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	2b02      	cmp	r3, #2
 8002174:	d903      	bls.n	800217e <DMA_CheckFifoParam+0xb6>
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	2b03      	cmp	r3, #3
 800217a:	d003      	beq.n	8002184 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800217c:	e018      	b.n	80021b0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	73fb      	strb	r3, [r7, #15]
      break;
 8002182:	e015      	b.n	80021b0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002188:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d00e      	beq.n	80021ae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	73fb      	strb	r3, [r7, #15]
      break;
 8002194:	e00b      	b.n	80021ae <DMA_CheckFifoParam+0xe6>
      break;
 8002196:	bf00      	nop
 8002198:	e00a      	b.n	80021b0 <DMA_CheckFifoParam+0xe8>
      break;
 800219a:	bf00      	nop
 800219c:	e008      	b.n	80021b0 <DMA_CheckFifoParam+0xe8>
      break;
 800219e:	bf00      	nop
 80021a0:	e006      	b.n	80021b0 <DMA_CheckFifoParam+0xe8>
      break;
 80021a2:	bf00      	nop
 80021a4:	e004      	b.n	80021b0 <DMA_CheckFifoParam+0xe8>
      break;
 80021a6:	bf00      	nop
 80021a8:	e002      	b.n	80021b0 <DMA_CheckFifoParam+0xe8>
      break;   
 80021aa:	bf00      	nop
 80021ac:	e000      	b.n	80021b0 <DMA_CheckFifoParam+0xe8>
      break;
 80021ae:	bf00      	nop
    }
  } 
  
  return status; 
 80021b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3714      	adds	r7, #20
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop

080021c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b089      	sub	sp, #36	; 0x24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021ca:	2300      	movs	r3, #0
 80021cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021ce:	2300      	movs	r3, #0
 80021d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021d2:	2300      	movs	r3, #0
 80021d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021d6:	2300      	movs	r3, #0
 80021d8:	61fb      	str	r3, [r7, #28]
 80021da:	e16b      	b.n	80024b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021dc:	2201      	movs	r2, #1
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	697a      	ldr	r2, [r7, #20]
 80021ec:	4013      	ands	r3, r2
 80021ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	f040 815a 	bne.w	80024ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f003 0303 	and.w	r3, r3, #3
 8002202:	2b01      	cmp	r3, #1
 8002204:	d005      	beq.n	8002212 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800220e:	2b02      	cmp	r3, #2
 8002210:	d130      	bne.n	8002274 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	2203      	movs	r2, #3
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	43db      	mvns	r3, r3
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	4013      	ands	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	68da      	ldr	r2, [r3, #12]
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	4313      	orrs	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002248:	2201      	movs	r2, #1
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	43db      	mvns	r3, r3
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	4013      	ands	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	091b      	lsrs	r3, r3, #4
 800225e:	f003 0201 	and.w	r2, r3, #1
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	4313      	orrs	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f003 0303 	and.w	r3, r3, #3
 800227c:	2b03      	cmp	r3, #3
 800227e:	d017      	beq.n	80022b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	2203      	movs	r2, #3
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	43db      	mvns	r3, r3
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	4013      	ands	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f003 0303 	and.w	r3, r3, #3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d123      	bne.n	8002304 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	08da      	lsrs	r2, r3, #3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	3208      	adds	r2, #8
 80022c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	f003 0307 	and.w	r3, r3, #7
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	220f      	movs	r2, #15
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	43db      	mvns	r3, r3
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	4013      	ands	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	691a      	ldr	r2, [r3, #16]
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	f003 0307 	and.w	r3, r3, #7
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	08da      	lsrs	r2, r3, #3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	3208      	adds	r2, #8
 80022fe:	69b9      	ldr	r1, [r7, #24]
 8002300:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	2203      	movs	r2, #3
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	43db      	mvns	r3, r3
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	4013      	ands	r3, r2
 800231a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f003 0203 	and.w	r2, r3, #3
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	4313      	orrs	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002340:	2b00      	cmp	r3, #0
 8002342:	f000 80b4 	beq.w	80024ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002346:	2300      	movs	r3, #0
 8002348:	60fb      	str	r3, [r7, #12]
 800234a:	4b60      	ldr	r3, [pc, #384]	; (80024cc <HAL_GPIO_Init+0x30c>)
 800234c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234e:	4a5f      	ldr	r2, [pc, #380]	; (80024cc <HAL_GPIO_Init+0x30c>)
 8002350:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002354:	6453      	str	r3, [r2, #68]	; 0x44
 8002356:	4b5d      	ldr	r3, [pc, #372]	; (80024cc <HAL_GPIO_Init+0x30c>)
 8002358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800235e:	60fb      	str	r3, [r7, #12]
 8002360:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002362:	4a5b      	ldr	r2, [pc, #364]	; (80024d0 <HAL_GPIO_Init+0x310>)
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	089b      	lsrs	r3, r3, #2
 8002368:	3302      	adds	r3, #2
 800236a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800236e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	f003 0303 	and.w	r3, r3, #3
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	220f      	movs	r2, #15
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	43db      	mvns	r3, r3
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	4013      	ands	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a52      	ldr	r2, [pc, #328]	; (80024d4 <HAL_GPIO_Init+0x314>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d02b      	beq.n	80023e6 <HAL_GPIO_Init+0x226>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a51      	ldr	r2, [pc, #324]	; (80024d8 <HAL_GPIO_Init+0x318>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d025      	beq.n	80023e2 <HAL_GPIO_Init+0x222>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a50      	ldr	r2, [pc, #320]	; (80024dc <HAL_GPIO_Init+0x31c>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d01f      	beq.n	80023de <HAL_GPIO_Init+0x21e>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a4f      	ldr	r2, [pc, #316]	; (80024e0 <HAL_GPIO_Init+0x320>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d019      	beq.n	80023da <HAL_GPIO_Init+0x21a>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a4e      	ldr	r2, [pc, #312]	; (80024e4 <HAL_GPIO_Init+0x324>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d013      	beq.n	80023d6 <HAL_GPIO_Init+0x216>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a4d      	ldr	r2, [pc, #308]	; (80024e8 <HAL_GPIO_Init+0x328>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d00d      	beq.n	80023d2 <HAL_GPIO_Init+0x212>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a4c      	ldr	r2, [pc, #304]	; (80024ec <HAL_GPIO_Init+0x32c>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d007      	beq.n	80023ce <HAL_GPIO_Init+0x20e>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a4b      	ldr	r2, [pc, #300]	; (80024f0 <HAL_GPIO_Init+0x330>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d101      	bne.n	80023ca <HAL_GPIO_Init+0x20a>
 80023c6:	2307      	movs	r3, #7
 80023c8:	e00e      	b.n	80023e8 <HAL_GPIO_Init+0x228>
 80023ca:	2308      	movs	r3, #8
 80023cc:	e00c      	b.n	80023e8 <HAL_GPIO_Init+0x228>
 80023ce:	2306      	movs	r3, #6
 80023d0:	e00a      	b.n	80023e8 <HAL_GPIO_Init+0x228>
 80023d2:	2305      	movs	r3, #5
 80023d4:	e008      	b.n	80023e8 <HAL_GPIO_Init+0x228>
 80023d6:	2304      	movs	r3, #4
 80023d8:	e006      	b.n	80023e8 <HAL_GPIO_Init+0x228>
 80023da:	2303      	movs	r3, #3
 80023dc:	e004      	b.n	80023e8 <HAL_GPIO_Init+0x228>
 80023de:	2302      	movs	r3, #2
 80023e0:	e002      	b.n	80023e8 <HAL_GPIO_Init+0x228>
 80023e2:	2301      	movs	r3, #1
 80023e4:	e000      	b.n	80023e8 <HAL_GPIO_Init+0x228>
 80023e6:	2300      	movs	r3, #0
 80023e8:	69fa      	ldr	r2, [r7, #28]
 80023ea:	f002 0203 	and.w	r2, r2, #3
 80023ee:	0092      	lsls	r2, r2, #2
 80023f0:	4093      	lsls	r3, r2
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023f8:	4935      	ldr	r1, [pc, #212]	; (80024d0 <HAL_GPIO_Init+0x310>)
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	089b      	lsrs	r3, r3, #2
 80023fe:	3302      	adds	r3, #2
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002406:	4b3b      	ldr	r3, [pc, #236]	; (80024f4 <HAL_GPIO_Init+0x334>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	43db      	mvns	r3, r3
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4013      	ands	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d003      	beq.n	800242a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	4313      	orrs	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800242a:	4a32      	ldr	r2, [pc, #200]	; (80024f4 <HAL_GPIO_Init+0x334>)
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002430:	4b30      	ldr	r3, [pc, #192]	; (80024f4 <HAL_GPIO_Init+0x334>)
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	43db      	mvns	r3, r3
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	4013      	ands	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d003      	beq.n	8002454 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	4313      	orrs	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002454:	4a27      	ldr	r2, [pc, #156]	; (80024f4 <HAL_GPIO_Init+0x334>)
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800245a:	4b26      	ldr	r3, [pc, #152]	; (80024f4 <HAL_GPIO_Init+0x334>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	43db      	mvns	r3, r3
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	4013      	ands	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	4313      	orrs	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800247e:	4a1d      	ldr	r2, [pc, #116]	; (80024f4 <HAL_GPIO_Init+0x334>)
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002484:	4b1b      	ldr	r3, [pc, #108]	; (80024f4 <HAL_GPIO_Init+0x334>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	43db      	mvns	r3, r3
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4013      	ands	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d003      	beq.n	80024a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024a8:	4a12      	ldr	r2, [pc, #72]	; (80024f4 <HAL_GPIO_Init+0x334>)
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	3301      	adds	r3, #1
 80024b2:	61fb      	str	r3, [r7, #28]
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	2b0f      	cmp	r3, #15
 80024b8:	f67f ae90 	bls.w	80021dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024bc:	bf00      	nop
 80024be:	bf00      	nop
 80024c0:	3724      	adds	r7, #36	; 0x24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	40023800 	.word	0x40023800
 80024d0:	40013800 	.word	0x40013800
 80024d4:	40020000 	.word	0x40020000
 80024d8:	40020400 	.word	0x40020400
 80024dc:	40020800 	.word	0x40020800
 80024e0:	40020c00 	.word	0x40020c00
 80024e4:	40021000 	.word	0x40021000
 80024e8:	40021400 	.word	0x40021400
 80024ec:	40021800 	.word	0x40021800
 80024f0:	40021c00 	.word	0x40021c00
 80024f4:	40013c00 	.word	0x40013c00

080024f8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b088      	sub	sp, #32
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e128      	b.n	800275c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d109      	bne.n	800252a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a90      	ldr	r2, [pc, #576]	; (8002764 <HAL_I2S_Init+0x26c>)
 8002522:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f7fe ff11 	bl	800134c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2202      	movs	r2, #2
 800252e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	69db      	ldr	r3, [r3, #28]
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	6812      	ldr	r2, [r2, #0]
 800253c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002540:	f023 030f 	bic.w	r3, r3, #15
 8002544:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2202      	movs	r2, #2
 800254c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	2b02      	cmp	r3, #2
 8002554:	d060      	beq.n	8002618 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d102      	bne.n	8002564 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800255e:	2310      	movs	r3, #16
 8002560:	617b      	str	r3, [r7, #20]
 8002562:	e001      	b.n	8002568 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002564:	2320      	movs	r3, #32
 8002566:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	2b20      	cmp	r3, #32
 800256e:	d802      	bhi.n	8002576 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002576:	2001      	movs	r0, #1
 8002578:	f001 fc12 	bl	8003da0 <HAL_RCCEx_GetPeriphCLKFreq>
 800257c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002586:	d125      	bne.n	80025d4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d010      	beq.n	80025b2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	fbb2 f2f3 	udiv	r2, r2, r3
 800259a:	4613      	mov	r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	4413      	add	r3, r2
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	461a      	mov	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	695b      	ldr	r3, [r3, #20]
 80025a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ac:	3305      	adds	r3, #5
 80025ae:	613b      	str	r3, [r7, #16]
 80025b0:	e01f      	b.n	80025f2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80025bc:	4613      	mov	r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	4413      	add	r3, r2
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	461a      	mov	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ce:	3305      	adds	r3, #5
 80025d0:	613b      	str	r3, [r7, #16]
 80025d2:	e00e      	b.n	80025f2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80025d4:	68fa      	ldr	r2, [r7, #12]
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80025dc:	4613      	mov	r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	4413      	add	r3, r2
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	461a      	mov	r2, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ee:	3305      	adds	r3, #5
 80025f0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	4a5c      	ldr	r2, [pc, #368]	; (8002768 <HAL_I2S_Init+0x270>)
 80025f6:	fba2 2303 	umull	r2, r3, r2, r3
 80025fa:	08db      	lsrs	r3, r3, #3
 80025fc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	f003 0301 	and.w	r3, r3, #1
 8002604:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	085b      	lsrs	r3, r3, #1
 800260e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	021b      	lsls	r3, r3, #8
 8002614:	61bb      	str	r3, [r7, #24]
 8002616:	e003      	b.n	8002620 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002618:	2302      	movs	r3, #2
 800261a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800261c:	2300      	movs	r3, #0
 800261e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d902      	bls.n	800262c <HAL_I2S_Init+0x134>
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	2bff      	cmp	r3, #255	; 0xff
 800262a:	d907      	bls.n	800263c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002630:	f043 0210 	orr.w	r2, r3, #16
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e08f      	b.n	800275c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	691a      	ldr	r2, [r3, #16]
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	ea42 0103 	orr.w	r1, r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	69fa      	ldr	r2, [r7, #28]
 800264c:	430a      	orrs	r2, r1
 800264e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800265a:	f023 030f 	bic.w	r3, r3, #15
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	6851      	ldr	r1, [r2, #4]
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	6892      	ldr	r2, [r2, #8]
 8002666:	4311      	orrs	r1, r2
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	68d2      	ldr	r2, [r2, #12]
 800266c:	4311      	orrs	r1, r2
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	6992      	ldr	r2, [r2, #24]
 8002672:	430a      	orrs	r2, r1
 8002674:	431a      	orrs	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800267e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a1b      	ldr	r3, [r3, #32]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d161      	bne.n	800274c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a38      	ldr	r2, [pc, #224]	; (800276c <HAL_I2S_Init+0x274>)
 800268c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a37      	ldr	r2, [pc, #220]	; (8002770 <HAL_I2S_Init+0x278>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d101      	bne.n	800269c <HAL_I2S_Init+0x1a4>
 8002698:	4b36      	ldr	r3, [pc, #216]	; (8002774 <HAL_I2S_Init+0x27c>)
 800269a:	e001      	b.n	80026a0 <HAL_I2S_Init+0x1a8>
 800269c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026a0:	69db      	ldr	r3, [r3, #28]
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	6812      	ldr	r2, [r2, #0]
 80026a6:	4932      	ldr	r1, [pc, #200]	; (8002770 <HAL_I2S_Init+0x278>)
 80026a8:	428a      	cmp	r2, r1
 80026aa:	d101      	bne.n	80026b0 <HAL_I2S_Init+0x1b8>
 80026ac:	4a31      	ldr	r2, [pc, #196]	; (8002774 <HAL_I2S_Init+0x27c>)
 80026ae:	e001      	b.n	80026b4 <HAL_I2S_Init+0x1bc>
 80026b0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80026b4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80026b8:	f023 030f 	bic.w	r3, r3, #15
 80026bc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a2b      	ldr	r2, [pc, #172]	; (8002770 <HAL_I2S_Init+0x278>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d101      	bne.n	80026cc <HAL_I2S_Init+0x1d4>
 80026c8:	4b2a      	ldr	r3, [pc, #168]	; (8002774 <HAL_I2S_Init+0x27c>)
 80026ca:	e001      	b.n	80026d0 <HAL_I2S_Init+0x1d8>
 80026cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026d0:	2202      	movs	r2, #2
 80026d2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a25      	ldr	r2, [pc, #148]	; (8002770 <HAL_I2S_Init+0x278>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d101      	bne.n	80026e2 <HAL_I2S_Init+0x1ea>
 80026de:	4b25      	ldr	r3, [pc, #148]	; (8002774 <HAL_I2S_Init+0x27c>)
 80026e0:	e001      	b.n	80026e6 <HAL_I2S_Init+0x1ee>
 80026e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026e6:	69db      	ldr	r3, [r3, #28]
 80026e8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026f2:	d003      	beq.n	80026fc <HAL_I2S_Init+0x204>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d103      	bne.n	8002704 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80026fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002700:	613b      	str	r3, [r7, #16]
 8002702:	e001      	b.n	8002708 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002704:	2300      	movs	r3, #0
 8002706:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002712:	4313      	orrs	r3, r2
 8002714:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800271c:	4313      	orrs	r3, r2
 800271e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002726:	4313      	orrs	r3, r2
 8002728:	b29a      	uxth	r2, r3
 800272a:	897b      	ldrh	r3, [r7, #10]
 800272c:	4313      	orrs	r3, r2
 800272e:	b29b      	uxth	r3, r3
 8002730:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002734:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a0d      	ldr	r2, [pc, #52]	; (8002770 <HAL_I2S_Init+0x278>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d101      	bne.n	8002744 <HAL_I2S_Init+0x24c>
 8002740:	4b0c      	ldr	r3, [pc, #48]	; (8002774 <HAL_I2S_Init+0x27c>)
 8002742:	e001      	b.n	8002748 <HAL_I2S_Init+0x250>
 8002744:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002748:	897a      	ldrh	r2, [r7, #10]
 800274a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2201      	movs	r2, #1
 8002756:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	3720      	adds	r7, #32
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	0800286f 	.word	0x0800286f
 8002768:	cccccccd 	.word	0xcccccccd
 800276c:	08002c99 	.word	0x08002c99
 8002770:	40003800 	.word	0x40003800
 8002774:	40003400 	.word	0x40003400

08002778 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002780:	bf00      	nop
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c0:	881a      	ldrh	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027cc:	1c9a      	adds	r2, r3, #2
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	3b01      	subs	r3, #1
 80027da:	b29a      	uxth	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d10e      	bne.n	8002808 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	685a      	ldr	r2, [r3, #4]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80027f8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2201      	movs	r2, #1
 80027fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f7ff ffb8 	bl	8002778 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002808:	bf00      	nop
 800280a:	3708      	adds	r7, #8
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68da      	ldr	r2, [r3, #12]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002822:	b292      	uxth	r2, r2
 8002824:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282a:	1c9a      	adds	r2, r3, #2
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002834:	b29b      	uxth	r3, r3
 8002836:	3b01      	subs	r3, #1
 8002838:	b29a      	uxth	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002842:	b29b      	uxth	r3, r3
 8002844:	2b00      	cmp	r3, #0
 8002846:	d10e      	bne.n	8002866 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	685a      	ldr	r2, [r3, #4]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002856:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f7ff ff93 	bl	800278c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002866:	bf00      	nop
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b086      	sub	sp, #24
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b04      	cmp	r3, #4
 8002888:	d13a      	bne.n	8002900 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	2b01      	cmp	r3, #1
 8002892:	d109      	bne.n	80028a8 <I2S_IRQHandler+0x3a>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800289e:	2b40      	cmp	r3, #64	; 0x40
 80028a0:	d102      	bne.n	80028a8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f7ff ffb4 	bl	8002810 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ae:	2b40      	cmp	r3, #64	; 0x40
 80028b0:	d126      	bne.n	8002900 <I2S_IRQHandler+0x92>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f003 0320 	and.w	r3, r3, #32
 80028bc:	2b20      	cmp	r3, #32
 80028be:	d11f      	bne.n	8002900 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	685a      	ldr	r2, [r3, #4]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80028ce:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80028d0:	2300      	movs	r3, #0
 80028d2:	613b      	str	r3, [r7, #16]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	613b      	str	r3, [r7, #16]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	613b      	str	r3, [r7, #16]
 80028e4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2201      	movs	r2, #1
 80028ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f2:	f043 0202 	orr.w	r2, r3, #2
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f7ff ff50 	bl	80027a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002906:	b2db      	uxtb	r3, r3
 8002908:	2b03      	cmp	r3, #3
 800290a:	d136      	bne.n	800297a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b02      	cmp	r3, #2
 8002914:	d109      	bne.n	800292a <I2S_IRQHandler+0xbc>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002920:	2b80      	cmp	r3, #128	; 0x80
 8002922:	d102      	bne.n	800292a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f7ff ff45 	bl	80027b4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	f003 0308 	and.w	r3, r3, #8
 8002930:	2b08      	cmp	r3, #8
 8002932:	d122      	bne.n	800297a <I2S_IRQHandler+0x10c>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f003 0320 	and.w	r3, r3, #32
 800293e:	2b20      	cmp	r3, #32
 8002940:	d11b      	bne.n	800297a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	685a      	ldr	r2, [r3, #4]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002950:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002952:	2300      	movs	r3, #0
 8002954:	60fb      	str	r3, [r7, #12]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	60fb      	str	r3, [r7, #12]
 800295e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296c:	f043 0204 	orr.w	r2, r3, #4
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f7ff ff13 	bl	80027a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800297a:	bf00      	nop
 800297c:	3718      	adds	r7, #24
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
	...

08002984 <HAL_I2SEx_TransmitReceive_DMA>:
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s,
                                                uint16_t *pTxData,
                                                uint16_t *pRxData,
                                                uint16_t Size)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b088      	sub	sp, #32
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
 8002990:	807b      	strh	r3, [r7, #2]
  uint32_t *tmp = NULL;
 8002992:	2300      	movs	r3, #0
 8002994:	61bb      	str	r3, [r7, #24]
  uint32_t tmp1 = 0U;
 8002996:	2300      	movs	r3, #0
 8002998:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800299a:	2300      	movs	r3, #0
 800299c:	77fb      	strb	r3, [r7, #31]

  if (hi2s->State != HAL_I2S_STATE_READY)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d002      	beq.n	80029b0 <HAL_I2SEx_TransmitReceive_DMA+0x2c>
  {
    errorcode = HAL_BUSY;
 80029aa:	2302      	movs	r3, #2
 80029ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 80029ae:	e160      	b.n	8002c72 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d005      	beq.n	80029c2 <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d002      	beq.n	80029c2 <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 80029bc:	887b      	ldrh	r3, [r7, #2]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_I2SEx_TransmitReceive_DMA+0x42>
  {
    return  HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e15a      	b.n	8002c7c <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d101      	bne.n	80029d6 <HAL_I2SEx_TransmitReceive_DMA+0x52>
 80029d2:	2302      	movs	r3, #2
 80029d4:	e152      	b.n	8002c7c <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  hi2s->pTxBuffPtr = pTxData;
 80029de:	68ba      	ldr	r2, [r7, #8]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->pRxBuffPtr = pRxData;
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	62da      	str	r2, [r3, #44]	; 0x2c

  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	69db      	ldr	r3, [r3, #28]
 80029f0:	f003 0307 	and.w	r3, r3, #7
 80029f4:	617b      	str	r3, [r7, #20]
  /* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	2b03      	cmp	r3, #3
 80029fa:	d002      	beq.n	8002a02 <HAL_I2SEx_TransmitReceive_DMA+0x7e>
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	2b05      	cmp	r3, #5
 8002a00:	d114      	bne.n	8002a2c <HAL_I2SEx_TransmitReceive_DMA+0xa8>
  {
    hi2s->TxXferSize  = (Size << 1U);
 8002a02:	887b      	ldrh	r3, [r7, #2]
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8002a0c:	887b      	ldrh	r3, [r7, #2]
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = (Size << 1U);
 8002a16:	887b      	ldrh	r3, [r7, #2]
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8002a20:	887b      	ldrh	r3, [r7, #2]
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	b29a      	uxth	r2, r3
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	865a      	strh	r2, [r3, #50]	; 0x32
 8002a2a:	e00b      	b.n	8002a44 <HAL_I2SEx_TransmitReceive_DMA+0xc0>
  }
  else
  {
    hi2s->TxXferSize  = Size;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	887a      	ldrh	r2, [r7, #2]
 8002a30:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	887a      	ldrh	r2, [r7, #2]
 8002a36:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = Size;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	887a      	ldrh	r2, [r7, #2]
 8002a3c:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	887a      	ldrh	r2, [r7, #2]
 8002a42:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2200      	movs	r2, #0
 8002a48:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2205      	movs	r2, #5
 8002a4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a56:	4a8b      	ldr	r2, [pc, #556]	; (8002c84 <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 8002a58:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a5e:	4a8a      	ldr	r2, [pc, #552]	; (8002c88 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 8002a60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a66:	4a89      	ldr	r2, [pc, #548]	; (8002c8c <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8002a68:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the I2S Tx DMA Half transfer complete callback as NULL */
  hi2s->hdmatx->XferHalfCpltCallback  = NULL;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a6e:	2200      	movs	r2, #0
 8002a70:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback as NULL */
  hi2s->hdmatx->XferCpltCallback  = NULL;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a76:	2200      	movs	r2, #0
 8002a78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Tx DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a7e:	4a83      	ldr	r2, [pc, #524]	; (8002c8c <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8002a80:	64da      	str	r2, [r3, #76]	; 0x4c

  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	69db      	ldr	r3, [r3, #28]
 8002a88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a8c:	617b      	str	r3, [r7, #20]
  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a94:	d002      	beq.n	8002a9c <HAL_I2SEx_TransmitReceive_DMA+0x118>
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d16b      	bne.n	8002b74 <HAL_I2SEx_TransmitReceive_DMA+0x1f0>
  {
    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8002a9c:	1d3b      	adds	r3, r7, #4
 8002a9e:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a79      	ldr	r2, [pc, #484]	; (8002c90 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d101      	bne.n	8002ab2 <HAL_I2SEx_TransmitReceive_DMA+0x12e>
 8002aae:	4b79      	ldr	r3, [pc, #484]	; (8002c94 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002ab0:	e001      	b.n	8002ab6 <HAL_I2SEx_TransmitReceive_DMA+0x132>
 8002ab2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ab6:	330c      	adds	r3, #12
 8002ab8:	4619      	mov	r1, r3
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	f7ff f8ba 	bl	8001c3c <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a70      	ldr	r2, [pc, #448]	; (8002c90 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d101      	bne.n	8002ad6 <HAL_I2SEx_TransmitReceive_DMA+0x152>
 8002ad2:	4b70      	ldr	r3, [pc, #448]	; (8002c94 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002ad4:	e001      	b.n	8002ada <HAL_I2SEx_TransmitReceive_DMA+0x156>
 8002ad6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	496b      	ldr	r1, [pc, #428]	; (8002c90 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002ae2:	428b      	cmp	r3, r1
 8002ae4:	d101      	bne.n	8002aea <HAL_I2SEx_TransmitReceive_DMA+0x166>
 8002ae6:	4b6b      	ldr	r3, [pc, #428]	; (8002c94 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002ae8:	e001      	b.n	8002aee <HAL_I2SEx_TransmitReceive_DMA+0x16a>
 8002aea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002aee:	f042 0201 	orr.w	r2, r2, #1
 8002af2:	605a      	str	r2, [r3, #4]

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8002af4:	f107 0308 	add.w	r3, r7, #8
 8002af8:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	6819      	ldr	r1, [r3, #0]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	330c      	adds	r3, #12
 8002b08:	461a      	mov	r2, r3
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	f7ff f894 	bl	8001c3c <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	685a      	ldr	r2, [r3, #4]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f042 0202 	orr.w	r2, r2, #2
 8002b22:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	69db      	ldr	r3, [r3, #28]
 8002b2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b32:	f000 809e 	beq.w	8002c72 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    {
      /* Enable I2Sext(receiver) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a55      	ldr	r2, [pc, #340]	; (8002c90 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d101      	bne.n	8002b44 <HAL_I2SEx_TransmitReceive_DMA+0x1c0>
 8002b40:	4b54      	ldr	r3, [pc, #336]	; (8002c94 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002b42:	e001      	b.n	8002b48 <HAL_I2SEx_TransmitReceive_DMA+0x1c4>
 8002b44:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b48:	69da      	ldr	r2, [r3, #28]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4950      	ldr	r1, [pc, #320]	; (8002c90 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002b50:	428b      	cmp	r3, r1
 8002b52:	d101      	bne.n	8002b58 <HAL_I2SEx_TransmitReceive_DMA+0x1d4>
 8002b54:	4b4f      	ldr	r3, [pc, #316]	; (8002c94 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002b56:	e001      	b.n	8002b5c <HAL_I2SEx_TransmitReceive_DMA+0x1d8>
 8002b58:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b60:	61da      	str	r2, [r3, #28]

      /* Enable I2S peripheral after the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	69da      	ldr	r2, [r3, #28]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b70:	61da      	str	r2, [r3, #28]
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002b72:	e07e      	b.n	8002c72 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }
  else
  {
    /* Check if Master Receiver mode is selected */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	69db      	ldr	r3, [r3, #28]
 8002b7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b82:	d10a      	bne.n	8002b9a <HAL_I2SEx_TransmitReceive_DMA+0x216>
    {
      /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002b84:	2300      	movs	r3, #0
 8002b86:	613b      	str	r3, [r7, #16]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	613b      	str	r3, [r7, #16]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	613b      	str	r3, [r7, #16]
 8002b98:	693b      	ldr	r3, [r7, #16]
    }
    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8002b9a:	f107 0308 	add.w	r3, r7, #8
 8002b9e:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	6819      	ldr	r1, [r3, #0]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a38      	ldr	r2, [pc, #224]	; (8002c90 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d101      	bne.n	8002bb6 <HAL_I2SEx_TransmitReceive_DMA+0x232>
 8002bb2:	4b38      	ldr	r3, [pc, #224]	; (8002c94 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002bb4:	e001      	b.n	8002bba <HAL_I2SEx_TransmitReceive_DMA+0x236>
 8002bb6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bba:	330c      	adds	r3, #12
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	f7ff f83a 	bl	8001c3c <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a30      	ldr	r2, [pc, #192]	; (8002c90 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d101      	bne.n	8002bd6 <HAL_I2SEx_TransmitReceive_DMA+0x252>
 8002bd2:	4b30      	ldr	r3, [pc, #192]	; (8002c94 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002bd4:	e001      	b.n	8002bda <HAL_I2SEx_TransmitReceive_DMA+0x256>
 8002bd6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bda:	685a      	ldr	r2, [r3, #4]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	492b      	ldr	r1, [pc, #172]	; (8002c90 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002be2:	428b      	cmp	r3, r1
 8002be4:	d101      	bne.n	8002bea <HAL_I2SEx_TransmitReceive_DMA+0x266>
 8002be6:	4b2b      	ldr	r3, [pc, #172]	; (8002c94 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002be8:	e001      	b.n	8002bee <HAL_I2SEx_TransmitReceive_DMA+0x26a>
 8002bea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bee:	f042 0202 	orr.w	r2, r2, #2
 8002bf2:	605a      	str	r2, [r3, #4]

    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8002bf4:	1d3b      	adds	r3, r7, #4
 8002bf6:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	330c      	adds	r3, #12
 8002c02:	4619      	mov	r1, r3
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	f7ff f815 	bl	8001c3c <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	685a      	ldr	r2, [r3, #4]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f042 0201 	orr.w	r2, r2, #1
 8002c20:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	69db      	ldr	r3, [r3, #28]
 8002c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c30:	d01e      	beq.n	8002c70 <HAL_I2SEx_TransmitReceive_DMA+0x2ec>
    {
      /* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a16      	ldr	r2, [pc, #88]	; (8002c90 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d101      	bne.n	8002c40 <HAL_I2SEx_TransmitReceive_DMA+0x2bc>
 8002c3c:	4b15      	ldr	r3, [pc, #84]	; (8002c94 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002c3e:	e001      	b.n	8002c44 <HAL_I2SEx_TransmitReceive_DMA+0x2c0>
 8002c40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c44:	69da      	ldr	r2, [r3, #28]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4911      	ldr	r1, [pc, #68]	; (8002c90 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002c4c:	428b      	cmp	r3, r1
 8002c4e:	d101      	bne.n	8002c54 <HAL_I2SEx_TransmitReceive_DMA+0x2d0>
 8002c50:	4b10      	ldr	r3, [pc, #64]	; (8002c94 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002c52:	e001      	b.n	8002c58 <HAL_I2SEx_TransmitReceive_DMA+0x2d4>
 8002c54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c5c:	61da      	str	r2, [r3, #28]
      /* Enable I2S peripheral before the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	69da      	ldr	r2, [r3, #28]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c6c:	61da      	str	r2, [r3, #28]
 8002c6e:	e000      	b.n	8002c72 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }

error :
 8002c70:	bf00      	nop
  __HAL_UNLOCK(hi2s);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return errorcode;
 8002c7a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3720      	adds	r7, #32
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	08002f41 	.word	0x08002f41
 8002c88:	08002f5d 	.word	0x08002f5d
 8002c8c:	08003035 	.word	0x08003035
 8002c90:	40003800 	.word	0x40003800
 8002c94:	40003400 	.word	0x40003400

08002c98 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b088      	sub	sp, #32
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a92      	ldr	r2, [pc, #584]	; (8002ef8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d101      	bne.n	8002cb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002cb2:	4b92      	ldr	r3, [pc, #584]	; (8002efc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002cb4:	e001      	b.n	8002cba <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002cb6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a8b      	ldr	r2, [pc, #556]	; (8002ef8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d101      	bne.n	8002cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002cd0:	4b8a      	ldr	r3, [pc, #552]	; (8002efc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002cd2:	e001      	b.n	8002cd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002cd4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ce4:	d004      	beq.n	8002cf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f040 8099 	bne.w	8002e22 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d107      	bne.n	8002d0a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d002      	beq.n	8002d0a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f000 f9d5 	bl	80030b4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	f003 0301 	and.w	r3, r3, #1
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d107      	bne.n	8002d24 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d002      	beq.n	8002d24 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 fa78 	bl	8003214 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d2a:	2b40      	cmp	r3, #64	; 0x40
 8002d2c:	d13a      	bne.n	8002da4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	f003 0320 	and.w	r3, r3, #32
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d035      	beq.n	8002da4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a6e      	ldr	r2, [pc, #440]	; (8002ef8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d101      	bne.n	8002d46 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002d42:	4b6e      	ldr	r3, [pc, #440]	; (8002efc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002d44:	e001      	b.n	8002d4a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002d46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d4a:	685a      	ldr	r2, [r3, #4]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4969      	ldr	r1, [pc, #420]	; (8002ef8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002d52:	428b      	cmp	r3, r1
 8002d54:	d101      	bne.n	8002d5a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002d56:	4b69      	ldr	r3, [pc, #420]	; (8002efc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002d58:	e001      	b.n	8002d5e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002d5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d5e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d62:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	685a      	ldr	r2, [r3, #4]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d72:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002d74:	2300      	movs	r3, #0
 8002d76:	60fb      	str	r3, [r7, #12]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	60fb      	str	r3, [r7, #12]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	60fb      	str	r3, [r7, #12]
 8002d88:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d96:	f043 0202 	orr.w	r2, r3, #2
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f7ff fcfe 	bl	80027a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	f003 0308 	and.w	r3, r3, #8
 8002daa:	2b08      	cmp	r3, #8
 8002dac:	f040 80c3 	bne.w	8002f36 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	f003 0320 	and.w	r3, r3, #32
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	f000 80bd 	beq.w	8002f36 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	685a      	ldr	r2, [r3, #4]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002dca:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a49      	ldr	r2, [pc, #292]	; (8002ef8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d101      	bne.n	8002dda <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002dd6:	4b49      	ldr	r3, [pc, #292]	; (8002efc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002dd8:	e001      	b.n	8002dde <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002dda:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002dde:	685a      	ldr	r2, [r3, #4]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4944      	ldr	r1, [pc, #272]	; (8002ef8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002de6:	428b      	cmp	r3, r1
 8002de8:	d101      	bne.n	8002dee <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002dea:	4b44      	ldr	r3, [pc, #272]	; (8002efc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002dec:	e001      	b.n	8002df2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002dee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002df2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002df6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002df8:	2300      	movs	r3, #0
 8002dfa:	60bb      	str	r3, [r7, #8]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	60bb      	str	r3, [r7, #8]
 8002e04:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e12:	f043 0204 	orr.w	r2, r3, #4
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f7ff fcc0 	bl	80027a0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002e20:	e089      	b.n	8002f36 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d107      	bne.n	8002e3c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d002      	beq.n	8002e3c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 f96e 	bl	8003118 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d107      	bne.n	8002e56 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d002      	beq.n	8002e56 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 f9ad 	bl	80031b0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e5c:	2b40      	cmp	r3, #64	; 0x40
 8002e5e:	d12f      	bne.n	8002ec0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	f003 0320 	and.w	r3, r3, #32
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d02a      	beq.n	8002ec0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	685a      	ldr	r2, [r3, #4]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e78:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a1e      	ldr	r2, [pc, #120]	; (8002ef8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d101      	bne.n	8002e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002e84:	4b1d      	ldr	r3, [pc, #116]	; (8002efc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002e86:	e001      	b.n	8002e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002e88:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e8c:	685a      	ldr	r2, [r3, #4]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4919      	ldr	r1, [pc, #100]	; (8002ef8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002e94:	428b      	cmp	r3, r1
 8002e96:	d101      	bne.n	8002e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002e98:	4b18      	ldr	r3, [pc, #96]	; (8002efc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002e9a:	e001      	b.n	8002ea0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002e9c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ea0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ea4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb2:	f043 0202 	orr.w	r2, r3, #2
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f7ff fc70 	bl	80027a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	f003 0308 	and.w	r3, r3, #8
 8002ec6:	2b08      	cmp	r3, #8
 8002ec8:	d136      	bne.n	8002f38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	f003 0320 	and.w	r3, r3, #32
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d031      	beq.n	8002f38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a07      	ldr	r2, [pc, #28]	; (8002ef8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d101      	bne.n	8002ee2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002ede:	4b07      	ldr	r3, [pc, #28]	; (8002efc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002ee0:	e001      	b.n	8002ee6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002ee2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ee6:	685a      	ldr	r2, [r3, #4]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4902      	ldr	r1, [pc, #8]	; (8002ef8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002eee:	428b      	cmp	r3, r1
 8002ef0:	d106      	bne.n	8002f00 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8002ef2:	4b02      	ldr	r3, [pc, #8]	; (8002efc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002ef4:	e006      	b.n	8002f04 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8002ef6:	bf00      	nop
 8002ef8:	40003800 	.word	0x40003800
 8002efc:	40003400 	.word	0x40003400
 8002f00:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f04:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002f08:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	685a      	ldr	r2, [r3, #4]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002f18:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f26:	f043 0204 	orr.w	r2, r3, #4
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f7ff fc36 	bl	80027a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002f34:	e000      	b.n	8002f38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002f36:	bf00      	nop
}
 8002f38:	bf00      	nop
 8002f3a:	3720      	adds	r7, #32
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <I2SEx_TxRxDMAHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f4c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f7fe f80c 	bl	8000f6c <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002f54:	bf00      	nop
 8002f56:	3710      	adds	r7, #16
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <I2SEx_TxRxDMACplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f68:	60fb      	str	r3, [r7, #12]

  /* If DMA is configured in DMA_NORMAL mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	69db      	ldr	r3, [r3, #28]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d155      	bne.n	800301e <I2SEx_TxRxDMACplt+0xc2>
  {
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	69db      	ldr	r3, [r3, #28]
 8002f78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f80:	d006      	beq.n	8002f90 <I2SEx_TxRxDMACplt+0x34>
        ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	69db      	ldr	r3, [r3, #28]
 8002f88:	f403 7340 	and.w	r3, r3, #768	; 0x300
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d11e      	bne.n	8002fce <I2SEx_TxRxDMACplt+0x72>
    /* Disable Tx & Rx DMA Requests */
    {
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a25      	ldr	r2, [pc, #148]	; (800302c <I2SEx_TxRxDMACplt+0xd0>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d101      	bne.n	8002f9e <I2SEx_TxRxDMACplt+0x42>
 8002f9a:	4b25      	ldr	r3, [pc, #148]	; (8003030 <I2SEx_TxRxDMACplt+0xd4>)
 8002f9c:	e001      	b.n	8002fa2 <I2SEx_TxRxDMACplt+0x46>
 8002f9e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fa2:	685a      	ldr	r2, [r3, #4]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4920      	ldr	r1, [pc, #128]	; (800302c <I2SEx_TxRxDMACplt+0xd0>)
 8002faa:	428b      	cmp	r3, r1
 8002fac:	d101      	bne.n	8002fb2 <I2SEx_TxRxDMACplt+0x56>
 8002fae:	4b20      	ldr	r3, [pc, #128]	; (8003030 <I2SEx_TxRxDMACplt+0xd4>)
 8002fb0:	e001      	b.n	8002fb6 <I2SEx_TxRxDMACplt+0x5a>
 8002fb2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fb6:	f022 0201 	bic.w	r2, r2, #1
 8002fba:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	685a      	ldr	r2, [r3, #4]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f022 0202 	bic.w	r2, r2, #2
 8002fca:	605a      	str	r2, [r3, #4]
 8002fcc:	e01d      	b.n	800300a <I2SEx_TxRxDMACplt+0xae>
    }
    else
    {
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	685a      	ldr	r2, [r3, #4]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f022 0201 	bic.w	r2, r2, #1
 8002fdc:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a12      	ldr	r2, [pc, #72]	; (800302c <I2SEx_TxRxDMACplt+0xd0>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d101      	bne.n	8002fec <I2SEx_TxRxDMACplt+0x90>
 8002fe8:	4b11      	ldr	r3, [pc, #68]	; (8003030 <I2SEx_TxRxDMACplt+0xd4>)
 8002fea:	e001      	b.n	8002ff0 <I2SEx_TxRxDMACplt+0x94>
 8002fec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ff0:	685a      	ldr	r2, [r3, #4]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	490d      	ldr	r1, [pc, #52]	; (800302c <I2SEx_TxRxDMACplt+0xd0>)
 8002ff8:	428b      	cmp	r3, r1
 8002ffa:	d101      	bne.n	8003000 <I2SEx_TxRxDMACplt+0xa4>
 8002ffc:	4b0c      	ldr	r3, [pc, #48]	; (8003030 <I2SEx_TxRxDMACplt+0xd4>)
 8002ffe:	e001      	b.n	8003004 <I2SEx_TxRxDMACplt+0xa8>
 8003000:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003004:	f022 0202 	bic.w	r2, r2, #2
 8003008:	605a      	str	r2, [r3, #4]
    }

    hi2s->RxXferCount = 0U;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->TxXferCount = 0U;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2s->State = HAL_I2S_STATE_READY;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxCpltCallback(hi2s);
 800301e:	68f8      	ldr	r0, [r7, #12]
 8003020:	f7fd ffb3 	bl	8000f8a <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003024:	bf00      	nop
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	40003800 	.word	0x40003800
 8003030:	40003400 	.word	0x40003400

08003034 <I2SEx_TxRxDMAError>:
  * @brief  DMA I2S communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003040:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	685a      	ldr	r2, [r3, #4]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 0203 	bic.w	r2, r2, #3
 8003050:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a15      	ldr	r2, [pc, #84]	; (80030ac <I2SEx_TxRxDMAError+0x78>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d101      	bne.n	8003060 <I2SEx_TxRxDMAError+0x2c>
 800305c:	4b14      	ldr	r3, [pc, #80]	; (80030b0 <I2SEx_TxRxDMAError+0x7c>)
 800305e:	e001      	b.n	8003064 <I2SEx_TxRxDMAError+0x30>
 8003060:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003064:	685a      	ldr	r2, [r3, #4]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4910      	ldr	r1, [pc, #64]	; (80030ac <I2SEx_TxRxDMAError+0x78>)
 800306c:	428b      	cmp	r3, r1
 800306e:	d101      	bne.n	8003074 <I2SEx_TxRxDMAError+0x40>
 8003070:	4b0f      	ldr	r3, [pc, #60]	; (80030b0 <I2SEx_TxRxDMAError+0x7c>)
 8003072:	e001      	b.n	8003078 <I2SEx_TxRxDMAError+0x44>
 8003074:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003078:	f022 0203 	bic.w	r2, r2, #3
 800307c:	605a      	str	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2201      	movs	r2, #1
 800308e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003096:	f043 0208 	orr.w	r2, r3, #8
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800309e:	68f8      	ldr	r0, [r7, #12]
 80030a0:	f7ff fb7e 	bl	80027a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80030a4:	bf00      	nop
 80030a6:	3710      	adds	r7, #16
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	40003800 	.word	0x40003800
 80030b0:	40003400 	.word	0x40003400

080030b4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c0:	1c99      	adds	r1, r3, #2
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	6251      	str	r1, [r2, #36]	; 0x24
 80030c6:	881a      	ldrh	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	3b01      	subs	r3, #1
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d113      	bne.n	800310e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	685a      	ldr	r2, [r3, #4]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80030f4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d106      	bne.n	800310e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f7fd ff3e 	bl	8000f8a <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800310e:	bf00      	nop
 8003110:	3708      	adds	r7, #8
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
	...

08003118 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003124:	1c99      	adds	r1, r3, #2
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	6251      	str	r1, [r2, #36]	; 0x24
 800312a:	8819      	ldrh	r1, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a1d      	ldr	r2, [pc, #116]	; (80031a8 <I2SEx_TxISR_I2SExt+0x90>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d101      	bne.n	800313a <I2SEx_TxISR_I2SExt+0x22>
 8003136:	4b1d      	ldr	r3, [pc, #116]	; (80031ac <I2SEx_TxISR_I2SExt+0x94>)
 8003138:	e001      	b.n	800313e <I2SEx_TxISR_I2SExt+0x26>
 800313a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800313e:	460a      	mov	r2, r1
 8003140:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003146:	b29b      	uxth	r3, r3
 8003148:	3b01      	subs	r3, #1
 800314a:	b29a      	uxth	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003154:	b29b      	uxth	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d121      	bne.n	800319e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a12      	ldr	r2, [pc, #72]	; (80031a8 <I2SEx_TxISR_I2SExt+0x90>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d101      	bne.n	8003168 <I2SEx_TxISR_I2SExt+0x50>
 8003164:	4b11      	ldr	r3, [pc, #68]	; (80031ac <I2SEx_TxISR_I2SExt+0x94>)
 8003166:	e001      	b.n	800316c <I2SEx_TxISR_I2SExt+0x54>
 8003168:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800316c:	685a      	ldr	r2, [r3, #4]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	490d      	ldr	r1, [pc, #52]	; (80031a8 <I2SEx_TxISR_I2SExt+0x90>)
 8003174:	428b      	cmp	r3, r1
 8003176:	d101      	bne.n	800317c <I2SEx_TxISR_I2SExt+0x64>
 8003178:	4b0c      	ldr	r3, [pc, #48]	; (80031ac <I2SEx_TxISR_I2SExt+0x94>)
 800317a:	e001      	b.n	8003180 <I2SEx_TxISR_I2SExt+0x68>
 800317c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003180:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003184:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800318a:	b29b      	uxth	r3, r3
 800318c:	2b00      	cmp	r3, #0
 800318e:	d106      	bne.n	800319e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f7fd fef6 	bl	8000f8a <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800319e:	bf00      	nop
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	40003800 	.word	0x40003800
 80031ac:	40003400 	.word	0x40003400

080031b0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68d8      	ldr	r0, [r3, #12]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c2:	1c99      	adds	r1, r3, #2
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80031c8:	b282      	uxth	r2, r0
 80031ca:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	3b01      	subs	r3, #1
 80031d4:	b29a      	uxth	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80031de:	b29b      	uxth	r3, r3
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d113      	bne.n	800320c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	685a      	ldr	r2, [r3, #4]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80031f2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d106      	bne.n	800320c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2201      	movs	r2, #1
 8003202:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f7fd febf 	bl	8000f8a <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800320c:	bf00      	nop
 800320e:	3708      	adds	r7, #8
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a20      	ldr	r2, [pc, #128]	; (80032a4 <I2SEx_RxISR_I2SExt+0x90>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d101      	bne.n	800322a <I2SEx_RxISR_I2SExt+0x16>
 8003226:	4b20      	ldr	r3, [pc, #128]	; (80032a8 <I2SEx_RxISR_I2SExt+0x94>)
 8003228:	e001      	b.n	800322e <I2SEx_RxISR_I2SExt+0x1a>
 800322a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800322e:	68d8      	ldr	r0, [r3, #12]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003234:	1c99      	adds	r1, r3, #2
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	62d1      	str	r1, [r2, #44]	; 0x2c
 800323a:	b282      	uxth	r2, r0
 800323c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003242:	b29b      	uxth	r3, r3
 8003244:	3b01      	subs	r3, #1
 8003246:	b29a      	uxth	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003250:	b29b      	uxth	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d121      	bne.n	800329a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a12      	ldr	r2, [pc, #72]	; (80032a4 <I2SEx_RxISR_I2SExt+0x90>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d101      	bne.n	8003264 <I2SEx_RxISR_I2SExt+0x50>
 8003260:	4b11      	ldr	r3, [pc, #68]	; (80032a8 <I2SEx_RxISR_I2SExt+0x94>)
 8003262:	e001      	b.n	8003268 <I2SEx_RxISR_I2SExt+0x54>
 8003264:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003268:	685a      	ldr	r2, [r3, #4]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	490d      	ldr	r1, [pc, #52]	; (80032a4 <I2SEx_RxISR_I2SExt+0x90>)
 8003270:	428b      	cmp	r3, r1
 8003272:	d101      	bne.n	8003278 <I2SEx_RxISR_I2SExt+0x64>
 8003274:	4b0c      	ldr	r3, [pc, #48]	; (80032a8 <I2SEx_RxISR_I2SExt+0x94>)
 8003276:	e001      	b.n	800327c <I2SEx_RxISR_I2SExt+0x68>
 8003278:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800327c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003280:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003286:	b29b      	uxth	r3, r3
 8003288:	2b00      	cmp	r3, #0
 800328a:	d106      	bne.n	800329a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f7fd fe78 	bl	8000f8a <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800329a:	bf00      	nop
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	40003800 	.word	0x40003800
 80032a8:	40003400 	.word	0x40003400

080032ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e267      	b.n	800378e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d075      	beq.n	80033b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032ca:	4b88      	ldr	r3, [pc, #544]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f003 030c 	and.w	r3, r3, #12
 80032d2:	2b04      	cmp	r3, #4
 80032d4:	d00c      	beq.n	80032f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032d6:	4b85      	ldr	r3, [pc, #532]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032de:	2b08      	cmp	r3, #8
 80032e0:	d112      	bne.n	8003308 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032e2:	4b82      	ldr	r3, [pc, #520]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032ee:	d10b      	bne.n	8003308 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032f0:	4b7e      	ldr	r3, [pc, #504]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d05b      	beq.n	80033b4 <HAL_RCC_OscConfig+0x108>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d157      	bne.n	80033b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e242      	b.n	800378e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003310:	d106      	bne.n	8003320 <HAL_RCC_OscConfig+0x74>
 8003312:	4b76      	ldr	r3, [pc, #472]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a75      	ldr	r2, [pc, #468]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 8003318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800331c:	6013      	str	r3, [r2, #0]
 800331e:	e01d      	b.n	800335c <HAL_RCC_OscConfig+0xb0>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003328:	d10c      	bne.n	8003344 <HAL_RCC_OscConfig+0x98>
 800332a:	4b70      	ldr	r3, [pc, #448]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a6f      	ldr	r2, [pc, #444]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 8003330:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003334:	6013      	str	r3, [r2, #0]
 8003336:	4b6d      	ldr	r3, [pc, #436]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a6c      	ldr	r2, [pc, #432]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 800333c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003340:	6013      	str	r3, [r2, #0]
 8003342:	e00b      	b.n	800335c <HAL_RCC_OscConfig+0xb0>
 8003344:	4b69      	ldr	r3, [pc, #420]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a68      	ldr	r2, [pc, #416]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 800334a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800334e:	6013      	str	r3, [r2, #0]
 8003350:	4b66      	ldr	r3, [pc, #408]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a65      	ldr	r2, [pc, #404]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 8003356:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800335a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d013      	beq.n	800338c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003364:	f7fe fa9e 	bl	80018a4 <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800336c:	f7fe fa9a 	bl	80018a4 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b64      	cmp	r3, #100	; 0x64
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e207      	b.n	800378e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800337e:	4b5b      	ldr	r3, [pc, #364]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d0f0      	beq.n	800336c <HAL_RCC_OscConfig+0xc0>
 800338a:	e014      	b.n	80033b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800338c:	f7fe fa8a 	bl	80018a4 <HAL_GetTick>
 8003390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003392:	e008      	b.n	80033a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003394:	f7fe fa86 	bl	80018a4 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b64      	cmp	r3, #100	; 0x64
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e1f3      	b.n	800378e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033a6:	4b51      	ldr	r3, [pc, #324]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1f0      	bne.n	8003394 <HAL_RCC_OscConfig+0xe8>
 80033b2:	e000      	b.n	80033b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d063      	beq.n	800348a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033c2:	4b4a      	ldr	r3, [pc, #296]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f003 030c 	and.w	r3, r3, #12
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00b      	beq.n	80033e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033ce:	4b47      	ldr	r3, [pc, #284]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033d6:	2b08      	cmp	r3, #8
 80033d8:	d11c      	bne.n	8003414 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033da:	4b44      	ldr	r3, [pc, #272]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d116      	bne.n	8003414 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033e6:	4b41      	ldr	r3, [pc, #260]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d005      	beq.n	80033fe <HAL_RCC_OscConfig+0x152>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d001      	beq.n	80033fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e1c7      	b.n	800378e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033fe:	4b3b      	ldr	r3, [pc, #236]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	4937      	ldr	r1, [pc, #220]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 800340e:	4313      	orrs	r3, r2
 8003410:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003412:	e03a      	b.n	800348a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d020      	beq.n	800345e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800341c:	4b34      	ldr	r3, [pc, #208]	; (80034f0 <HAL_RCC_OscConfig+0x244>)
 800341e:	2201      	movs	r2, #1
 8003420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003422:	f7fe fa3f 	bl	80018a4 <HAL_GetTick>
 8003426:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003428:	e008      	b.n	800343c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800342a:	f7fe fa3b 	bl	80018a4 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	2b02      	cmp	r3, #2
 8003436:	d901      	bls.n	800343c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e1a8      	b.n	800378e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800343c:	4b2b      	ldr	r3, [pc, #172]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0302 	and.w	r3, r3, #2
 8003444:	2b00      	cmp	r3, #0
 8003446:	d0f0      	beq.n	800342a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003448:	4b28      	ldr	r3, [pc, #160]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	00db      	lsls	r3, r3, #3
 8003456:	4925      	ldr	r1, [pc, #148]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 8003458:	4313      	orrs	r3, r2
 800345a:	600b      	str	r3, [r1, #0]
 800345c:	e015      	b.n	800348a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800345e:	4b24      	ldr	r3, [pc, #144]	; (80034f0 <HAL_RCC_OscConfig+0x244>)
 8003460:	2200      	movs	r2, #0
 8003462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003464:	f7fe fa1e 	bl	80018a4 <HAL_GetTick>
 8003468:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800346a:	e008      	b.n	800347e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800346c:	f7fe fa1a 	bl	80018a4 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b02      	cmp	r3, #2
 8003478:	d901      	bls.n	800347e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e187      	b.n	800378e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800347e:	4b1b      	ldr	r3, [pc, #108]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1f0      	bne.n	800346c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0308 	and.w	r3, r3, #8
 8003492:	2b00      	cmp	r3, #0
 8003494:	d036      	beq.n	8003504 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d016      	beq.n	80034cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800349e:	4b15      	ldr	r3, [pc, #84]	; (80034f4 <HAL_RCC_OscConfig+0x248>)
 80034a0:	2201      	movs	r2, #1
 80034a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a4:	f7fe f9fe 	bl	80018a4 <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034ac:	f7fe f9fa 	bl	80018a4 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e167      	b.n	800378e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034be:	4b0b      	ldr	r3, [pc, #44]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 80034c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d0f0      	beq.n	80034ac <HAL_RCC_OscConfig+0x200>
 80034ca:	e01b      	b.n	8003504 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034cc:	4b09      	ldr	r3, [pc, #36]	; (80034f4 <HAL_RCC_OscConfig+0x248>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034d2:	f7fe f9e7 	bl	80018a4 <HAL_GetTick>
 80034d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034d8:	e00e      	b.n	80034f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034da:	f7fe f9e3 	bl	80018a4 <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d907      	bls.n	80034f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e150      	b.n	800378e <HAL_RCC_OscConfig+0x4e2>
 80034ec:	40023800 	.word	0x40023800
 80034f0:	42470000 	.word	0x42470000
 80034f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034f8:	4b88      	ldr	r3, [pc, #544]	; (800371c <HAL_RCC_OscConfig+0x470>)
 80034fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034fc:	f003 0302 	and.w	r3, r3, #2
 8003500:	2b00      	cmp	r3, #0
 8003502:	d1ea      	bne.n	80034da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0304 	and.w	r3, r3, #4
 800350c:	2b00      	cmp	r3, #0
 800350e:	f000 8097 	beq.w	8003640 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003512:	2300      	movs	r3, #0
 8003514:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003516:	4b81      	ldr	r3, [pc, #516]	; (800371c <HAL_RCC_OscConfig+0x470>)
 8003518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d10f      	bne.n	8003542 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003522:	2300      	movs	r3, #0
 8003524:	60bb      	str	r3, [r7, #8]
 8003526:	4b7d      	ldr	r3, [pc, #500]	; (800371c <HAL_RCC_OscConfig+0x470>)
 8003528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352a:	4a7c      	ldr	r2, [pc, #496]	; (800371c <HAL_RCC_OscConfig+0x470>)
 800352c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003530:	6413      	str	r3, [r2, #64]	; 0x40
 8003532:	4b7a      	ldr	r3, [pc, #488]	; (800371c <HAL_RCC_OscConfig+0x470>)
 8003534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800353a:	60bb      	str	r3, [r7, #8]
 800353c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800353e:	2301      	movs	r3, #1
 8003540:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003542:	4b77      	ldr	r3, [pc, #476]	; (8003720 <HAL_RCC_OscConfig+0x474>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800354a:	2b00      	cmp	r3, #0
 800354c:	d118      	bne.n	8003580 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800354e:	4b74      	ldr	r3, [pc, #464]	; (8003720 <HAL_RCC_OscConfig+0x474>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a73      	ldr	r2, [pc, #460]	; (8003720 <HAL_RCC_OscConfig+0x474>)
 8003554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003558:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800355a:	f7fe f9a3 	bl	80018a4 <HAL_GetTick>
 800355e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003560:	e008      	b.n	8003574 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003562:	f7fe f99f 	bl	80018a4 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d901      	bls.n	8003574 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e10c      	b.n	800378e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003574:	4b6a      	ldr	r3, [pc, #424]	; (8003720 <HAL_RCC_OscConfig+0x474>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800357c:	2b00      	cmp	r3, #0
 800357e:	d0f0      	beq.n	8003562 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	2b01      	cmp	r3, #1
 8003586:	d106      	bne.n	8003596 <HAL_RCC_OscConfig+0x2ea>
 8003588:	4b64      	ldr	r3, [pc, #400]	; (800371c <HAL_RCC_OscConfig+0x470>)
 800358a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800358c:	4a63      	ldr	r2, [pc, #396]	; (800371c <HAL_RCC_OscConfig+0x470>)
 800358e:	f043 0301 	orr.w	r3, r3, #1
 8003592:	6713      	str	r3, [r2, #112]	; 0x70
 8003594:	e01c      	b.n	80035d0 <HAL_RCC_OscConfig+0x324>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	2b05      	cmp	r3, #5
 800359c:	d10c      	bne.n	80035b8 <HAL_RCC_OscConfig+0x30c>
 800359e:	4b5f      	ldr	r3, [pc, #380]	; (800371c <HAL_RCC_OscConfig+0x470>)
 80035a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a2:	4a5e      	ldr	r2, [pc, #376]	; (800371c <HAL_RCC_OscConfig+0x470>)
 80035a4:	f043 0304 	orr.w	r3, r3, #4
 80035a8:	6713      	str	r3, [r2, #112]	; 0x70
 80035aa:	4b5c      	ldr	r3, [pc, #368]	; (800371c <HAL_RCC_OscConfig+0x470>)
 80035ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ae:	4a5b      	ldr	r2, [pc, #364]	; (800371c <HAL_RCC_OscConfig+0x470>)
 80035b0:	f043 0301 	orr.w	r3, r3, #1
 80035b4:	6713      	str	r3, [r2, #112]	; 0x70
 80035b6:	e00b      	b.n	80035d0 <HAL_RCC_OscConfig+0x324>
 80035b8:	4b58      	ldr	r3, [pc, #352]	; (800371c <HAL_RCC_OscConfig+0x470>)
 80035ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035bc:	4a57      	ldr	r2, [pc, #348]	; (800371c <HAL_RCC_OscConfig+0x470>)
 80035be:	f023 0301 	bic.w	r3, r3, #1
 80035c2:	6713      	str	r3, [r2, #112]	; 0x70
 80035c4:	4b55      	ldr	r3, [pc, #340]	; (800371c <HAL_RCC_OscConfig+0x470>)
 80035c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c8:	4a54      	ldr	r2, [pc, #336]	; (800371c <HAL_RCC_OscConfig+0x470>)
 80035ca:	f023 0304 	bic.w	r3, r3, #4
 80035ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d015      	beq.n	8003604 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035d8:	f7fe f964 	bl	80018a4 <HAL_GetTick>
 80035dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035de:	e00a      	b.n	80035f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035e0:	f7fe f960 	bl	80018a4 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e0cb      	b.n	800378e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035f6:	4b49      	ldr	r3, [pc, #292]	; (800371c <HAL_RCC_OscConfig+0x470>)
 80035f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d0ee      	beq.n	80035e0 <HAL_RCC_OscConfig+0x334>
 8003602:	e014      	b.n	800362e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003604:	f7fe f94e 	bl	80018a4 <HAL_GetTick>
 8003608:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800360a:	e00a      	b.n	8003622 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800360c:	f7fe f94a 	bl	80018a4 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	f241 3288 	movw	r2, #5000	; 0x1388
 800361a:	4293      	cmp	r3, r2
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e0b5      	b.n	800378e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003622:	4b3e      	ldr	r3, [pc, #248]	; (800371c <HAL_RCC_OscConfig+0x470>)
 8003624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1ee      	bne.n	800360c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800362e:	7dfb      	ldrb	r3, [r7, #23]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d105      	bne.n	8003640 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003634:	4b39      	ldr	r3, [pc, #228]	; (800371c <HAL_RCC_OscConfig+0x470>)
 8003636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003638:	4a38      	ldr	r2, [pc, #224]	; (800371c <HAL_RCC_OscConfig+0x470>)
 800363a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800363e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	699b      	ldr	r3, [r3, #24]
 8003644:	2b00      	cmp	r3, #0
 8003646:	f000 80a1 	beq.w	800378c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800364a:	4b34      	ldr	r3, [pc, #208]	; (800371c <HAL_RCC_OscConfig+0x470>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f003 030c 	and.w	r3, r3, #12
 8003652:	2b08      	cmp	r3, #8
 8003654:	d05c      	beq.n	8003710 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	2b02      	cmp	r3, #2
 800365c:	d141      	bne.n	80036e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800365e:	4b31      	ldr	r3, [pc, #196]	; (8003724 <HAL_RCC_OscConfig+0x478>)
 8003660:	2200      	movs	r2, #0
 8003662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003664:	f7fe f91e 	bl	80018a4 <HAL_GetTick>
 8003668:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800366a:	e008      	b.n	800367e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800366c:	f7fe f91a 	bl	80018a4 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b02      	cmp	r3, #2
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e087      	b.n	800378e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800367e:	4b27      	ldr	r3, [pc, #156]	; (800371c <HAL_RCC_OscConfig+0x470>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1f0      	bne.n	800366c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	69da      	ldr	r2, [r3, #28]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	431a      	orrs	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003698:	019b      	lsls	r3, r3, #6
 800369a:	431a      	orrs	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a0:	085b      	lsrs	r3, r3, #1
 80036a2:	3b01      	subs	r3, #1
 80036a4:	041b      	lsls	r3, r3, #16
 80036a6:	431a      	orrs	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ac:	061b      	lsls	r3, r3, #24
 80036ae:	491b      	ldr	r1, [pc, #108]	; (800371c <HAL_RCC_OscConfig+0x470>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036b4:	4b1b      	ldr	r3, [pc, #108]	; (8003724 <HAL_RCC_OscConfig+0x478>)
 80036b6:	2201      	movs	r2, #1
 80036b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ba:	f7fe f8f3 	bl	80018a4 <HAL_GetTick>
 80036be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036c0:	e008      	b.n	80036d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036c2:	f7fe f8ef 	bl	80018a4 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d901      	bls.n	80036d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e05c      	b.n	800378e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036d4:	4b11      	ldr	r3, [pc, #68]	; (800371c <HAL_RCC_OscConfig+0x470>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d0f0      	beq.n	80036c2 <HAL_RCC_OscConfig+0x416>
 80036e0:	e054      	b.n	800378c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036e2:	4b10      	ldr	r3, [pc, #64]	; (8003724 <HAL_RCC_OscConfig+0x478>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e8:	f7fe f8dc 	bl	80018a4 <HAL_GetTick>
 80036ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ee:	e008      	b.n	8003702 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036f0:	f7fe f8d8 	bl	80018a4 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e045      	b.n	800378e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003702:	4b06      	ldr	r3, [pc, #24]	; (800371c <HAL_RCC_OscConfig+0x470>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1f0      	bne.n	80036f0 <HAL_RCC_OscConfig+0x444>
 800370e:	e03d      	b.n	800378c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	2b01      	cmp	r3, #1
 8003716:	d107      	bne.n	8003728 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e038      	b.n	800378e <HAL_RCC_OscConfig+0x4e2>
 800371c:	40023800 	.word	0x40023800
 8003720:	40007000 	.word	0x40007000
 8003724:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003728:	4b1b      	ldr	r3, [pc, #108]	; (8003798 <HAL_RCC_OscConfig+0x4ec>)
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d028      	beq.n	8003788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003740:	429a      	cmp	r2, r3
 8003742:	d121      	bne.n	8003788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800374e:	429a      	cmp	r2, r3
 8003750:	d11a      	bne.n	8003788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003758:	4013      	ands	r3, r2
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800375e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003760:	4293      	cmp	r3, r2
 8003762:	d111      	bne.n	8003788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376e:	085b      	lsrs	r3, r3, #1
 8003770:	3b01      	subs	r3, #1
 8003772:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003774:	429a      	cmp	r2, r3
 8003776:	d107      	bne.n	8003788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003782:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003784:	429a      	cmp	r2, r3
 8003786:	d001      	beq.n	800378c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e000      	b.n	800378e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3718      	adds	r7, #24
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	40023800 	.word	0x40023800

0800379c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d101      	bne.n	80037b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e0cc      	b.n	800394a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037b0:	4b68      	ldr	r3, [pc, #416]	; (8003954 <HAL_RCC_ClockConfig+0x1b8>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0307 	and.w	r3, r3, #7
 80037b8:	683a      	ldr	r2, [r7, #0]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d90c      	bls.n	80037d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037be:	4b65      	ldr	r3, [pc, #404]	; (8003954 <HAL_RCC_ClockConfig+0x1b8>)
 80037c0:	683a      	ldr	r2, [r7, #0]
 80037c2:	b2d2      	uxtb	r2, r2
 80037c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037c6:	4b63      	ldr	r3, [pc, #396]	; (8003954 <HAL_RCC_ClockConfig+0x1b8>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0307 	and.w	r3, r3, #7
 80037ce:	683a      	ldr	r2, [r7, #0]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d001      	beq.n	80037d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e0b8      	b.n	800394a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0302 	and.w	r3, r3, #2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d020      	beq.n	8003826 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0304 	and.w	r3, r3, #4
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d005      	beq.n	80037fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037f0:	4b59      	ldr	r3, [pc, #356]	; (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	4a58      	ldr	r2, [pc, #352]	; (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 80037f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80037fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0308 	and.w	r3, r3, #8
 8003804:	2b00      	cmp	r3, #0
 8003806:	d005      	beq.n	8003814 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003808:	4b53      	ldr	r3, [pc, #332]	; (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	4a52      	ldr	r2, [pc, #328]	; (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 800380e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003812:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003814:	4b50      	ldr	r3, [pc, #320]	; (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	494d      	ldr	r1, [pc, #308]	; (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 8003822:	4313      	orrs	r3, r2
 8003824:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	2b00      	cmp	r3, #0
 8003830:	d044      	beq.n	80038bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	2b01      	cmp	r3, #1
 8003838:	d107      	bne.n	800384a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800383a:	4b47      	ldr	r3, [pc, #284]	; (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d119      	bne.n	800387a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e07f      	b.n	800394a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	2b02      	cmp	r3, #2
 8003850:	d003      	beq.n	800385a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003856:	2b03      	cmp	r3, #3
 8003858:	d107      	bne.n	800386a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800385a:	4b3f      	ldr	r3, [pc, #252]	; (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d109      	bne.n	800387a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e06f      	b.n	800394a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800386a:	4b3b      	ldr	r3, [pc, #236]	; (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d101      	bne.n	800387a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e067      	b.n	800394a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800387a:	4b37      	ldr	r3, [pc, #220]	; (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f023 0203 	bic.w	r2, r3, #3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	4934      	ldr	r1, [pc, #208]	; (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 8003888:	4313      	orrs	r3, r2
 800388a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800388c:	f7fe f80a 	bl	80018a4 <HAL_GetTick>
 8003890:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003892:	e00a      	b.n	80038aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003894:	f7fe f806 	bl	80018a4 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	f241 3288 	movw	r2, #5000	; 0x1388
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e04f      	b.n	800394a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038aa:	4b2b      	ldr	r3, [pc, #172]	; (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f003 020c 	and.w	r2, r3, #12
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d1eb      	bne.n	8003894 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038bc:	4b25      	ldr	r3, [pc, #148]	; (8003954 <HAL_RCC_ClockConfig+0x1b8>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0307 	and.w	r3, r3, #7
 80038c4:	683a      	ldr	r2, [r7, #0]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d20c      	bcs.n	80038e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ca:	4b22      	ldr	r3, [pc, #136]	; (8003954 <HAL_RCC_ClockConfig+0x1b8>)
 80038cc:	683a      	ldr	r2, [r7, #0]
 80038ce:	b2d2      	uxtb	r2, r2
 80038d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038d2:	4b20      	ldr	r3, [pc, #128]	; (8003954 <HAL_RCC_ClockConfig+0x1b8>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0307 	and.w	r3, r3, #7
 80038da:	683a      	ldr	r2, [r7, #0]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d001      	beq.n	80038e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e032      	b.n	800394a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0304 	and.w	r3, r3, #4
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d008      	beq.n	8003902 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038f0:	4b19      	ldr	r3, [pc, #100]	; (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	4916      	ldr	r1, [pc, #88]	; (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0308 	and.w	r3, r3, #8
 800390a:	2b00      	cmp	r3, #0
 800390c:	d009      	beq.n	8003922 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800390e:	4b12      	ldr	r3, [pc, #72]	; (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	00db      	lsls	r3, r3, #3
 800391c:	490e      	ldr	r1, [pc, #56]	; (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 800391e:	4313      	orrs	r3, r2
 8003920:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003922:	f000 f821 	bl	8003968 <HAL_RCC_GetSysClockFreq>
 8003926:	4602      	mov	r2, r0
 8003928:	4b0b      	ldr	r3, [pc, #44]	; (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	091b      	lsrs	r3, r3, #4
 800392e:	f003 030f 	and.w	r3, r3, #15
 8003932:	490a      	ldr	r1, [pc, #40]	; (800395c <HAL_RCC_ClockConfig+0x1c0>)
 8003934:	5ccb      	ldrb	r3, [r1, r3]
 8003936:	fa22 f303 	lsr.w	r3, r2, r3
 800393a:	4a09      	ldr	r2, [pc, #36]	; (8003960 <HAL_RCC_ClockConfig+0x1c4>)
 800393c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800393e:	4b09      	ldr	r3, [pc, #36]	; (8003964 <HAL_RCC_ClockConfig+0x1c8>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4618      	mov	r0, r3
 8003944:	f7fd ff6a 	bl	800181c <HAL_InitTick>

  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3710      	adds	r7, #16
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	40023c00 	.word	0x40023c00
 8003958:	40023800 	.word	0x40023800
 800395c:	0800520c 	.word	0x0800520c
 8003960:	20000038 	.word	0x20000038
 8003964:	2000003c 	.word	0x2000003c

08003968 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003968:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800396c:	b094      	sub	sp, #80	; 0x50
 800396e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003970:	2300      	movs	r3, #0
 8003972:	647b      	str	r3, [r7, #68]	; 0x44
 8003974:	2300      	movs	r3, #0
 8003976:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003978:	2300      	movs	r3, #0
 800397a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800397c:	2300      	movs	r3, #0
 800397e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003980:	4b79      	ldr	r3, [pc, #484]	; (8003b68 <HAL_RCC_GetSysClockFreq+0x200>)
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f003 030c 	and.w	r3, r3, #12
 8003988:	2b08      	cmp	r3, #8
 800398a:	d00d      	beq.n	80039a8 <HAL_RCC_GetSysClockFreq+0x40>
 800398c:	2b08      	cmp	r3, #8
 800398e:	f200 80e1 	bhi.w	8003b54 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003992:	2b00      	cmp	r3, #0
 8003994:	d002      	beq.n	800399c <HAL_RCC_GetSysClockFreq+0x34>
 8003996:	2b04      	cmp	r3, #4
 8003998:	d003      	beq.n	80039a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800399a:	e0db      	b.n	8003b54 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800399c:	4b73      	ldr	r3, [pc, #460]	; (8003b6c <HAL_RCC_GetSysClockFreq+0x204>)
 800399e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80039a0:	e0db      	b.n	8003b5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039a2:	4b73      	ldr	r3, [pc, #460]	; (8003b70 <HAL_RCC_GetSysClockFreq+0x208>)
 80039a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039a6:	e0d8      	b.n	8003b5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039a8:	4b6f      	ldr	r3, [pc, #444]	; (8003b68 <HAL_RCC_GetSysClockFreq+0x200>)
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039b0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039b2:	4b6d      	ldr	r3, [pc, #436]	; (8003b68 <HAL_RCC_GetSysClockFreq+0x200>)
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d063      	beq.n	8003a86 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039be:	4b6a      	ldr	r3, [pc, #424]	; (8003b68 <HAL_RCC_GetSysClockFreq+0x200>)
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	099b      	lsrs	r3, r3, #6
 80039c4:	2200      	movs	r2, #0
 80039c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80039c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80039ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039d0:	633b      	str	r3, [r7, #48]	; 0x30
 80039d2:	2300      	movs	r3, #0
 80039d4:	637b      	str	r3, [r7, #52]	; 0x34
 80039d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80039da:	4622      	mov	r2, r4
 80039dc:	462b      	mov	r3, r5
 80039de:	f04f 0000 	mov.w	r0, #0
 80039e2:	f04f 0100 	mov.w	r1, #0
 80039e6:	0159      	lsls	r1, r3, #5
 80039e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039ec:	0150      	lsls	r0, r2, #5
 80039ee:	4602      	mov	r2, r0
 80039f0:	460b      	mov	r3, r1
 80039f2:	4621      	mov	r1, r4
 80039f4:	1a51      	subs	r1, r2, r1
 80039f6:	6139      	str	r1, [r7, #16]
 80039f8:	4629      	mov	r1, r5
 80039fa:	eb63 0301 	sbc.w	r3, r3, r1
 80039fe:	617b      	str	r3, [r7, #20]
 8003a00:	f04f 0200 	mov.w	r2, #0
 8003a04:	f04f 0300 	mov.w	r3, #0
 8003a08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a0c:	4659      	mov	r1, fp
 8003a0e:	018b      	lsls	r3, r1, #6
 8003a10:	4651      	mov	r1, sl
 8003a12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a16:	4651      	mov	r1, sl
 8003a18:	018a      	lsls	r2, r1, #6
 8003a1a:	4651      	mov	r1, sl
 8003a1c:	ebb2 0801 	subs.w	r8, r2, r1
 8003a20:	4659      	mov	r1, fp
 8003a22:	eb63 0901 	sbc.w	r9, r3, r1
 8003a26:	f04f 0200 	mov.w	r2, #0
 8003a2a:	f04f 0300 	mov.w	r3, #0
 8003a2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a3a:	4690      	mov	r8, r2
 8003a3c:	4699      	mov	r9, r3
 8003a3e:	4623      	mov	r3, r4
 8003a40:	eb18 0303 	adds.w	r3, r8, r3
 8003a44:	60bb      	str	r3, [r7, #8]
 8003a46:	462b      	mov	r3, r5
 8003a48:	eb49 0303 	adc.w	r3, r9, r3
 8003a4c:	60fb      	str	r3, [r7, #12]
 8003a4e:	f04f 0200 	mov.w	r2, #0
 8003a52:	f04f 0300 	mov.w	r3, #0
 8003a56:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003a5a:	4629      	mov	r1, r5
 8003a5c:	024b      	lsls	r3, r1, #9
 8003a5e:	4621      	mov	r1, r4
 8003a60:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a64:	4621      	mov	r1, r4
 8003a66:	024a      	lsls	r2, r1, #9
 8003a68:	4610      	mov	r0, r2
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a6e:	2200      	movs	r2, #0
 8003a70:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a74:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a78:	f7fc ff9c 	bl	80009b4 <__aeabi_uldivmod>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	460b      	mov	r3, r1
 8003a80:	4613      	mov	r3, r2
 8003a82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a84:	e058      	b.n	8003b38 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a86:	4b38      	ldr	r3, [pc, #224]	; (8003b68 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	099b      	lsrs	r3, r3, #6
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	4618      	mov	r0, r3
 8003a90:	4611      	mov	r1, r2
 8003a92:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a96:	623b      	str	r3, [r7, #32]
 8003a98:	2300      	movs	r3, #0
 8003a9a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a9c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003aa0:	4642      	mov	r2, r8
 8003aa2:	464b      	mov	r3, r9
 8003aa4:	f04f 0000 	mov.w	r0, #0
 8003aa8:	f04f 0100 	mov.w	r1, #0
 8003aac:	0159      	lsls	r1, r3, #5
 8003aae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ab2:	0150      	lsls	r0, r2, #5
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	4641      	mov	r1, r8
 8003aba:	ebb2 0a01 	subs.w	sl, r2, r1
 8003abe:	4649      	mov	r1, r9
 8003ac0:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ac4:	f04f 0200 	mov.w	r2, #0
 8003ac8:	f04f 0300 	mov.w	r3, #0
 8003acc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ad0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ad4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ad8:	ebb2 040a 	subs.w	r4, r2, sl
 8003adc:	eb63 050b 	sbc.w	r5, r3, fp
 8003ae0:	f04f 0200 	mov.w	r2, #0
 8003ae4:	f04f 0300 	mov.w	r3, #0
 8003ae8:	00eb      	lsls	r3, r5, #3
 8003aea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003aee:	00e2      	lsls	r2, r4, #3
 8003af0:	4614      	mov	r4, r2
 8003af2:	461d      	mov	r5, r3
 8003af4:	4643      	mov	r3, r8
 8003af6:	18e3      	adds	r3, r4, r3
 8003af8:	603b      	str	r3, [r7, #0]
 8003afa:	464b      	mov	r3, r9
 8003afc:	eb45 0303 	adc.w	r3, r5, r3
 8003b00:	607b      	str	r3, [r7, #4]
 8003b02:	f04f 0200 	mov.w	r2, #0
 8003b06:	f04f 0300 	mov.w	r3, #0
 8003b0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b0e:	4629      	mov	r1, r5
 8003b10:	028b      	lsls	r3, r1, #10
 8003b12:	4621      	mov	r1, r4
 8003b14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b18:	4621      	mov	r1, r4
 8003b1a:	028a      	lsls	r2, r1, #10
 8003b1c:	4610      	mov	r0, r2
 8003b1e:	4619      	mov	r1, r3
 8003b20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b22:	2200      	movs	r2, #0
 8003b24:	61bb      	str	r3, [r7, #24]
 8003b26:	61fa      	str	r2, [r7, #28]
 8003b28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b2c:	f7fc ff42 	bl	80009b4 <__aeabi_uldivmod>
 8003b30:	4602      	mov	r2, r0
 8003b32:	460b      	mov	r3, r1
 8003b34:	4613      	mov	r3, r2
 8003b36:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b38:	4b0b      	ldr	r3, [pc, #44]	; (8003b68 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	0c1b      	lsrs	r3, r3, #16
 8003b3e:	f003 0303 	and.w	r3, r3, #3
 8003b42:	3301      	adds	r3, #1
 8003b44:	005b      	lsls	r3, r3, #1
 8003b46:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003b48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b50:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b52:	e002      	b.n	8003b5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b54:	4b05      	ldr	r3, [pc, #20]	; (8003b6c <HAL_RCC_GetSysClockFreq+0x204>)
 8003b56:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3750      	adds	r7, #80	; 0x50
 8003b60:	46bd      	mov	sp, r7
 8003b62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b66:	bf00      	nop
 8003b68:	40023800 	.word	0x40023800
 8003b6c:	00f42400 	.word	0x00f42400
 8003b70:	007a1200 	.word	0x007a1200

08003b74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b74:	b480      	push	{r7}
 8003b76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b78:	4b03      	ldr	r3, [pc, #12]	; (8003b88 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	20000038 	.word	0x20000038

08003b8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b90:	f7ff fff0 	bl	8003b74 <HAL_RCC_GetHCLKFreq>
 8003b94:	4602      	mov	r2, r0
 8003b96:	4b05      	ldr	r3, [pc, #20]	; (8003bac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	0a9b      	lsrs	r3, r3, #10
 8003b9c:	f003 0307 	and.w	r3, r3, #7
 8003ba0:	4903      	ldr	r1, [pc, #12]	; (8003bb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ba2:	5ccb      	ldrb	r3, [r1, r3]
 8003ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	40023800 	.word	0x40023800
 8003bb0:	0800521c 	.word	0x0800521c

08003bb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003bb8:	f7ff ffdc 	bl	8003b74 <HAL_RCC_GetHCLKFreq>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	4b05      	ldr	r3, [pc, #20]	; (8003bd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	0b5b      	lsrs	r3, r3, #13
 8003bc4:	f003 0307 	and.w	r3, r3, #7
 8003bc8:	4903      	ldr	r1, [pc, #12]	; (8003bd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bca:	5ccb      	ldrb	r3, [r1, r3]
 8003bcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	40023800 	.word	0x40023800
 8003bd8:	0800521c 	.word	0x0800521c

08003bdc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b086      	sub	sp, #24
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003be4:	2300      	movs	r3, #0
 8003be6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003be8:	2300      	movs	r3, #0
 8003bea:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0301 	and.w	r3, r3, #1
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d105      	bne.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d035      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003c04:	4b62      	ldr	r3, [pc, #392]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003c06:	2200      	movs	r2, #0
 8003c08:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c0a:	f7fd fe4b 	bl	80018a4 <HAL_GetTick>
 8003c0e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c10:	e008      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003c12:	f7fd fe47 	bl	80018a4 <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d901      	bls.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e0b0      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c24:	4b5b      	ldr	r3, [pc, #364]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d1f0      	bne.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	019a      	lsls	r2, r3, #6
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	071b      	lsls	r3, r3, #28
 8003c3c:	4955      	ldr	r1, [pc, #340]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003c44:	4b52      	ldr	r3, [pc, #328]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003c46:	2201      	movs	r2, #1
 8003c48:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c4a:	f7fd fe2b 	bl	80018a4 <HAL_GetTick>
 8003c4e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c50:	e008      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003c52:	f7fd fe27 	bl	80018a4 <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d901      	bls.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e090      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c64:	4b4b      	ldr	r3, [pc, #300]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d0f0      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0302 	and.w	r3, r3, #2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f000 8083 	beq.w	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c7e:	2300      	movs	r3, #0
 8003c80:	60fb      	str	r3, [r7, #12]
 8003c82:	4b44      	ldr	r3, [pc, #272]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c86:	4a43      	ldr	r2, [pc, #268]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c8e:	4b41      	ldr	r3, [pc, #260]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c96:	60fb      	str	r3, [r7, #12]
 8003c98:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003c9a:	4b3f      	ldr	r3, [pc, #252]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a3e      	ldr	r2, [pc, #248]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ca4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003ca6:	f7fd fdfd 	bl	80018a4 <HAL_GetTick>
 8003caa:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003cac:	e008      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003cae:	f7fd fdf9 	bl	80018a4 <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d901      	bls.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e062      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003cc0:	4b35      	ldr	r3, [pc, #212]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d0f0      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ccc:	4b31      	ldr	r3, [pc, #196]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cd4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d02f      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ce4:	693a      	ldr	r2, [r7, #16]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d028      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cea:	4b2a      	ldr	r3, [pc, #168]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cf2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003cf4:	4b29      	ldr	r3, [pc, #164]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003cfa:	4b28      	ldr	r3, [pc, #160]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003d00:	4a24      	ldr	r2, [pc, #144]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003d06:	4b23      	ldr	r3, [pc, #140]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d114      	bne.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003d12:	f7fd fdc7 	bl	80018a4 <HAL_GetTick>
 8003d16:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d18:	e00a      	b.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d1a:	f7fd fdc3 	bl	80018a4 <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d901      	bls.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e02a      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d30:	4b18      	ldr	r3, [pc, #96]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d34:	f003 0302 	and.w	r3, r3, #2
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d0ee      	beq.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d48:	d10d      	bne.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003d4a:	4b12      	ldr	r3, [pc, #72]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003d5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d5e:	490d      	ldr	r1, [pc, #52]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	608b      	str	r3, [r1, #8]
 8003d64:	e005      	b.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003d66:	4b0b      	ldr	r3, [pc, #44]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	4a0a      	ldr	r2, [pc, #40]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d6c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003d70:	6093      	str	r3, [r2, #8]
 8003d72:	4b08      	ldr	r3, [pc, #32]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d74:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d7e:	4905      	ldr	r1, [pc, #20]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3718      	adds	r7, #24
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	42470068 	.word	0x42470068
 8003d94:	40023800 	.word	0x40023800
 8003d98:	40007000 	.word	0x40007000
 8003d9c:	42470e40 	.word	0x42470e40

08003da0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b087      	sub	sp, #28
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003da8:	2300      	movs	r3, #0
 8003daa:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003dac:	2300      	movs	r3, #0
 8003dae:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003db0:	2300      	movs	r3, #0
 8003db2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003db4:	2300      	movs	r3, #0
 8003db6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d13e      	bne.n	8003e3c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003dbe:	4b23      	ldr	r3, [pc, #140]	; (8003e4c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003dc6:	60fb      	str	r3, [r7, #12]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d005      	beq.n	8003dda <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d12f      	bne.n	8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003dd4:	4b1e      	ldr	r3, [pc, #120]	; (8003e50 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003dd6:	617b      	str	r3, [r7, #20]
          break;
 8003dd8:	e02f      	b.n	8003e3a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003dda:	4b1c      	ldr	r3, [pc, #112]	; (8003e4c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003de2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003de6:	d108      	bne.n	8003dfa <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003de8:	4b18      	ldr	r3, [pc, #96]	; (8003e4c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003df0:	4a18      	ldr	r2, [pc, #96]	; (8003e54 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df6:	613b      	str	r3, [r7, #16]
 8003df8:	e007      	b.n	8003e0a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003dfa:	4b14      	ldr	r3, [pc, #80]	; (8003e4c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e02:	4a15      	ldr	r2, [pc, #84]	; (8003e58 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e08:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003e0a:	4b10      	ldr	r3, [pc, #64]	; (8003e4c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003e0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e10:	099b      	lsrs	r3, r3, #6
 8003e12:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	fb02 f303 	mul.w	r3, r2, r3
 8003e1c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003e1e:	4b0b      	ldr	r3, [pc, #44]	; (8003e4c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003e20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e24:	0f1b      	lsrs	r3, r3, #28
 8003e26:	f003 0307 	and.w	r3, r3, #7
 8003e2a:	68ba      	ldr	r2, [r7, #8]
 8003e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e30:	617b      	str	r3, [r7, #20]
          break;
 8003e32:	e002      	b.n	8003e3a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003e34:	2300      	movs	r3, #0
 8003e36:	617b      	str	r3, [r7, #20]
          break;
 8003e38:	bf00      	nop
        }
      }
      break;
 8003e3a:	bf00      	nop
    }
  }
  return frequency;
 8003e3c:	697b      	ldr	r3, [r7, #20]
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	371c      	adds	r7, #28
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	40023800 	.word	0x40023800
 8003e50:	00bb8000 	.word	0x00bb8000
 8003e54:	007a1200 	.word	0x007a1200
 8003e58:	00f42400 	.word	0x00f42400

08003e5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d101      	bne.n	8003e6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e03f      	b.n	8003eee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d106      	bne.n	8003e88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f7fd fb5e 	bl	8001544 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2224      	movs	r2, #36	; 0x24
 8003e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68da      	ldr	r2, [r3, #12]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 f9f5 	bl	8004290 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	691a      	ldr	r2, [r3, #16]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003eb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	695a      	ldr	r2, [r3, #20]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ec4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68da      	ldr	r2, [r3, #12]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ed4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2220      	movs	r2, #32
 8003ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2220      	movs	r2, #32
 8003ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3708      	adds	r7, #8
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
	...

08003ef8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b08c      	sub	sp, #48	; 0x30
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	4613      	mov	r3, r2
 8003f04:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	2b20      	cmp	r3, #32
 8003f10:	d165      	bne.n	8003fde <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d002      	beq.n	8003f1e <HAL_UART_Transmit_DMA+0x26>
 8003f18:	88fb      	ldrh	r3, [r7, #6]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d101      	bne.n	8003f22 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e05e      	b.n	8003fe0 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d101      	bne.n	8003f30 <HAL_UART_Transmit_DMA+0x38>
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	e057      	b.n	8003fe0 <HAL_UART_Transmit_DMA+0xe8>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003f38:	68ba      	ldr	r2, [r7, #8]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	88fa      	ldrh	r2, [r7, #6]
 8003f42:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	88fa      	ldrh	r2, [r7, #6]
 8003f48:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2221      	movs	r2, #33	; 0x21
 8003f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f5c:	4a22      	ldr	r2, [pc, #136]	; (8003fe8 <HAL_UART_Transmit_DMA+0xf0>)
 8003f5e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f64:	4a21      	ldr	r2, [pc, #132]	; (8003fec <HAL_UART_Transmit_DMA+0xf4>)
 8003f66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f6c:	4a20      	ldr	r2, [pc, #128]	; (8003ff0 <HAL_UART_Transmit_DMA+0xf8>)
 8003f6e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f74:	2200      	movs	r2, #0
 8003f76:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8003f78:	f107 0308 	add.w	r3, r7, #8
 8003f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f84:	6819      	ldr	r1, [r3, #0]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	3304      	adds	r3, #4
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	88fb      	ldrh	r3, [r7, #6]
 8003f90:	f7fd fe54 	bl	8001c3c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f9c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	3314      	adds	r3, #20
 8003fac:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	e853 3f00 	ldrex	r3, [r3]
 8003fb4:	617b      	str	r3, [r7, #20]
   return(result);
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	3314      	adds	r3, #20
 8003fc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fc6:	627a      	str	r2, [r7, #36]	; 0x24
 8003fc8:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fca:	6a39      	ldr	r1, [r7, #32]
 8003fcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fce:	e841 2300 	strex	r3, r2, [r1]
 8003fd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1e5      	bne.n	8003fa6 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	e000      	b.n	8003fe0 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8003fde:	2302      	movs	r3, #2
  }
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3730      	adds	r7, #48	; 0x30
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	08004031 	.word	0x08004031
 8003fec:	080040cb 	.word	0x080040cb
 8003ff0:	080040e7 	.word	0x080040e7

08003ff4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ffc:	bf00      	nop
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004010:	bf00      	nop
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004024:	bf00      	nop
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b090      	sub	sp, #64	; 0x40
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800403c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004048:	2b00      	cmp	r3, #0
 800404a:	d137      	bne.n	80040bc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800404c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800404e:	2200      	movs	r2, #0
 8004050:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	3314      	adds	r3, #20
 8004058:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800405a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405c:	e853 3f00 	ldrex	r3, [r3]
 8004060:	623b      	str	r3, [r7, #32]
   return(result);
 8004062:	6a3b      	ldr	r3, [r7, #32]
 8004064:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004068:	63bb      	str	r3, [r7, #56]	; 0x38
 800406a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	3314      	adds	r3, #20
 8004070:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004072:	633a      	str	r2, [r7, #48]	; 0x30
 8004074:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004076:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004078:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800407a:	e841 2300 	strex	r3, r2, [r1]
 800407e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1e5      	bne.n	8004052 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	330c      	adds	r3, #12
 800408c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	e853 3f00 	ldrex	r3, [r3]
 8004094:	60fb      	str	r3, [r7, #12]
   return(result);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800409c:	637b      	str	r3, [r7, #52]	; 0x34
 800409e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	330c      	adds	r3, #12
 80040a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040a6:	61fa      	str	r2, [r7, #28]
 80040a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040aa:	69b9      	ldr	r1, [r7, #24]
 80040ac:	69fa      	ldr	r2, [r7, #28]
 80040ae:	e841 2300 	strex	r3, r2, [r1]
 80040b2:	617b      	str	r3, [r7, #20]
   return(result);
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1e5      	bne.n	8004086 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80040ba:	e002      	b.n	80040c2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80040bc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80040be:	f7ff ff99 	bl	8003ff4 <HAL_UART_TxCpltCallback>
}
 80040c2:	bf00      	nop
 80040c4:	3740      	adds	r7, #64	; 0x40
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}

080040ca <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80040ca:	b580      	push	{r7, lr}
 80040cc:	b084      	sub	sp, #16
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80040d8:	68f8      	ldr	r0, [r7, #12]
 80040da:	f7ff ff95 	bl	8004008 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040de:	bf00      	nop
 80040e0:	3710      	adds	r7, #16
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}

080040e6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b084      	sub	sp, #16
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80040ee:	2300      	movs	r3, #0
 80040f0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	695b      	ldr	r3, [r3, #20]
 80040fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004102:	2b80      	cmp	r3, #128	; 0x80
 8004104:	bf0c      	ite	eq
 8004106:	2301      	moveq	r3, #1
 8004108:	2300      	movne	r3, #0
 800410a:	b2db      	uxtb	r3, r3
 800410c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004114:	b2db      	uxtb	r3, r3
 8004116:	2b21      	cmp	r3, #33	; 0x21
 8004118:	d108      	bne.n	800412c <UART_DMAError+0x46>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d005      	beq.n	800412c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	2200      	movs	r2, #0
 8004124:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004126:	68b8      	ldr	r0, [r7, #8]
 8004128:	f000 f827 	bl	800417a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	695b      	ldr	r3, [r3, #20]
 8004132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004136:	2b40      	cmp	r3, #64	; 0x40
 8004138:	bf0c      	ite	eq
 800413a:	2301      	moveq	r3, #1
 800413c:	2300      	movne	r3, #0
 800413e:	b2db      	uxtb	r3, r3
 8004140:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004148:	b2db      	uxtb	r3, r3
 800414a:	2b22      	cmp	r3, #34	; 0x22
 800414c:	d108      	bne.n	8004160 <UART_DMAError+0x7a>
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d005      	beq.n	8004160 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	2200      	movs	r2, #0
 8004158:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800415a:	68b8      	ldr	r0, [r7, #8]
 800415c:	f000 f835 	bl	80041ca <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004164:	f043 0210 	orr.w	r2, r3, #16
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800416c:	68b8      	ldr	r0, [r7, #8]
 800416e:	f7ff ff55 	bl	800401c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004172:	bf00      	nop
 8004174:	3710      	adds	r7, #16
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}

0800417a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800417a:	b480      	push	{r7}
 800417c:	b089      	sub	sp, #36	; 0x24
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	330c      	adds	r3, #12
 8004188:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	e853 3f00 	ldrex	r3, [r3]
 8004190:	60bb      	str	r3, [r7, #8]
   return(result);
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004198:	61fb      	str	r3, [r7, #28]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	330c      	adds	r3, #12
 80041a0:	69fa      	ldr	r2, [r7, #28]
 80041a2:	61ba      	str	r2, [r7, #24]
 80041a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a6:	6979      	ldr	r1, [r7, #20]
 80041a8:	69ba      	ldr	r2, [r7, #24]
 80041aa:	e841 2300 	strex	r3, r2, [r1]
 80041ae:	613b      	str	r3, [r7, #16]
   return(result);
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1e5      	bne.n	8004182 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2220      	movs	r2, #32
 80041ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80041be:	bf00      	nop
 80041c0:	3724      	adds	r7, #36	; 0x24
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr

080041ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041ca:	b480      	push	{r7}
 80041cc:	b095      	sub	sp, #84	; 0x54
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	330c      	adds	r3, #12
 80041d8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041dc:	e853 3f00 	ldrex	r3, [r3]
 80041e0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80041e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	330c      	adds	r3, #12
 80041f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80041f2:	643a      	str	r2, [r7, #64]	; 0x40
 80041f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80041f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80041fa:	e841 2300 	strex	r3, r2, [r1]
 80041fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1e5      	bne.n	80041d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	3314      	adds	r3, #20
 800420c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420e:	6a3b      	ldr	r3, [r7, #32]
 8004210:	e853 3f00 	ldrex	r3, [r3]
 8004214:	61fb      	str	r3, [r7, #28]
   return(result);
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	f023 0301 	bic.w	r3, r3, #1
 800421c:	64bb      	str	r3, [r7, #72]	; 0x48
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	3314      	adds	r3, #20
 8004224:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004226:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004228:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800422a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800422c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800422e:	e841 2300 	strex	r3, r2, [r1]
 8004232:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1e5      	bne.n	8004206 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800423e:	2b01      	cmp	r3, #1
 8004240:	d119      	bne.n	8004276 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	330c      	adds	r3, #12
 8004248:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	e853 3f00 	ldrex	r3, [r3]
 8004250:	60bb      	str	r3, [r7, #8]
   return(result);
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	f023 0310 	bic.w	r3, r3, #16
 8004258:	647b      	str	r3, [r7, #68]	; 0x44
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	330c      	adds	r3, #12
 8004260:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004262:	61ba      	str	r2, [r7, #24]
 8004264:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004266:	6979      	ldr	r1, [r7, #20]
 8004268:	69ba      	ldr	r2, [r7, #24]
 800426a:	e841 2300 	strex	r3, r2, [r1]
 800426e:	613b      	str	r3, [r7, #16]
   return(result);
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1e5      	bne.n	8004242 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2220      	movs	r2, #32
 800427a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004284:	bf00      	nop
 8004286:	3754      	adds	r7, #84	; 0x54
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004290:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004294:	b0c0      	sub	sp, #256	; 0x100
 8004296:	af00      	add	r7, sp, #0
 8004298:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800429c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80042a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ac:	68d9      	ldr	r1, [r3, #12]
 80042ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	ea40 0301 	orr.w	r3, r0, r1
 80042b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042be:	689a      	ldr	r2, [r3, #8]
 80042c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	431a      	orrs	r2, r3
 80042c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	431a      	orrs	r2, r3
 80042d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042d4:	69db      	ldr	r3, [r3, #28]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80042dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80042e8:	f021 010c 	bic.w	r1, r1, #12
 80042ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80042f6:	430b      	orrs	r3, r1
 80042f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800430a:	6999      	ldr	r1, [r3, #24]
 800430c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	ea40 0301 	orr.w	r3, r0, r1
 8004316:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	4b8f      	ldr	r3, [pc, #572]	; (800455c <UART_SetConfig+0x2cc>)
 8004320:	429a      	cmp	r2, r3
 8004322:	d005      	beq.n	8004330 <UART_SetConfig+0xa0>
 8004324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	4b8d      	ldr	r3, [pc, #564]	; (8004560 <UART_SetConfig+0x2d0>)
 800432c:	429a      	cmp	r2, r3
 800432e:	d104      	bne.n	800433a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004330:	f7ff fc40 	bl	8003bb4 <HAL_RCC_GetPCLK2Freq>
 8004334:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004338:	e003      	b.n	8004342 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800433a:	f7ff fc27 	bl	8003b8c <HAL_RCC_GetPCLK1Freq>
 800433e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004346:	69db      	ldr	r3, [r3, #28]
 8004348:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800434c:	f040 810c 	bne.w	8004568 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004350:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004354:	2200      	movs	r2, #0
 8004356:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800435a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800435e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004362:	4622      	mov	r2, r4
 8004364:	462b      	mov	r3, r5
 8004366:	1891      	adds	r1, r2, r2
 8004368:	65b9      	str	r1, [r7, #88]	; 0x58
 800436a:	415b      	adcs	r3, r3
 800436c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800436e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004372:	4621      	mov	r1, r4
 8004374:	eb12 0801 	adds.w	r8, r2, r1
 8004378:	4629      	mov	r1, r5
 800437a:	eb43 0901 	adc.w	r9, r3, r1
 800437e:	f04f 0200 	mov.w	r2, #0
 8004382:	f04f 0300 	mov.w	r3, #0
 8004386:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800438a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800438e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004392:	4690      	mov	r8, r2
 8004394:	4699      	mov	r9, r3
 8004396:	4623      	mov	r3, r4
 8004398:	eb18 0303 	adds.w	r3, r8, r3
 800439c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80043a0:	462b      	mov	r3, r5
 80043a2:	eb49 0303 	adc.w	r3, r9, r3
 80043a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80043aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80043b6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80043ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80043be:	460b      	mov	r3, r1
 80043c0:	18db      	adds	r3, r3, r3
 80043c2:	653b      	str	r3, [r7, #80]	; 0x50
 80043c4:	4613      	mov	r3, r2
 80043c6:	eb42 0303 	adc.w	r3, r2, r3
 80043ca:	657b      	str	r3, [r7, #84]	; 0x54
 80043cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80043d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80043d4:	f7fc faee 	bl	80009b4 <__aeabi_uldivmod>
 80043d8:	4602      	mov	r2, r0
 80043da:	460b      	mov	r3, r1
 80043dc:	4b61      	ldr	r3, [pc, #388]	; (8004564 <UART_SetConfig+0x2d4>)
 80043de:	fba3 2302 	umull	r2, r3, r3, r2
 80043e2:	095b      	lsrs	r3, r3, #5
 80043e4:	011c      	lsls	r4, r3, #4
 80043e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043ea:	2200      	movs	r2, #0
 80043ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80043f0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80043f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80043f8:	4642      	mov	r2, r8
 80043fa:	464b      	mov	r3, r9
 80043fc:	1891      	adds	r1, r2, r2
 80043fe:	64b9      	str	r1, [r7, #72]	; 0x48
 8004400:	415b      	adcs	r3, r3
 8004402:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004404:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004408:	4641      	mov	r1, r8
 800440a:	eb12 0a01 	adds.w	sl, r2, r1
 800440e:	4649      	mov	r1, r9
 8004410:	eb43 0b01 	adc.w	fp, r3, r1
 8004414:	f04f 0200 	mov.w	r2, #0
 8004418:	f04f 0300 	mov.w	r3, #0
 800441c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004420:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004424:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004428:	4692      	mov	sl, r2
 800442a:	469b      	mov	fp, r3
 800442c:	4643      	mov	r3, r8
 800442e:	eb1a 0303 	adds.w	r3, sl, r3
 8004432:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004436:	464b      	mov	r3, r9
 8004438:	eb4b 0303 	adc.w	r3, fp, r3
 800443c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800444c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004450:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004454:	460b      	mov	r3, r1
 8004456:	18db      	adds	r3, r3, r3
 8004458:	643b      	str	r3, [r7, #64]	; 0x40
 800445a:	4613      	mov	r3, r2
 800445c:	eb42 0303 	adc.w	r3, r2, r3
 8004460:	647b      	str	r3, [r7, #68]	; 0x44
 8004462:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004466:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800446a:	f7fc faa3 	bl	80009b4 <__aeabi_uldivmod>
 800446e:	4602      	mov	r2, r0
 8004470:	460b      	mov	r3, r1
 8004472:	4611      	mov	r1, r2
 8004474:	4b3b      	ldr	r3, [pc, #236]	; (8004564 <UART_SetConfig+0x2d4>)
 8004476:	fba3 2301 	umull	r2, r3, r3, r1
 800447a:	095b      	lsrs	r3, r3, #5
 800447c:	2264      	movs	r2, #100	; 0x64
 800447e:	fb02 f303 	mul.w	r3, r2, r3
 8004482:	1acb      	subs	r3, r1, r3
 8004484:	00db      	lsls	r3, r3, #3
 8004486:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800448a:	4b36      	ldr	r3, [pc, #216]	; (8004564 <UART_SetConfig+0x2d4>)
 800448c:	fba3 2302 	umull	r2, r3, r3, r2
 8004490:	095b      	lsrs	r3, r3, #5
 8004492:	005b      	lsls	r3, r3, #1
 8004494:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004498:	441c      	add	r4, r3
 800449a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800449e:	2200      	movs	r2, #0
 80044a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044a4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80044a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80044ac:	4642      	mov	r2, r8
 80044ae:	464b      	mov	r3, r9
 80044b0:	1891      	adds	r1, r2, r2
 80044b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80044b4:	415b      	adcs	r3, r3
 80044b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80044bc:	4641      	mov	r1, r8
 80044be:	1851      	adds	r1, r2, r1
 80044c0:	6339      	str	r1, [r7, #48]	; 0x30
 80044c2:	4649      	mov	r1, r9
 80044c4:	414b      	adcs	r3, r1
 80044c6:	637b      	str	r3, [r7, #52]	; 0x34
 80044c8:	f04f 0200 	mov.w	r2, #0
 80044cc:	f04f 0300 	mov.w	r3, #0
 80044d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80044d4:	4659      	mov	r1, fp
 80044d6:	00cb      	lsls	r3, r1, #3
 80044d8:	4651      	mov	r1, sl
 80044da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044de:	4651      	mov	r1, sl
 80044e0:	00ca      	lsls	r2, r1, #3
 80044e2:	4610      	mov	r0, r2
 80044e4:	4619      	mov	r1, r3
 80044e6:	4603      	mov	r3, r0
 80044e8:	4642      	mov	r2, r8
 80044ea:	189b      	adds	r3, r3, r2
 80044ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80044f0:	464b      	mov	r3, r9
 80044f2:	460a      	mov	r2, r1
 80044f4:	eb42 0303 	adc.w	r3, r2, r3
 80044f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004508:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800450c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004510:	460b      	mov	r3, r1
 8004512:	18db      	adds	r3, r3, r3
 8004514:	62bb      	str	r3, [r7, #40]	; 0x28
 8004516:	4613      	mov	r3, r2
 8004518:	eb42 0303 	adc.w	r3, r2, r3
 800451c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800451e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004522:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004526:	f7fc fa45 	bl	80009b4 <__aeabi_uldivmod>
 800452a:	4602      	mov	r2, r0
 800452c:	460b      	mov	r3, r1
 800452e:	4b0d      	ldr	r3, [pc, #52]	; (8004564 <UART_SetConfig+0x2d4>)
 8004530:	fba3 1302 	umull	r1, r3, r3, r2
 8004534:	095b      	lsrs	r3, r3, #5
 8004536:	2164      	movs	r1, #100	; 0x64
 8004538:	fb01 f303 	mul.w	r3, r1, r3
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	00db      	lsls	r3, r3, #3
 8004540:	3332      	adds	r3, #50	; 0x32
 8004542:	4a08      	ldr	r2, [pc, #32]	; (8004564 <UART_SetConfig+0x2d4>)
 8004544:	fba2 2303 	umull	r2, r3, r2, r3
 8004548:	095b      	lsrs	r3, r3, #5
 800454a:	f003 0207 	and.w	r2, r3, #7
 800454e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4422      	add	r2, r4
 8004556:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004558:	e105      	b.n	8004766 <UART_SetConfig+0x4d6>
 800455a:	bf00      	nop
 800455c:	40011000 	.word	0x40011000
 8004560:	40011400 	.word	0x40011400
 8004564:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004568:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800456c:	2200      	movs	r2, #0
 800456e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004572:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004576:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800457a:	4642      	mov	r2, r8
 800457c:	464b      	mov	r3, r9
 800457e:	1891      	adds	r1, r2, r2
 8004580:	6239      	str	r1, [r7, #32]
 8004582:	415b      	adcs	r3, r3
 8004584:	627b      	str	r3, [r7, #36]	; 0x24
 8004586:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800458a:	4641      	mov	r1, r8
 800458c:	1854      	adds	r4, r2, r1
 800458e:	4649      	mov	r1, r9
 8004590:	eb43 0501 	adc.w	r5, r3, r1
 8004594:	f04f 0200 	mov.w	r2, #0
 8004598:	f04f 0300 	mov.w	r3, #0
 800459c:	00eb      	lsls	r3, r5, #3
 800459e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045a2:	00e2      	lsls	r2, r4, #3
 80045a4:	4614      	mov	r4, r2
 80045a6:	461d      	mov	r5, r3
 80045a8:	4643      	mov	r3, r8
 80045aa:	18e3      	adds	r3, r4, r3
 80045ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80045b0:	464b      	mov	r3, r9
 80045b2:	eb45 0303 	adc.w	r3, r5, r3
 80045b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80045ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80045c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80045ca:	f04f 0200 	mov.w	r2, #0
 80045ce:	f04f 0300 	mov.w	r3, #0
 80045d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80045d6:	4629      	mov	r1, r5
 80045d8:	008b      	lsls	r3, r1, #2
 80045da:	4621      	mov	r1, r4
 80045dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045e0:	4621      	mov	r1, r4
 80045e2:	008a      	lsls	r2, r1, #2
 80045e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80045e8:	f7fc f9e4 	bl	80009b4 <__aeabi_uldivmod>
 80045ec:	4602      	mov	r2, r0
 80045ee:	460b      	mov	r3, r1
 80045f0:	4b60      	ldr	r3, [pc, #384]	; (8004774 <UART_SetConfig+0x4e4>)
 80045f2:	fba3 2302 	umull	r2, r3, r3, r2
 80045f6:	095b      	lsrs	r3, r3, #5
 80045f8:	011c      	lsls	r4, r3, #4
 80045fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045fe:	2200      	movs	r2, #0
 8004600:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004604:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004608:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800460c:	4642      	mov	r2, r8
 800460e:	464b      	mov	r3, r9
 8004610:	1891      	adds	r1, r2, r2
 8004612:	61b9      	str	r1, [r7, #24]
 8004614:	415b      	adcs	r3, r3
 8004616:	61fb      	str	r3, [r7, #28]
 8004618:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800461c:	4641      	mov	r1, r8
 800461e:	1851      	adds	r1, r2, r1
 8004620:	6139      	str	r1, [r7, #16]
 8004622:	4649      	mov	r1, r9
 8004624:	414b      	adcs	r3, r1
 8004626:	617b      	str	r3, [r7, #20]
 8004628:	f04f 0200 	mov.w	r2, #0
 800462c:	f04f 0300 	mov.w	r3, #0
 8004630:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004634:	4659      	mov	r1, fp
 8004636:	00cb      	lsls	r3, r1, #3
 8004638:	4651      	mov	r1, sl
 800463a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800463e:	4651      	mov	r1, sl
 8004640:	00ca      	lsls	r2, r1, #3
 8004642:	4610      	mov	r0, r2
 8004644:	4619      	mov	r1, r3
 8004646:	4603      	mov	r3, r0
 8004648:	4642      	mov	r2, r8
 800464a:	189b      	adds	r3, r3, r2
 800464c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004650:	464b      	mov	r3, r9
 8004652:	460a      	mov	r2, r1
 8004654:	eb42 0303 	adc.w	r3, r2, r3
 8004658:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800465c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	67bb      	str	r3, [r7, #120]	; 0x78
 8004666:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004668:	f04f 0200 	mov.w	r2, #0
 800466c:	f04f 0300 	mov.w	r3, #0
 8004670:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004674:	4649      	mov	r1, r9
 8004676:	008b      	lsls	r3, r1, #2
 8004678:	4641      	mov	r1, r8
 800467a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800467e:	4641      	mov	r1, r8
 8004680:	008a      	lsls	r2, r1, #2
 8004682:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004686:	f7fc f995 	bl	80009b4 <__aeabi_uldivmod>
 800468a:	4602      	mov	r2, r0
 800468c:	460b      	mov	r3, r1
 800468e:	4b39      	ldr	r3, [pc, #228]	; (8004774 <UART_SetConfig+0x4e4>)
 8004690:	fba3 1302 	umull	r1, r3, r3, r2
 8004694:	095b      	lsrs	r3, r3, #5
 8004696:	2164      	movs	r1, #100	; 0x64
 8004698:	fb01 f303 	mul.w	r3, r1, r3
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	011b      	lsls	r3, r3, #4
 80046a0:	3332      	adds	r3, #50	; 0x32
 80046a2:	4a34      	ldr	r2, [pc, #208]	; (8004774 <UART_SetConfig+0x4e4>)
 80046a4:	fba2 2303 	umull	r2, r3, r2, r3
 80046a8:	095b      	lsrs	r3, r3, #5
 80046aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046ae:	441c      	add	r4, r3
 80046b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046b4:	2200      	movs	r2, #0
 80046b6:	673b      	str	r3, [r7, #112]	; 0x70
 80046b8:	677a      	str	r2, [r7, #116]	; 0x74
 80046ba:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80046be:	4642      	mov	r2, r8
 80046c0:	464b      	mov	r3, r9
 80046c2:	1891      	adds	r1, r2, r2
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	415b      	adcs	r3, r3
 80046c8:	60fb      	str	r3, [r7, #12]
 80046ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046ce:	4641      	mov	r1, r8
 80046d0:	1851      	adds	r1, r2, r1
 80046d2:	6039      	str	r1, [r7, #0]
 80046d4:	4649      	mov	r1, r9
 80046d6:	414b      	adcs	r3, r1
 80046d8:	607b      	str	r3, [r7, #4]
 80046da:	f04f 0200 	mov.w	r2, #0
 80046de:	f04f 0300 	mov.w	r3, #0
 80046e2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80046e6:	4659      	mov	r1, fp
 80046e8:	00cb      	lsls	r3, r1, #3
 80046ea:	4651      	mov	r1, sl
 80046ec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046f0:	4651      	mov	r1, sl
 80046f2:	00ca      	lsls	r2, r1, #3
 80046f4:	4610      	mov	r0, r2
 80046f6:	4619      	mov	r1, r3
 80046f8:	4603      	mov	r3, r0
 80046fa:	4642      	mov	r2, r8
 80046fc:	189b      	adds	r3, r3, r2
 80046fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8004700:	464b      	mov	r3, r9
 8004702:	460a      	mov	r2, r1
 8004704:	eb42 0303 	adc.w	r3, r2, r3
 8004708:	66fb      	str	r3, [r7, #108]	; 0x6c
 800470a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	663b      	str	r3, [r7, #96]	; 0x60
 8004714:	667a      	str	r2, [r7, #100]	; 0x64
 8004716:	f04f 0200 	mov.w	r2, #0
 800471a:	f04f 0300 	mov.w	r3, #0
 800471e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004722:	4649      	mov	r1, r9
 8004724:	008b      	lsls	r3, r1, #2
 8004726:	4641      	mov	r1, r8
 8004728:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800472c:	4641      	mov	r1, r8
 800472e:	008a      	lsls	r2, r1, #2
 8004730:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004734:	f7fc f93e 	bl	80009b4 <__aeabi_uldivmod>
 8004738:	4602      	mov	r2, r0
 800473a:	460b      	mov	r3, r1
 800473c:	4b0d      	ldr	r3, [pc, #52]	; (8004774 <UART_SetConfig+0x4e4>)
 800473e:	fba3 1302 	umull	r1, r3, r3, r2
 8004742:	095b      	lsrs	r3, r3, #5
 8004744:	2164      	movs	r1, #100	; 0x64
 8004746:	fb01 f303 	mul.w	r3, r1, r3
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	011b      	lsls	r3, r3, #4
 800474e:	3332      	adds	r3, #50	; 0x32
 8004750:	4a08      	ldr	r2, [pc, #32]	; (8004774 <UART_SetConfig+0x4e4>)
 8004752:	fba2 2303 	umull	r2, r3, r2, r3
 8004756:	095b      	lsrs	r3, r3, #5
 8004758:	f003 020f 	and.w	r2, r3, #15
 800475c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4422      	add	r2, r4
 8004764:	609a      	str	r2, [r3, #8]
}
 8004766:	bf00      	nop
 8004768:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800476c:	46bd      	mov	sp, r7
 800476e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004772:	bf00      	nop
 8004774:	51eb851f 	.word	0x51eb851f

08004778 <__errno>:
 8004778:	4b01      	ldr	r3, [pc, #4]	; (8004780 <__errno+0x8>)
 800477a:	6818      	ldr	r0, [r3, #0]
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	20000044 	.word	0x20000044

08004784 <__libc_init_array>:
 8004784:	b570      	push	{r4, r5, r6, lr}
 8004786:	4d0d      	ldr	r5, [pc, #52]	; (80047bc <__libc_init_array+0x38>)
 8004788:	4c0d      	ldr	r4, [pc, #52]	; (80047c0 <__libc_init_array+0x3c>)
 800478a:	1b64      	subs	r4, r4, r5
 800478c:	10a4      	asrs	r4, r4, #2
 800478e:	2600      	movs	r6, #0
 8004790:	42a6      	cmp	r6, r4
 8004792:	d109      	bne.n	80047a8 <__libc_init_array+0x24>
 8004794:	4d0b      	ldr	r5, [pc, #44]	; (80047c4 <__libc_init_array+0x40>)
 8004796:	4c0c      	ldr	r4, [pc, #48]	; (80047c8 <__libc_init_array+0x44>)
 8004798:	f000 fd1e 	bl	80051d8 <_init>
 800479c:	1b64      	subs	r4, r4, r5
 800479e:	10a4      	asrs	r4, r4, #2
 80047a0:	2600      	movs	r6, #0
 80047a2:	42a6      	cmp	r6, r4
 80047a4:	d105      	bne.n	80047b2 <__libc_init_array+0x2e>
 80047a6:	bd70      	pop	{r4, r5, r6, pc}
 80047a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80047ac:	4798      	blx	r3
 80047ae:	3601      	adds	r6, #1
 80047b0:	e7ee      	b.n	8004790 <__libc_init_array+0xc>
 80047b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80047b6:	4798      	blx	r3
 80047b8:	3601      	adds	r6, #1
 80047ba:	e7f2      	b.n	80047a2 <__libc_init_array+0x1e>
 80047bc:	08005298 	.word	0x08005298
 80047c0:	08005298 	.word	0x08005298
 80047c4:	08005298 	.word	0x08005298
 80047c8:	0800529c 	.word	0x0800529c

080047cc <memset>:
 80047cc:	4402      	add	r2, r0
 80047ce:	4603      	mov	r3, r0
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d100      	bne.n	80047d6 <memset+0xa>
 80047d4:	4770      	bx	lr
 80047d6:	f803 1b01 	strb.w	r1, [r3], #1
 80047da:	e7f9      	b.n	80047d0 <memset+0x4>

080047dc <_puts_r>:
 80047dc:	b570      	push	{r4, r5, r6, lr}
 80047de:	460e      	mov	r6, r1
 80047e0:	4605      	mov	r5, r0
 80047e2:	b118      	cbz	r0, 80047ec <_puts_r+0x10>
 80047e4:	6983      	ldr	r3, [r0, #24]
 80047e6:	b90b      	cbnz	r3, 80047ec <_puts_r+0x10>
 80047e8:	f000 fa48 	bl	8004c7c <__sinit>
 80047ec:	69ab      	ldr	r3, [r5, #24]
 80047ee:	68ac      	ldr	r4, [r5, #8]
 80047f0:	b913      	cbnz	r3, 80047f8 <_puts_r+0x1c>
 80047f2:	4628      	mov	r0, r5
 80047f4:	f000 fa42 	bl	8004c7c <__sinit>
 80047f8:	4b2c      	ldr	r3, [pc, #176]	; (80048ac <_puts_r+0xd0>)
 80047fa:	429c      	cmp	r4, r3
 80047fc:	d120      	bne.n	8004840 <_puts_r+0x64>
 80047fe:	686c      	ldr	r4, [r5, #4]
 8004800:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004802:	07db      	lsls	r3, r3, #31
 8004804:	d405      	bmi.n	8004812 <_puts_r+0x36>
 8004806:	89a3      	ldrh	r3, [r4, #12]
 8004808:	0598      	lsls	r0, r3, #22
 800480a:	d402      	bmi.n	8004812 <_puts_r+0x36>
 800480c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800480e:	f000 fad3 	bl	8004db8 <__retarget_lock_acquire_recursive>
 8004812:	89a3      	ldrh	r3, [r4, #12]
 8004814:	0719      	lsls	r1, r3, #28
 8004816:	d51d      	bpl.n	8004854 <_puts_r+0x78>
 8004818:	6923      	ldr	r3, [r4, #16]
 800481a:	b1db      	cbz	r3, 8004854 <_puts_r+0x78>
 800481c:	3e01      	subs	r6, #1
 800481e:	68a3      	ldr	r3, [r4, #8]
 8004820:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004824:	3b01      	subs	r3, #1
 8004826:	60a3      	str	r3, [r4, #8]
 8004828:	bb39      	cbnz	r1, 800487a <_puts_r+0x9e>
 800482a:	2b00      	cmp	r3, #0
 800482c:	da38      	bge.n	80048a0 <_puts_r+0xc4>
 800482e:	4622      	mov	r2, r4
 8004830:	210a      	movs	r1, #10
 8004832:	4628      	mov	r0, r5
 8004834:	f000 f848 	bl	80048c8 <__swbuf_r>
 8004838:	3001      	adds	r0, #1
 800483a:	d011      	beq.n	8004860 <_puts_r+0x84>
 800483c:	250a      	movs	r5, #10
 800483e:	e011      	b.n	8004864 <_puts_r+0x88>
 8004840:	4b1b      	ldr	r3, [pc, #108]	; (80048b0 <_puts_r+0xd4>)
 8004842:	429c      	cmp	r4, r3
 8004844:	d101      	bne.n	800484a <_puts_r+0x6e>
 8004846:	68ac      	ldr	r4, [r5, #8]
 8004848:	e7da      	b.n	8004800 <_puts_r+0x24>
 800484a:	4b1a      	ldr	r3, [pc, #104]	; (80048b4 <_puts_r+0xd8>)
 800484c:	429c      	cmp	r4, r3
 800484e:	bf08      	it	eq
 8004850:	68ec      	ldreq	r4, [r5, #12]
 8004852:	e7d5      	b.n	8004800 <_puts_r+0x24>
 8004854:	4621      	mov	r1, r4
 8004856:	4628      	mov	r0, r5
 8004858:	f000 f888 	bl	800496c <__swsetup_r>
 800485c:	2800      	cmp	r0, #0
 800485e:	d0dd      	beq.n	800481c <_puts_r+0x40>
 8004860:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004864:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004866:	07da      	lsls	r2, r3, #31
 8004868:	d405      	bmi.n	8004876 <_puts_r+0x9a>
 800486a:	89a3      	ldrh	r3, [r4, #12]
 800486c:	059b      	lsls	r3, r3, #22
 800486e:	d402      	bmi.n	8004876 <_puts_r+0x9a>
 8004870:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004872:	f000 faa2 	bl	8004dba <__retarget_lock_release_recursive>
 8004876:	4628      	mov	r0, r5
 8004878:	bd70      	pop	{r4, r5, r6, pc}
 800487a:	2b00      	cmp	r3, #0
 800487c:	da04      	bge.n	8004888 <_puts_r+0xac>
 800487e:	69a2      	ldr	r2, [r4, #24]
 8004880:	429a      	cmp	r2, r3
 8004882:	dc06      	bgt.n	8004892 <_puts_r+0xb6>
 8004884:	290a      	cmp	r1, #10
 8004886:	d004      	beq.n	8004892 <_puts_r+0xb6>
 8004888:	6823      	ldr	r3, [r4, #0]
 800488a:	1c5a      	adds	r2, r3, #1
 800488c:	6022      	str	r2, [r4, #0]
 800488e:	7019      	strb	r1, [r3, #0]
 8004890:	e7c5      	b.n	800481e <_puts_r+0x42>
 8004892:	4622      	mov	r2, r4
 8004894:	4628      	mov	r0, r5
 8004896:	f000 f817 	bl	80048c8 <__swbuf_r>
 800489a:	3001      	adds	r0, #1
 800489c:	d1bf      	bne.n	800481e <_puts_r+0x42>
 800489e:	e7df      	b.n	8004860 <_puts_r+0x84>
 80048a0:	6823      	ldr	r3, [r4, #0]
 80048a2:	250a      	movs	r5, #10
 80048a4:	1c5a      	adds	r2, r3, #1
 80048a6:	6022      	str	r2, [r4, #0]
 80048a8:	701d      	strb	r5, [r3, #0]
 80048aa:	e7db      	b.n	8004864 <_puts_r+0x88>
 80048ac:	08005250 	.word	0x08005250
 80048b0:	08005270 	.word	0x08005270
 80048b4:	08005230 	.word	0x08005230

080048b8 <puts>:
 80048b8:	4b02      	ldr	r3, [pc, #8]	; (80048c4 <puts+0xc>)
 80048ba:	4601      	mov	r1, r0
 80048bc:	6818      	ldr	r0, [r3, #0]
 80048be:	f7ff bf8d 	b.w	80047dc <_puts_r>
 80048c2:	bf00      	nop
 80048c4:	20000044 	.word	0x20000044

080048c8 <__swbuf_r>:
 80048c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ca:	460e      	mov	r6, r1
 80048cc:	4614      	mov	r4, r2
 80048ce:	4605      	mov	r5, r0
 80048d0:	b118      	cbz	r0, 80048da <__swbuf_r+0x12>
 80048d2:	6983      	ldr	r3, [r0, #24]
 80048d4:	b90b      	cbnz	r3, 80048da <__swbuf_r+0x12>
 80048d6:	f000 f9d1 	bl	8004c7c <__sinit>
 80048da:	4b21      	ldr	r3, [pc, #132]	; (8004960 <__swbuf_r+0x98>)
 80048dc:	429c      	cmp	r4, r3
 80048de:	d12b      	bne.n	8004938 <__swbuf_r+0x70>
 80048e0:	686c      	ldr	r4, [r5, #4]
 80048e2:	69a3      	ldr	r3, [r4, #24]
 80048e4:	60a3      	str	r3, [r4, #8]
 80048e6:	89a3      	ldrh	r3, [r4, #12]
 80048e8:	071a      	lsls	r2, r3, #28
 80048ea:	d52f      	bpl.n	800494c <__swbuf_r+0x84>
 80048ec:	6923      	ldr	r3, [r4, #16]
 80048ee:	b36b      	cbz	r3, 800494c <__swbuf_r+0x84>
 80048f0:	6923      	ldr	r3, [r4, #16]
 80048f2:	6820      	ldr	r0, [r4, #0]
 80048f4:	1ac0      	subs	r0, r0, r3
 80048f6:	6963      	ldr	r3, [r4, #20]
 80048f8:	b2f6      	uxtb	r6, r6
 80048fa:	4283      	cmp	r3, r0
 80048fc:	4637      	mov	r7, r6
 80048fe:	dc04      	bgt.n	800490a <__swbuf_r+0x42>
 8004900:	4621      	mov	r1, r4
 8004902:	4628      	mov	r0, r5
 8004904:	f000 f926 	bl	8004b54 <_fflush_r>
 8004908:	bb30      	cbnz	r0, 8004958 <__swbuf_r+0x90>
 800490a:	68a3      	ldr	r3, [r4, #8]
 800490c:	3b01      	subs	r3, #1
 800490e:	60a3      	str	r3, [r4, #8]
 8004910:	6823      	ldr	r3, [r4, #0]
 8004912:	1c5a      	adds	r2, r3, #1
 8004914:	6022      	str	r2, [r4, #0]
 8004916:	701e      	strb	r6, [r3, #0]
 8004918:	6963      	ldr	r3, [r4, #20]
 800491a:	3001      	adds	r0, #1
 800491c:	4283      	cmp	r3, r0
 800491e:	d004      	beq.n	800492a <__swbuf_r+0x62>
 8004920:	89a3      	ldrh	r3, [r4, #12]
 8004922:	07db      	lsls	r3, r3, #31
 8004924:	d506      	bpl.n	8004934 <__swbuf_r+0x6c>
 8004926:	2e0a      	cmp	r6, #10
 8004928:	d104      	bne.n	8004934 <__swbuf_r+0x6c>
 800492a:	4621      	mov	r1, r4
 800492c:	4628      	mov	r0, r5
 800492e:	f000 f911 	bl	8004b54 <_fflush_r>
 8004932:	b988      	cbnz	r0, 8004958 <__swbuf_r+0x90>
 8004934:	4638      	mov	r0, r7
 8004936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004938:	4b0a      	ldr	r3, [pc, #40]	; (8004964 <__swbuf_r+0x9c>)
 800493a:	429c      	cmp	r4, r3
 800493c:	d101      	bne.n	8004942 <__swbuf_r+0x7a>
 800493e:	68ac      	ldr	r4, [r5, #8]
 8004940:	e7cf      	b.n	80048e2 <__swbuf_r+0x1a>
 8004942:	4b09      	ldr	r3, [pc, #36]	; (8004968 <__swbuf_r+0xa0>)
 8004944:	429c      	cmp	r4, r3
 8004946:	bf08      	it	eq
 8004948:	68ec      	ldreq	r4, [r5, #12]
 800494a:	e7ca      	b.n	80048e2 <__swbuf_r+0x1a>
 800494c:	4621      	mov	r1, r4
 800494e:	4628      	mov	r0, r5
 8004950:	f000 f80c 	bl	800496c <__swsetup_r>
 8004954:	2800      	cmp	r0, #0
 8004956:	d0cb      	beq.n	80048f0 <__swbuf_r+0x28>
 8004958:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800495c:	e7ea      	b.n	8004934 <__swbuf_r+0x6c>
 800495e:	bf00      	nop
 8004960:	08005250 	.word	0x08005250
 8004964:	08005270 	.word	0x08005270
 8004968:	08005230 	.word	0x08005230

0800496c <__swsetup_r>:
 800496c:	4b32      	ldr	r3, [pc, #200]	; (8004a38 <__swsetup_r+0xcc>)
 800496e:	b570      	push	{r4, r5, r6, lr}
 8004970:	681d      	ldr	r5, [r3, #0]
 8004972:	4606      	mov	r6, r0
 8004974:	460c      	mov	r4, r1
 8004976:	b125      	cbz	r5, 8004982 <__swsetup_r+0x16>
 8004978:	69ab      	ldr	r3, [r5, #24]
 800497a:	b913      	cbnz	r3, 8004982 <__swsetup_r+0x16>
 800497c:	4628      	mov	r0, r5
 800497e:	f000 f97d 	bl	8004c7c <__sinit>
 8004982:	4b2e      	ldr	r3, [pc, #184]	; (8004a3c <__swsetup_r+0xd0>)
 8004984:	429c      	cmp	r4, r3
 8004986:	d10f      	bne.n	80049a8 <__swsetup_r+0x3c>
 8004988:	686c      	ldr	r4, [r5, #4]
 800498a:	89a3      	ldrh	r3, [r4, #12]
 800498c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004990:	0719      	lsls	r1, r3, #28
 8004992:	d42c      	bmi.n	80049ee <__swsetup_r+0x82>
 8004994:	06dd      	lsls	r5, r3, #27
 8004996:	d411      	bmi.n	80049bc <__swsetup_r+0x50>
 8004998:	2309      	movs	r3, #9
 800499a:	6033      	str	r3, [r6, #0]
 800499c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80049a0:	81a3      	strh	r3, [r4, #12]
 80049a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80049a6:	e03e      	b.n	8004a26 <__swsetup_r+0xba>
 80049a8:	4b25      	ldr	r3, [pc, #148]	; (8004a40 <__swsetup_r+0xd4>)
 80049aa:	429c      	cmp	r4, r3
 80049ac:	d101      	bne.n	80049b2 <__swsetup_r+0x46>
 80049ae:	68ac      	ldr	r4, [r5, #8]
 80049b0:	e7eb      	b.n	800498a <__swsetup_r+0x1e>
 80049b2:	4b24      	ldr	r3, [pc, #144]	; (8004a44 <__swsetup_r+0xd8>)
 80049b4:	429c      	cmp	r4, r3
 80049b6:	bf08      	it	eq
 80049b8:	68ec      	ldreq	r4, [r5, #12]
 80049ba:	e7e6      	b.n	800498a <__swsetup_r+0x1e>
 80049bc:	0758      	lsls	r0, r3, #29
 80049be:	d512      	bpl.n	80049e6 <__swsetup_r+0x7a>
 80049c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80049c2:	b141      	cbz	r1, 80049d6 <__swsetup_r+0x6a>
 80049c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80049c8:	4299      	cmp	r1, r3
 80049ca:	d002      	beq.n	80049d2 <__swsetup_r+0x66>
 80049cc:	4630      	mov	r0, r6
 80049ce:	f000 fa5b 	bl	8004e88 <_free_r>
 80049d2:	2300      	movs	r3, #0
 80049d4:	6363      	str	r3, [r4, #52]	; 0x34
 80049d6:	89a3      	ldrh	r3, [r4, #12]
 80049d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80049dc:	81a3      	strh	r3, [r4, #12]
 80049de:	2300      	movs	r3, #0
 80049e0:	6063      	str	r3, [r4, #4]
 80049e2:	6923      	ldr	r3, [r4, #16]
 80049e4:	6023      	str	r3, [r4, #0]
 80049e6:	89a3      	ldrh	r3, [r4, #12]
 80049e8:	f043 0308 	orr.w	r3, r3, #8
 80049ec:	81a3      	strh	r3, [r4, #12]
 80049ee:	6923      	ldr	r3, [r4, #16]
 80049f0:	b94b      	cbnz	r3, 8004a06 <__swsetup_r+0x9a>
 80049f2:	89a3      	ldrh	r3, [r4, #12]
 80049f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80049f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049fc:	d003      	beq.n	8004a06 <__swsetup_r+0x9a>
 80049fe:	4621      	mov	r1, r4
 8004a00:	4630      	mov	r0, r6
 8004a02:	f000 fa01 	bl	8004e08 <__smakebuf_r>
 8004a06:	89a0      	ldrh	r0, [r4, #12]
 8004a08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004a0c:	f010 0301 	ands.w	r3, r0, #1
 8004a10:	d00a      	beq.n	8004a28 <__swsetup_r+0xbc>
 8004a12:	2300      	movs	r3, #0
 8004a14:	60a3      	str	r3, [r4, #8]
 8004a16:	6963      	ldr	r3, [r4, #20]
 8004a18:	425b      	negs	r3, r3
 8004a1a:	61a3      	str	r3, [r4, #24]
 8004a1c:	6923      	ldr	r3, [r4, #16]
 8004a1e:	b943      	cbnz	r3, 8004a32 <__swsetup_r+0xc6>
 8004a20:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004a24:	d1ba      	bne.n	800499c <__swsetup_r+0x30>
 8004a26:	bd70      	pop	{r4, r5, r6, pc}
 8004a28:	0781      	lsls	r1, r0, #30
 8004a2a:	bf58      	it	pl
 8004a2c:	6963      	ldrpl	r3, [r4, #20]
 8004a2e:	60a3      	str	r3, [r4, #8]
 8004a30:	e7f4      	b.n	8004a1c <__swsetup_r+0xb0>
 8004a32:	2000      	movs	r0, #0
 8004a34:	e7f7      	b.n	8004a26 <__swsetup_r+0xba>
 8004a36:	bf00      	nop
 8004a38:	20000044 	.word	0x20000044
 8004a3c:	08005250 	.word	0x08005250
 8004a40:	08005270 	.word	0x08005270
 8004a44:	08005230 	.word	0x08005230

08004a48 <__sflush_r>:
 8004a48:	898a      	ldrh	r2, [r1, #12]
 8004a4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a4e:	4605      	mov	r5, r0
 8004a50:	0710      	lsls	r0, r2, #28
 8004a52:	460c      	mov	r4, r1
 8004a54:	d458      	bmi.n	8004b08 <__sflush_r+0xc0>
 8004a56:	684b      	ldr	r3, [r1, #4]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	dc05      	bgt.n	8004a68 <__sflush_r+0x20>
 8004a5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	dc02      	bgt.n	8004a68 <__sflush_r+0x20>
 8004a62:	2000      	movs	r0, #0
 8004a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a6a:	2e00      	cmp	r6, #0
 8004a6c:	d0f9      	beq.n	8004a62 <__sflush_r+0x1a>
 8004a6e:	2300      	movs	r3, #0
 8004a70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004a74:	682f      	ldr	r7, [r5, #0]
 8004a76:	602b      	str	r3, [r5, #0]
 8004a78:	d032      	beq.n	8004ae0 <__sflush_r+0x98>
 8004a7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004a7c:	89a3      	ldrh	r3, [r4, #12]
 8004a7e:	075a      	lsls	r2, r3, #29
 8004a80:	d505      	bpl.n	8004a8e <__sflush_r+0x46>
 8004a82:	6863      	ldr	r3, [r4, #4]
 8004a84:	1ac0      	subs	r0, r0, r3
 8004a86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004a88:	b10b      	cbz	r3, 8004a8e <__sflush_r+0x46>
 8004a8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a8c:	1ac0      	subs	r0, r0, r3
 8004a8e:	2300      	movs	r3, #0
 8004a90:	4602      	mov	r2, r0
 8004a92:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a94:	6a21      	ldr	r1, [r4, #32]
 8004a96:	4628      	mov	r0, r5
 8004a98:	47b0      	blx	r6
 8004a9a:	1c43      	adds	r3, r0, #1
 8004a9c:	89a3      	ldrh	r3, [r4, #12]
 8004a9e:	d106      	bne.n	8004aae <__sflush_r+0x66>
 8004aa0:	6829      	ldr	r1, [r5, #0]
 8004aa2:	291d      	cmp	r1, #29
 8004aa4:	d82c      	bhi.n	8004b00 <__sflush_r+0xb8>
 8004aa6:	4a2a      	ldr	r2, [pc, #168]	; (8004b50 <__sflush_r+0x108>)
 8004aa8:	40ca      	lsrs	r2, r1
 8004aaa:	07d6      	lsls	r6, r2, #31
 8004aac:	d528      	bpl.n	8004b00 <__sflush_r+0xb8>
 8004aae:	2200      	movs	r2, #0
 8004ab0:	6062      	str	r2, [r4, #4]
 8004ab2:	04d9      	lsls	r1, r3, #19
 8004ab4:	6922      	ldr	r2, [r4, #16]
 8004ab6:	6022      	str	r2, [r4, #0]
 8004ab8:	d504      	bpl.n	8004ac4 <__sflush_r+0x7c>
 8004aba:	1c42      	adds	r2, r0, #1
 8004abc:	d101      	bne.n	8004ac2 <__sflush_r+0x7a>
 8004abe:	682b      	ldr	r3, [r5, #0]
 8004ac0:	b903      	cbnz	r3, 8004ac4 <__sflush_r+0x7c>
 8004ac2:	6560      	str	r0, [r4, #84]	; 0x54
 8004ac4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ac6:	602f      	str	r7, [r5, #0]
 8004ac8:	2900      	cmp	r1, #0
 8004aca:	d0ca      	beq.n	8004a62 <__sflush_r+0x1a>
 8004acc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ad0:	4299      	cmp	r1, r3
 8004ad2:	d002      	beq.n	8004ada <__sflush_r+0x92>
 8004ad4:	4628      	mov	r0, r5
 8004ad6:	f000 f9d7 	bl	8004e88 <_free_r>
 8004ada:	2000      	movs	r0, #0
 8004adc:	6360      	str	r0, [r4, #52]	; 0x34
 8004ade:	e7c1      	b.n	8004a64 <__sflush_r+0x1c>
 8004ae0:	6a21      	ldr	r1, [r4, #32]
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	4628      	mov	r0, r5
 8004ae6:	47b0      	blx	r6
 8004ae8:	1c41      	adds	r1, r0, #1
 8004aea:	d1c7      	bne.n	8004a7c <__sflush_r+0x34>
 8004aec:	682b      	ldr	r3, [r5, #0]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d0c4      	beq.n	8004a7c <__sflush_r+0x34>
 8004af2:	2b1d      	cmp	r3, #29
 8004af4:	d001      	beq.n	8004afa <__sflush_r+0xb2>
 8004af6:	2b16      	cmp	r3, #22
 8004af8:	d101      	bne.n	8004afe <__sflush_r+0xb6>
 8004afa:	602f      	str	r7, [r5, #0]
 8004afc:	e7b1      	b.n	8004a62 <__sflush_r+0x1a>
 8004afe:	89a3      	ldrh	r3, [r4, #12]
 8004b00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b04:	81a3      	strh	r3, [r4, #12]
 8004b06:	e7ad      	b.n	8004a64 <__sflush_r+0x1c>
 8004b08:	690f      	ldr	r7, [r1, #16]
 8004b0a:	2f00      	cmp	r7, #0
 8004b0c:	d0a9      	beq.n	8004a62 <__sflush_r+0x1a>
 8004b0e:	0793      	lsls	r3, r2, #30
 8004b10:	680e      	ldr	r6, [r1, #0]
 8004b12:	bf08      	it	eq
 8004b14:	694b      	ldreq	r3, [r1, #20]
 8004b16:	600f      	str	r7, [r1, #0]
 8004b18:	bf18      	it	ne
 8004b1a:	2300      	movne	r3, #0
 8004b1c:	eba6 0807 	sub.w	r8, r6, r7
 8004b20:	608b      	str	r3, [r1, #8]
 8004b22:	f1b8 0f00 	cmp.w	r8, #0
 8004b26:	dd9c      	ble.n	8004a62 <__sflush_r+0x1a>
 8004b28:	6a21      	ldr	r1, [r4, #32]
 8004b2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004b2c:	4643      	mov	r3, r8
 8004b2e:	463a      	mov	r2, r7
 8004b30:	4628      	mov	r0, r5
 8004b32:	47b0      	blx	r6
 8004b34:	2800      	cmp	r0, #0
 8004b36:	dc06      	bgt.n	8004b46 <__sflush_r+0xfe>
 8004b38:	89a3      	ldrh	r3, [r4, #12]
 8004b3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b3e:	81a3      	strh	r3, [r4, #12]
 8004b40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b44:	e78e      	b.n	8004a64 <__sflush_r+0x1c>
 8004b46:	4407      	add	r7, r0
 8004b48:	eba8 0800 	sub.w	r8, r8, r0
 8004b4c:	e7e9      	b.n	8004b22 <__sflush_r+0xda>
 8004b4e:	bf00      	nop
 8004b50:	20400001 	.word	0x20400001

08004b54 <_fflush_r>:
 8004b54:	b538      	push	{r3, r4, r5, lr}
 8004b56:	690b      	ldr	r3, [r1, #16]
 8004b58:	4605      	mov	r5, r0
 8004b5a:	460c      	mov	r4, r1
 8004b5c:	b913      	cbnz	r3, 8004b64 <_fflush_r+0x10>
 8004b5e:	2500      	movs	r5, #0
 8004b60:	4628      	mov	r0, r5
 8004b62:	bd38      	pop	{r3, r4, r5, pc}
 8004b64:	b118      	cbz	r0, 8004b6e <_fflush_r+0x1a>
 8004b66:	6983      	ldr	r3, [r0, #24]
 8004b68:	b90b      	cbnz	r3, 8004b6e <_fflush_r+0x1a>
 8004b6a:	f000 f887 	bl	8004c7c <__sinit>
 8004b6e:	4b14      	ldr	r3, [pc, #80]	; (8004bc0 <_fflush_r+0x6c>)
 8004b70:	429c      	cmp	r4, r3
 8004b72:	d11b      	bne.n	8004bac <_fflush_r+0x58>
 8004b74:	686c      	ldr	r4, [r5, #4]
 8004b76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d0ef      	beq.n	8004b5e <_fflush_r+0xa>
 8004b7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004b80:	07d0      	lsls	r0, r2, #31
 8004b82:	d404      	bmi.n	8004b8e <_fflush_r+0x3a>
 8004b84:	0599      	lsls	r1, r3, #22
 8004b86:	d402      	bmi.n	8004b8e <_fflush_r+0x3a>
 8004b88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b8a:	f000 f915 	bl	8004db8 <__retarget_lock_acquire_recursive>
 8004b8e:	4628      	mov	r0, r5
 8004b90:	4621      	mov	r1, r4
 8004b92:	f7ff ff59 	bl	8004a48 <__sflush_r>
 8004b96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b98:	07da      	lsls	r2, r3, #31
 8004b9a:	4605      	mov	r5, r0
 8004b9c:	d4e0      	bmi.n	8004b60 <_fflush_r+0xc>
 8004b9e:	89a3      	ldrh	r3, [r4, #12]
 8004ba0:	059b      	lsls	r3, r3, #22
 8004ba2:	d4dd      	bmi.n	8004b60 <_fflush_r+0xc>
 8004ba4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ba6:	f000 f908 	bl	8004dba <__retarget_lock_release_recursive>
 8004baa:	e7d9      	b.n	8004b60 <_fflush_r+0xc>
 8004bac:	4b05      	ldr	r3, [pc, #20]	; (8004bc4 <_fflush_r+0x70>)
 8004bae:	429c      	cmp	r4, r3
 8004bb0:	d101      	bne.n	8004bb6 <_fflush_r+0x62>
 8004bb2:	68ac      	ldr	r4, [r5, #8]
 8004bb4:	e7df      	b.n	8004b76 <_fflush_r+0x22>
 8004bb6:	4b04      	ldr	r3, [pc, #16]	; (8004bc8 <_fflush_r+0x74>)
 8004bb8:	429c      	cmp	r4, r3
 8004bba:	bf08      	it	eq
 8004bbc:	68ec      	ldreq	r4, [r5, #12]
 8004bbe:	e7da      	b.n	8004b76 <_fflush_r+0x22>
 8004bc0:	08005250 	.word	0x08005250
 8004bc4:	08005270 	.word	0x08005270
 8004bc8:	08005230 	.word	0x08005230

08004bcc <std>:
 8004bcc:	2300      	movs	r3, #0
 8004bce:	b510      	push	{r4, lr}
 8004bd0:	4604      	mov	r4, r0
 8004bd2:	e9c0 3300 	strd	r3, r3, [r0]
 8004bd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004bda:	6083      	str	r3, [r0, #8]
 8004bdc:	8181      	strh	r1, [r0, #12]
 8004bde:	6643      	str	r3, [r0, #100]	; 0x64
 8004be0:	81c2      	strh	r2, [r0, #14]
 8004be2:	6183      	str	r3, [r0, #24]
 8004be4:	4619      	mov	r1, r3
 8004be6:	2208      	movs	r2, #8
 8004be8:	305c      	adds	r0, #92	; 0x5c
 8004bea:	f7ff fdef 	bl	80047cc <memset>
 8004bee:	4b05      	ldr	r3, [pc, #20]	; (8004c04 <std+0x38>)
 8004bf0:	6263      	str	r3, [r4, #36]	; 0x24
 8004bf2:	4b05      	ldr	r3, [pc, #20]	; (8004c08 <std+0x3c>)
 8004bf4:	62a3      	str	r3, [r4, #40]	; 0x28
 8004bf6:	4b05      	ldr	r3, [pc, #20]	; (8004c0c <std+0x40>)
 8004bf8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004bfa:	4b05      	ldr	r3, [pc, #20]	; (8004c10 <std+0x44>)
 8004bfc:	6224      	str	r4, [r4, #32]
 8004bfe:	6323      	str	r3, [r4, #48]	; 0x30
 8004c00:	bd10      	pop	{r4, pc}
 8004c02:	bf00      	nop
 8004c04:	08005069 	.word	0x08005069
 8004c08:	0800508b 	.word	0x0800508b
 8004c0c:	080050c3 	.word	0x080050c3
 8004c10:	080050e7 	.word	0x080050e7

08004c14 <_cleanup_r>:
 8004c14:	4901      	ldr	r1, [pc, #4]	; (8004c1c <_cleanup_r+0x8>)
 8004c16:	f000 b8af 	b.w	8004d78 <_fwalk_reent>
 8004c1a:	bf00      	nop
 8004c1c:	08004b55 	.word	0x08004b55

08004c20 <__sfmoreglue>:
 8004c20:	b570      	push	{r4, r5, r6, lr}
 8004c22:	2268      	movs	r2, #104	; 0x68
 8004c24:	1e4d      	subs	r5, r1, #1
 8004c26:	4355      	muls	r5, r2
 8004c28:	460e      	mov	r6, r1
 8004c2a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004c2e:	f000 f997 	bl	8004f60 <_malloc_r>
 8004c32:	4604      	mov	r4, r0
 8004c34:	b140      	cbz	r0, 8004c48 <__sfmoreglue+0x28>
 8004c36:	2100      	movs	r1, #0
 8004c38:	e9c0 1600 	strd	r1, r6, [r0]
 8004c3c:	300c      	adds	r0, #12
 8004c3e:	60a0      	str	r0, [r4, #8]
 8004c40:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004c44:	f7ff fdc2 	bl	80047cc <memset>
 8004c48:	4620      	mov	r0, r4
 8004c4a:	bd70      	pop	{r4, r5, r6, pc}

08004c4c <__sfp_lock_acquire>:
 8004c4c:	4801      	ldr	r0, [pc, #4]	; (8004c54 <__sfp_lock_acquire+0x8>)
 8004c4e:	f000 b8b3 	b.w	8004db8 <__retarget_lock_acquire_recursive>
 8004c52:	bf00      	nop
 8004c54:	200002dd 	.word	0x200002dd

08004c58 <__sfp_lock_release>:
 8004c58:	4801      	ldr	r0, [pc, #4]	; (8004c60 <__sfp_lock_release+0x8>)
 8004c5a:	f000 b8ae 	b.w	8004dba <__retarget_lock_release_recursive>
 8004c5e:	bf00      	nop
 8004c60:	200002dd 	.word	0x200002dd

08004c64 <__sinit_lock_acquire>:
 8004c64:	4801      	ldr	r0, [pc, #4]	; (8004c6c <__sinit_lock_acquire+0x8>)
 8004c66:	f000 b8a7 	b.w	8004db8 <__retarget_lock_acquire_recursive>
 8004c6a:	bf00      	nop
 8004c6c:	200002de 	.word	0x200002de

08004c70 <__sinit_lock_release>:
 8004c70:	4801      	ldr	r0, [pc, #4]	; (8004c78 <__sinit_lock_release+0x8>)
 8004c72:	f000 b8a2 	b.w	8004dba <__retarget_lock_release_recursive>
 8004c76:	bf00      	nop
 8004c78:	200002de 	.word	0x200002de

08004c7c <__sinit>:
 8004c7c:	b510      	push	{r4, lr}
 8004c7e:	4604      	mov	r4, r0
 8004c80:	f7ff fff0 	bl	8004c64 <__sinit_lock_acquire>
 8004c84:	69a3      	ldr	r3, [r4, #24]
 8004c86:	b11b      	cbz	r3, 8004c90 <__sinit+0x14>
 8004c88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c8c:	f7ff bff0 	b.w	8004c70 <__sinit_lock_release>
 8004c90:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004c94:	6523      	str	r3, [r4, #80]	; 0x50
 8004c96:	4b13      	ldr	r3, [pc, #76]	; (8004ce4 <__sinit+0x68>)
 8004c98:	4a13      	ldr	r2, [pc, #76]	; (8004ce8 <__sinit+0x6c>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	62a2      	str	r2, [r4, #40]	; 0x28
 8004c9e:	42a3      	cmp	r3, r4
 8004ca0:	bf04      	itt	eq
 8004ca2:	2301      	moveq	r3, #1
 8004ca4:	61a3      	streq	r3, [r4, #24]
 8004ca6:	4620      	mov	r0, r4
 8004ca8:	f000 f820 	bl	8004cec <__sfp>
 8004cac:	6060      	str	r0, [r4, #4]
 8004cae:	4620      	mov	r0, r4
 8004cb0:	f000 f81c 	bl	8004cec <__sfp>
 8004cb4:	60a0      	str	r0, [r4, #8]
 8004cb6:	4620      	mov	r0, r4
 8004cb8:	f000 f818 	bl	8004cec <__sfp>
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	60e0      	str	r0, [r4, #12]
 8004cc0:	2104      	movs	r1, #4
 8004cc2:	6860      	ldr	r0, [r4, #4]
 8004cc4:	f7ff ff82 	bl	8004bcc <std>
 8004cc8:	68a0      	ldr	r0, [r4, #8]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	2109      	movs	r1, #9
 8004cce:	f7ff ff7d 	bl	8004bcc <std>
 8004cd2:	68e0      	ldr	r0, [r4, #12]
 8004cd4:	2202      	movs	r2, #2
 8004cd6:	2112      	movs	r1, #18
 8004cd8:	f7ff ff78 	bl	8004bcc <std>
 8004cdc:	2301      	movs	r3, #1
 8004cde:	61a3      	str	r3, [r4, #24]
 8004ce0:	e7d2      	b.n	8004c88 <__sinit+0xc>
 8004ce2:	bf00      	nop
 8004ce4:	0800522c 	.word	0x0800522c
 8004ce8:	08004c15 	.word	0x08004c15

08004cec <__sfp>:
 8004cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cee:	4607      	mov	r7, r0
 8004cf0:	f7ff ffac 	bl	8004c4c <__sfp_lock_acquire>
 8004cf4:	4b1e      	ldr	r3, [pc, #120]	; (8004d70 <__sfp+0x84>)
 8004cf6:	681e      	ldr	r6, [r3, #0]
 8004cf8:	69b3      	ldr	r3, [r6, #24]
 8004cfa:	b913      	cbnz	r3, 8004d02 <__sfp+0x16>
 8004cfc:	4630      	mov	r0, r6
 8004cfe:	f7ff ffbd 	bl	8004c7c <__sinit>
 8004d02:	3648      	adds	r6, #72	; 0x48
 8004d04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004d08:	3b01      	subs	r3, #1
 8004d0a:	d503      	bpl.n	8004d14 <__sfp+0x28>
 8004d0c:	6833      	ldr	r3, [r6, #0]
 8004d0e:	b30b      	cbz	r3, 8004d54 <__sfp+0x68>
 8004d10:	6836      	ldr	r6, [r6, #0]
 8004d12:	e7f7      	b.n	8004d04 <__sfp+0x18>
 8004d14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004d18:	b9d5      	cbnz	r5, 8004d50 <__sfp+0x64>
 8004d1a:	4b16      	ldr	r3, [pc, #88]	; (8004d74 <__sfp+0x88>)
 8004d1c:	60e3      	str	r3, [r4, #12]
 8004d1e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004d22:	6665      	str	r5, [r4, #100]	; 0x64
 8004d24:	f000 f847 	bl	8004db6 <__retarget_lock_init_recursive>
 8004d28:	f7ff ff96 	bl	8004c58 <__sfp_lock_release>
 8004d2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004d30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004d34:	6025      	str	r5, [r4, #0]
 8004d36:	61a5      	str	r5, [r4, #24]
 8004d38:	2208      	movs	r2, #8
 8004d3a:	4629      	mov	r1, r5
 8004d3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004d40:	f7ff fd44 	bl	80047cc <memset>
 8004d44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004d48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004d4c:	4620      	mov	r0, r4
 8004d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d50:	3468      	adds	r4, #104	; 0x68
 8004d52:	e7d9      	b.n	8004d08 <__sfp+0x1c>
 8004d54:	2104      	movs	r1, #4
 8004d56:	4638      	mov	r0, r7
 8004d58:	f7ff ff62 	bl	8004c20 <__sfmoreglue>
 8004d5c:	4604      	mov	r4, r0
 8004d5e:	6030      	str	r0, [r6, #0]
 8004d60:	2800      	cmp	r0, #0
 8004d62:	d1d5      	bne.n	8004d10 <__sfp+0x24>
 8004d64:	f7ff ff78 	bl	8004c58 <__sfp_lock_release>
 8004d68:	230c      	movs	r3, #12
 8004d6a:	603b      	str	r3, [r7, #0]
 8004d6c:	e7ee      	b.n	8004d4c <__sfp+0x60>
 8004d6e:	bf00      	nop
 8004d70:	0800522c 	.word	0x0800522c
 8004d74:	ffff0001 	.word	0xffff0001

08004d78 <_fwalk_reent>:
 8004d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d7c:	4606      	mov	r6, r0
 8004d7e:	4688      	mov	r8, r1
 8004d80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004d84:	2700      	movs	r7, #0
 8004d86:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004d8a:	f1b9 0901 	subs.w	r9, r9, #1
 8004d8e:	d505      	bpl.n	8004d9c <_fwalk_reent+0x24>
 8004d90:	6824      	ldr	r4, [r4, #0]
 8004d92:	2c00      	cmp	r4, #0
 8004d94:	d1f7      	bne.n	8004d86 <_fwalk_reent+0xe>
 8004d96:	4638      	mov	r0, r7
 8004d98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d9c:	89ab      	ldrh	r3, [r5, #12]
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d907      	bls.n	8004db2 <_fwalk_reent+0x3a>
 8004da2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004da6:	3301      	adds	r3, #1
 8004da8:	d003      	beq.n	8004db2 <_fwalk_reent+0x3a>
 8004daa:	4629      	mov	r1, r5
 8004dac:	4630      	mov	r0, r6
 8004dae:	47c0      	blx	r8
 8004db0:	4307      	orrs	r7, r0
 8004db2:	3568      	adds	r5, #104	; 0x68
 8004db4:	e7e9      	b.n	8004d8a <_fwalk_reent+0x12>

08004db6 <__retarget_lock_init_recursive>:
 8004db6:	4770      	bx	lr

08004db8 <__retarget_lock_acquire_recursive>:
 8004db8:	4770      	bx	lr

08004dba <__retarget_lock_release_recursive>:
 8004dba:	4770      	bx	lr

08004dbc <__swhatbuf_r>:
 8004dbc:	b570      	push	{r4, r5, r6, lr}
 8004dbe:	460e      	mov	r6, r1
 8004dc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dc4:	2900      	cmp	r1, #0
 8004dc6:	b096      	sub	sp, #88	; 0x58
 8004dc8:	4614      	mov	r4, r2
 8004dca:	461d      	mov	r5, r3
 8004dcc:	da08      	bge.n	8004de0 <__swhatbuf_r+0x24>
 8004dce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	602a      	str	r2, [r5, #0]
 8004dd6:	061a      	lsls	r2, r3, #24
 8004dd8:	d410      	bmi.n	8004dfc <__swhatbuf_r+0x40>
 8004dda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dde:	e00e      	b.n	8004dfe <__swhatbuf_r+0x42>
 8004de0:	466a      	mov	r2, sp
 8004de2:	f000 f9a7 	bl	8005134 <_fstat_r>
 8004de6:	2800      	cmp	r0, #0
 8004de8:	dbf1      	blt.n	8004dce <__swhatbuf_r+0x12>
 8004dea:	9a01      	ldr	r2, [sp, #4]
 8004dec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004df0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004df4:	425a      	negs	r2, r3
 8004df6:	415a      	adcs	r2, r3
 8004df8:	602a      	str	r2, [r5, #0]
 8004dfa:	e7ee      	b.n	8004dda <__swhatbuf_r+0x1e>
 8004dfc:	2340      	movs	r3, #64	; 0x40
 8004dfe:	2000      	movs	r0, #0
 8004e00:	6023      	str	r3, [r4, #0]
 8004e02:	b016      	add	sp, #88	; 0x58
 8004e04:	bd70      	pop	{r4, r5, r6, pc}
	...

08004e08 <__smakebuf_r>:
 8004e08:	898b      	ldrh	r3, [r1, #12]
 8004e0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004e0c:	079d      	lsls	r5, r3, #30
 8004e0e:	4606      	mov	r6, r0
 8004e10:	460c      	mov	r4, r1
 8004e12:	d507      	bpl.n	8004e24 <__smakebuf_r+0x1c>
 8004e14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004e18:	6023      	str	r3, [r4, #0]
 8004e1a:	6123      	str	r3, [r4, #16]
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	6163      	str	r3, [r4, #20]
 8004e20:	b002      	add	sp, #8
 8004e22:	bd70      	pop	{r4, r5, r6, pc}
 8004e24:	ab01      	add	r3, sp, #4
 8004e26:	466a      	mov	r2, sp
 8004e28:	f7ff ffc8 	bl	8004dbc <__swhatbuf_r>
 8004e2c:	9900      	ldr	r1, [sp, #0]
 8004e2e:	4605      	mov	r5, r0
 8004e30:	4630      	mov	r0, r6
 8004e32:	f000 f895 	bl	8004f60 <_malloc_r>
 8004e36:	b948      	cbnz	r0, 8004e4c <__smakebuf_r+0x44>
 8004e38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e3c:	059a      	lsls	r2, r3, #22
 8004e3e:	d4ef      	bmi.n	8004e20 <__smakebuf_r+0x18>
 8004e40:	f023 0303 	bic.w	r3, r3, #3
 8004e44:	f043 0302 	orr.w	r3, r3, #2
 8004e48:	81a3      	strh	r3, [r4, #12]
 8004e4a:	e7e3      	b.n	8004e14 <__smakebuf_r+0xc>
 8004e4c:	4b0d      	ldr	r3, [pc, #52]	; (8004e84 <__smakebuf_r+0x7c>)
 8004e4e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004e50:	89a3      	ldrh	r3, [r4, #12]
 8004e52:	6020      	str	r0, [r4, #0]
 8004e54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e58:	81a3      	strh	r3, [r4, #12]
 8004e5a:	9b00      	ldr	r3, [sp, #0]
 8004e5c:	6163      	str	r3, [r4, #20]
 8004e5e:	9b01      	ldr	r3, [sp, #4]
 8004e60:	6120      	str	r0, [r4, #16]
 8004e62:	b15b      	cbz	r3, 8004e7c <__smakebuf_r+0x74>
 8004e64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e68:	4630      	mov	r0, r6
 8004e6a:	f000 f975 	bl	8005158 <_isatty_r>
 8004e6e:	b128      	cbz	r0, 8004e7c <__smakebuf_r+0x74>
 8004e70:	89a3      	ldrh	r3, [r4, #12]
 8004e72:	f023 0303 	bic.w	r3, r3, #3
 8004e76:	f043 0301 	orr.w	r3, r3, #1
 8004e7a:	81a3      	strh	r3, [r4, #12]
 8004e7c:	89a0      	ldrh	r0, [r4, #12]
 8004e7e:	4305      	orrs	r5, r0
 8004e80:	81a5      	strh	r5, [r4, #12]
 8004e82:	e7cd      	b.n	8004e20 <__smakebuf_r+0x18>
 8004e84:	08004c15 	.word	0x08004c15

08004e88 <_free_r>:
 8004e88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e8a:	2900      	cmp	r1, #0
 8004e8c:	d044      	beq.n	8004f18 <_free_r+0x90>
 8004e8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e92:	9001      	str	r0, [sp, #4]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	f1a1 0404 	sub.w	r4, r1, #4
 8004e9a:	bfb8      	it	lt
 8004e9c:	18e4      	addlt	r4, r4, r3
 8004e9e:	f000 f97d 	bl	800519c <__malloc_lock>
 8004ea2:	4a1e      	ldr	r2, [pc, #120]	; (8004f1c <_free_r+0x94>)
 8004ea4:	9801      	ldr	r0, [sp, #4]
 8004ea6:	6813      	ldr	r3, [r2, #0]
 8004ea8:	b933      	cbnz	r3, 8004eb8 <_free_r+0x30>
 8004eaa:	6063      	str	r3, [r4, #4]
 8004eac:	6014      	str	r4, [r2, #0]
 8004eae:	b003      	add	sp, #12
 8004eb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004eb4:	f000 b978 	b.w	80051a8 <__malloc_unlock>
 8004eb8:	42a3      	cmp	r3, r4
 8004eba:	d908      	bls.n	8004ece <_free_r+0x46>
 8004ebc:	6825      	ldr	r5, [r4, #0]
 8004ebe:	1961      	adds	r1, r4, r5
 8004ec0:	428b      	cmp	r3, r1
 8004ec2:	bf01      	itttt	eq
 8004ec4:	6819      	ldreq	r1, [r3, #0]
 8004ec6:	685b      	ldreq	r3, [r3, #4]
 8004ec8:	1949      	addeq	r1, r1, r5
 8004eca:	6021      	streq	r1, [r4, #0]
 8004ecc:	e7ed      	b.n	8004eaa <_free_r+0x22>
 8004ece:	461a      	mov	r2, r3
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	b10b      	cbz	r3, 8004ed8 <_free_r+0x50>
 8004ed4:	42a3      	cmp	r3, r4
 8004ed6:	d9fa      	bls.n	8004ece <_free_r+0x46>
 8004ed8:	6811      	ldr	r1, [r2, #0]
 8004eda:	1855      	adds	r5, r2, r1
 8004edc:	42a5      	cmp	r5, r4
 8004ede:	d10b      	bne.n	8004ef8 <_free_r+0x70>
 8004ee0:	6824      	ldr	r4, [r4, #0]
 8004ee2:	4421      	add	r1, r4
 8004ee4:	1854      	adds	r4, r2, r1
 8004ee6:	42a3      	cmp	r3, r4
 8004ee8:	6011      	str	r1, [r2, #0]
 8004eea:	d1e0      	bne.n	8004eae <_free_r+0x26>
 8004eec:	681c      	ldr	r4, [r3, #0]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	6053      	str	r3, [r2, #4]
 8004ef2:	4421      	add	r1, r4
 8004ef4:	6011      	str	r1, [r2, #0]
 8004ef6:	e7da      	b.n	8004eae <_free_r+0x26>
 8004ef8:	d902      	bls.n	8004f00 <_free_r+0x78>
 8004efa:	230c      	movs	r3, #12
 8004efc:	6003      	str	r3, [r0, #0]
 8004efe:	e7d6      	b.n	8004eae <_free_r+0x26>
 8004f00:	6825      	ldr	r5, [r4, #0]
 8004f02:	1961      	adds	r1, r4, r5
 8004f04:	428b      	cmp	r3, r1
 8004f06:	bf04      	itt	eq
 8004f08:	6819      	ldreq	r1, [r3, #0]
 8004f0a:	685b      	ldreq	r3, [r3, #4]
 8004f0c:	6063      	str	r3, [r4, #4]
 8004f0e:	bf04      	itt	eq
 8004f10:	1949      	addeq	r1, r1, r5
 8004f12:	6021      	streq	r1, [r4, #0]
 8004f14:	6054      	str	r4, [r2, #4]
 8004f16:	e7ca      	b.n	8004eae <_free_r+0x26>
 8004f18:	b003      	add	sp, #12
 8004f1a:	bd30      	pop	{r4, r5, pc}
 8004f1c:	200002e0 	.word	0x200002e0

08004f20 <sbrk_aligned>:
 8004f20:	b570      	push	{r4, r5, r6, lr}
 8004f22:	4e0e      	ldr	r6, [pc, #56]	; (8004f5c <sbrk_aligned+0x3c>)
 8004f24:	460c      	mov	r4, r1
 8004f26:	6831      	ldr	r1, [r6, #0]
 8004f28:	4605      	mov	r5, r0
 8004f2a:	b911      	cbnz	r1, 8004f32 <sbrk_aligned+0x12>
 8004f2c:	f000 f88c 	bl	8005048 <_sbrk_r>
 8004f30:	6030      	str	r0, [r6, #0]
 8004f32:	4621      	mov	r1, r4
 8004f34:	4628      	mov	r0, r5
 8004f36:	f000 f887 	bl	8005048 <_sbrk_r>
 8004f3a:	1c43      	adds	r3, r0, #1
 8004f3c:	d00a      	beq.n	8004f54 <sbrk_aligned+0x34>
 8004f3e:	1cc4      	adds	r4, r0, #3
 8004f40:	f024 0403 	bic.w	r4, r4, #3
 8004f44:	42a0      	cmp	r0, r4
 8004f46:	d007      	beq.n	8004f58 <sbrk_aligned+0x38>
 8004f48:	1a21      	subs	r1, r4, r0
 8004f4a:	4628      	mov	r0, r5
 8004f4c:	f000 f87c 	bl	8005048 <_sbrk_r>
 8004f50:	3001      	adds	r0, #1
 8004f52:	d101      	bne.n	8004f58 <sbrk_aligned+0x38>
 8004f54:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004f58:	4620      	mov	r0, r4
 8004f5a:	bd70      	pop	{r4, r5, r6, pc}
 8004f5c:	200002e4 	.word	0x200002e4

08004f60 <_malloc_r>:
 8004f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f64:	1ccd      	adds	r5, r1, #3
 8004f66:	f025 0503 	bic.w	r5, r5, #3
 8004f6a:	3508      	adds	r5, #8
 8004f6c:	2d0c      	cmp	r5, #12
 8004f6e:	bf38      	it	cc
 8004f70:	250c      	movcc	r5, #12
 8004f72:	2d00      	cmp	r5, #0
 8004f74:	4607      	mov	r7, r0
 8004f76:	db01      	blt.n	8004f7c <_malloc_r+0x1c>
 8004f78:	42a9      	cmp	r1, r5
 8004f7a:	d905      	bls.n	8004f88 <_malloc_r+0x28>
 8004f7c:	230c      	movs	r3, #12
 8004f7e:	603b      	str	r3, [r7, #0]
 8004f80:	2600      	movs	r6, #0
 8004f82:	4630      	mov	r0, r6
 8004f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f88:	4e2e      	ldr	r6, [pc, #184]	; (8005044 <_malloc_r+0xe4>)
 8004f8a:	f000 f907 	bl	800519c <__malloc_lock>
 8004f8e:	6833      	ldr	r3, [r6, #0]
 8004f90:	461c      	mov	r4, r3
 8004f92:	bb34      	cbnz	r4, 8004fe2 <_malloc_r+0x82>
 8004f94:	4629      	mov	r1, r5
 8004f96:	4638      	mov	r0, r7
 8004f98:	f7ff ffc2 	bl	8004f20 <sbrk_aligned>
 8004f9c:	1c43      	adds	r3, r0, #1
 8004f9e:	4604      	mov	r4, r0
 8004fa0:	d14d      	bne.n	800503e <_malloc_r+0xde>
 8004fa2:	6834      	ldr	r4, [r6, #0]
 8004fa4:	4626      	mov	r6, r4
 8004fa6:	2e00      	cmp	r6, #0
 8004fa8:	d140      	bne.n	800502c <_malloc_r+0xcc>
 8004faa:	6823      	ldr	r3, [r4, #0]
 8004fac:	4631      	mov	r1, r6
 8004fae:	4638      	mov	r0, r7
 8004fb0:	eb04 0803 	add.w	r8, r4, r3
 8004fb4:	f000 f848 	bl	8005048 <_sbrk_r>
 8004fb8:	4580      	cmp	r8, r0
 8004fba:	d13a      	bne.n	8005032 <_malloc_r+0xd2>
 8004fbc:	6821      	ldr	r1, [r4, #0]
 8004fbe:	3503      	adds	r5, #3
 8004fc0:	1a6d      	subs	r5, r5, r1
 8004fc2:	f025 0503 	bic.w	r5, r5, #3
 8004fc6:	3508      	adds	r5, #8
 8004fc8:	2d0c      	cmp	r5, #12
 8004fca:	bf38      	it	cc
 8004fcc:	250c      	movcc	r5, #12
 8004fce:	4629      	mov	r1, r5
 8004fd0:	4638      	mov	r0, r7
 8004fd2:	f7ff ffa5 	bl	8004f20 <sbrk_aligned>
 8004fd6:	3001      	adds	r0, #1
 8004fd8:	d02b      	beq.n	8005032 <_malloc_r+0xd2>
 8004fda:	6823      	ldr	r3, [r4, #0]
 8004fdc:	442b      	add	r3, r5
 8004fde:	6023      	str	r3, [r4, #0]
 8004fe0:	e00e      	b.n	8005000 <_malloc_r+0xa0>
 8004fe2:	6822      	ldr	r2, [r4, #0]
 8004fe4:	1b52      	subs	r2, r2, r5
 8004fe6:	d41e      	bmi.n	8005026 <_malloc_r+0xc6>
 8004fe8:	2a0b      	cmp	r2, #11
 8004fea:	d916      	bls.n	800501a <_malloc_r+0xba>
 8004fec:	1961      	adds	r1, r4, r5
 8004fee:	42a3      	cmp	r3, r4
 8004ff0:	6025      	str	r5, [r4, #0]
 8004ff2:	bf18      	it	ne
 8004ff4:	6059      	strne	r1, [r3, #4]
 8004ff6:	6863      	ldr	r3, [r4, #4]
 8004ff8:	bf08      	it	eq
 8004ffa:	6031      	streq	r1, [r6, #0]
 8004ffc:	5162      	str	r2, [r4, r5]
 8004ffe:	604b      	str	r3, [r1, #4]
 8005000:	4638      	mov	r0, r7
 8005002:	f104 060b 	add.w	r6, r4, #11
 8005006:	f000 f8cf 	bl	80051a8 <__malloc_unlock>
 800500a:	f026 0607 	bic.w	r6, r6, #7
 800500e:	1d23      	adds	r3, r4, #4
 8005010:	1af2      	subs	r2, r6, r3
 8005012:	d0b6      	beq.n	8004f82 <_malloc_r+0x22>
 8005014:	1b9b      	subs	r3, r3, r6
 8005016:	50a3      	str	r3, [r4, r2]
 8005018:	e7b3      	b.n	8004f82 <_malloc_r+0x22>
 800501a:	6862      	ldr	r2, [r4, #4]
 800501c:	42a3      	cmp	r3, r4
 800501e:	bf0c      	ite	eq
 8005020:	6032      	streq	r2, [r6, #0]
 8005022:	605a      	strne	r2, [r3, #4]
 8005024:	e7ec      	b.n	8005000 <_malloc_r+0xa0>
 8005026:	4623      	mov	r3, r4
 8005028:	6864      	ldr	r4, [r4, #4]
 800502a:	e7b2      	b.n	8004f92 <_malloc_r+0x32>
 800502c:	4634      	mov	r4, r6
 800502e:	6876      	ldr	r6, [r6, #4]
 8005030:	e7b9      	b.n	8004fa6 <_malloc_r+0x46>
 8005032:	230c      	movs	r3, #12
 8005034:	603b      	str	r3, [r7, #0]
 8005036:	4638      	mov	r0, r7
 8005038:	f000 f8b6 	bl	80051a8 <__malloc_unlock>
 800503c:	e7a1      	b.n	8004f82 <_malloc_r+0x22>
 800503e:	6025      	str	r5, [r4, #0]
 8005040:	e7de      	b.n	8005000 <_malloc_r+0xa0>
 8005042:	bf00      	nop
 8005044:	200002e0 	.word	0x200002e0

08005048 <_sbrk_r>:
 8005048:	b538      	push	{r3, r4, r5, lr}
 800504a:	4d06      	ldr	r5, [pc, #24]	; (8005064 <_sbrk_r+0x1c>)
 800504c:	2300      	movs	r3, #0
 800504e:	4604      	mov	r4, r0
 8005050:	4608      	mov	r0, r1
 8005052:	602b      	str	r3, [r5, #0]
 8005054:	f7fc fb4e 	bl	80016f4 <_sbrk>
 8005058:	1c43      	adds	r3, r0, #1
 800505a:	d102      	bne.n	8005062 <_sbrk_r+0x1a>
 800505c:	682b      	ldr	r3, [r5, #0]
 800505e:	b103      	cbz	r3, 8005062 <_sbrk_r+0x1a>
 8005060:	6023      	str	r3, [r4, #0]
 8005062:	bd38      	pop	{r3, r4, r5, pc}
 8005064:	200002e8 	.word	0x200002e8

08005068 <__sread>:
 8005068:	b510      	push	{r4, lr}
 800506a:	460c      	mov	r4, r1
 800506c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005070:	f000 f8a0 	bl	80051b4 <_read_r>
 8005074:	2800      	cmp	r0, #0
 8005076:	bfab      	itete	ge
 8005078:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800507a:	89a3      	ldrhlt	r3, [r4, #12]
 800507c:	181b      	addge	r3, r3, r0
 800507e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005082:	bfac      	ite	ge
 8005084:	6563      	strge	r3, [r4, #84]	; 0x54
 8005086:	81a3      	strhlt	r3, [r4, #12]
 8005088:	bd10      	pop	{r4, pc}

0800508a <__swrite>:
 800508a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800508e:	461f      	mov	r7, r3
 8005090:	898b      	ldrh	r3, [r1, #12]
 8005092:	05db      	lsls	r3, r3, #23
 8005094:	4605      	mov	r5, r0
 8005096:	460c      	mov	r4, r1
 8005098:	4616      	mov	r6, r2
 800509a:	d505      	bpl.n	80050a8 <__swrite+0x1e>
 800509c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050a0:	2302      	movs	r3, #2
 80050a2:	2200      	movs	r2, #0
 80050a4:	f000 f868 	bl	8005178 <_lseek_r>
 80050a8:	89a3      	ldrh	r3, [r4, #12]
 80050aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050b2:	81a3      	strh	r3, [r4, #12]
 80050b4:	4632      	mov	r2, r6
 80050b6:	463b      	mov	r3, r7
 80050b8:	4628      	mov	r0, r5
 80050ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050be:	f000 b817 	b.w	80050f0 <_write_r>

080050c2 <__sseek>:
 80050c2:	b510      	push	{r4, lr}
 80050c4:	460c      	mov	r4, r1
 80050c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050ca:	f000 f855 	bl	8005178 <_lseek_r>
 80050ce:	1c43      	adds	r3, r0, #1
 80050d0:	89a3      	ldrh	r3, [r4, #12]
 80050d2:	bf15      	itete	ne
 80050d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80050d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80050da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80050de:	81a3      	strheq	r3, [r4, #12]
 80050e0:	bf18      	it	ne
 80050e2:	81a3      	strhne	r3, [r4, #12]
 80050e4:	bd10      	pop	{r4, pc}

080050e6 <__sclose>:
 80050e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050ea:	f000 b813 	b.w	8005114 <_close_r>
	...

080050f0 <_write_r>:
 80050f0:	b538      	push	{r3, r4, r5, lr}
 80050f2:	4d07      	ldr	r5, [pc, #28]	; (8005110 <_write_r+0x20>)
 80050f4:	4604      	mov	r4, r0
 80050f6:	4608      	mov	r0, r1
 80050f8:	4611      	mov	r1, r2
 80050fa:	2200      	movs	r2, #0
 80050fc:	602a      	str	r2, [r5, #0]
 80050fe:	461a      	mov	r2, r3
 8005100:	f7fb fdda 	bl	8000cb8 <_write>
 8005104:	1c43      	adds	r3, r0, #1
 8005106:	d102      	bne.n	800510e <_write_r+0x1e>
 8005108:	682b      	ldr	r3, [r5, #0]
 800510a:	b103      	cbz	r3, 800510e <_write_r+0x1e>
 800510c:	6023      	str	r3, [r4, #0]
 800510e:	bd38      	pop	{r3, r4, r5, pc}
 8005110:	200002e8 	.word	0x200002e8

08005114 <_close_r>:
 8005114:	b538      	push	{r3, r4, r5, lr}
 8005116:	4d06      	ldr	r5, [pc, #24]	; (8005130 <_close_r+0x1c>)
 8005118:	2300      	movs	r3, #0
 800511a:	4604      	mov	r4, r0
 800511c:	4608      	mov	r0, r1
 800511e:	602b      	str	r3, [r5, #0]
 8005120:	f7fc fab3 	bl	800168a <_close>
 8005124:	1c43      	adds	r3, r0, #1
 8005126:	d102      	bne.n	800512e <_close_r+0x1a>
 8005128:	682b      	ldr	r3, [r5, #0]
 800512a:	b103      	cbz	r3, 800512e <_close_r+0x1a>
 800512c:	6023      	str	r3, [r4, #0]
 800512e:	bd38      	pop	{r3, r4, r5, pc}
 8005130:	200002e8 	.word	0x200002e8

08005134 <_fstat_r>:
 8005134:	b538      	push	{r3, r4, r5, lr}
 8005136:	4d07      	ldr	r5, [pc, #28]	; (8005154 <_fstat_r+0x20>)
 8005138:	2300      	movs	r3, #0
 800513a:	4604      	mov	r4, r0
 800513c:	4608      	mov	r0, r1
 800513e:	4611      	mov	r1, r2
 8005140:	602b      	str	r3, [r5, #0]
 8005142:	f7fc faae 	bl	80016a2 <_fstat>
 8005146:	1c43      	adds	r3, r0, #1
 8005148:	d102      	bne.n	8005150 <_fstat_r+0x1c>
 800514a:	682b      	ldr	r3, [r5, #0]
 800514c:	b103      	cbz	r3, 8005150 <_fstat_r+0x1c>
 800514e:	6023      	str	r3, [r4, #0]
 8005150:	bd38      	pop	{r3, r4, r5, pc}
 8005152:	bf00      	nop
 8005154:	200002e8 	.word	0x200002e8

08005158 <_isatty_r>:
 8005158:	b538      	push	{r3, r4, r5, lr}
 800515a:	4d06      	ldr	r5, [pc, #24]	; (8005174 <_isatty_r+0x1c>)
 800515c:	2300      	movs	r3, #0
 800515e:	4604      	mov	r4, r0
 8005160:	4608      	mov	r0, r1
 8005162:	602b      	str	r3, [r5, #0]
 8005164:	f7fc faad 	bl	80016c2 <_isatty>
 8005168:	1c43      	adds	r3, r0, #1
 800516a:	d102      	bne.n	8005172 <_isatty_r+0x1a>
 800516c:	682b      	ldr	r3, [r5, #0]
 800516e:	b103      	cbz	r3, 8005172 <_isatty_r+0x1a>
 8005170:	6023      	str	r3, [r4, #0]
 8005172:	bd38      	pop	{r3, r4, r5, pc}
 8005174:	200002e8 	.word	0x200002e8

08005178 <_lseek_r>:
 8005178:	b538      	push	{r3, r4, r5, lr}
 800517a:	4d07      	ldr	r5, [pc, #28]	; (8005198 <_lseek_r+0x20>)
 800517c:	4604      	mov	r4, r0
 800517e:	4608      	mov	r0, r1
 8005180:	4611      	mov	r1, r2
 8005182:	2200      	movs	r2, #0
 8005184:	602a      	str	r2, [r5, #0]
 8005186:	461a      	mov	r2, r3
 8005188:	f7fc faa6 	bl	80016d8 <_lseek>
 800518c:	1c43      	adds	r3, r0, #1
 800518e:	d102      	bne.n	8005196 <_lseek_r+0x1e>
 8005190:	682b      	ldr	r3, [r5, #0]
 8005192:	b103      	cbz	r3, 8005196 <_lseek_r+0x1e>
 8005194:	6023      	str	r3, [r4, #0]
 8005196:	bd38      	pop	{r3, r4, r5, pc}
 8005198:	200002e8 	.word	0x200002e8

0800519c <__malloc_lock>:
 800519c:	4801      	ldr	r0, [pc, #4]	; (80051a4 <__malloc_lock+0x8>)
 800519e:	f7ff be0b 	b.w	8004db8 <__retarget_lock_acquire_recursive>
 80051a2:	bf00      	nop
 80051a4:	200002dc 	.word	0x200002dc

080051a8 <__malloc_unlock>:
 80051a8:	4801      	ldr	r0, [pc, #4]	; (80051b0 <__malloc_unlock+0x8>)
 80051aa:	f7ff be06 	b.w	8004dba <__retarget_lock_release_recursive>
 80051ae:	bf00      	nop
 80051b0:	200002dc 	.word	0x200002dc

080051b4 <_read_r>:
 80051b4:	b538      	push	{r3, r4, r5, lr}
 80051b6:	4d07      	ldr	r5, [pc, #28]	; (80051d4 <_read_r+0x20>)
 80051b8:	4604      	mov	r4, r0
 80051ba:	4608      	mov	r0, r1
 80051bc:	4611      	mov	r1, r2
 80051be:	2200      	movs	r2, #0
 80051c0:	602a      	str	r2, [r5, #0]
 80051c2:	461a      	mov	r2, r3
 80051c4:	f7fc fa44 	bl	8001650 <_read>
 80051c8:	1c43      	adds	r3, r0, #1
 80051ca:	d102      	bne.n	80051d2 <_read_r+0x1e>
 80051cc:	682b      	ldr	r3, [r5, #0]
 80051ce:	b103      	cbz	r3, 80051d2 <_read_r+0x1e>
 80051d0:	6023      	str	r3, [r4, #0]
 80051d2:	bd38      	pop	{r3, r4, r5, pc}
 80051d4:	200002e8 	.word	0x200002e8

080051d8 <_init>:
 80051d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051da:	bf00      	nop
 80051dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051de:	bc08      	pop	{r3}
 80051e0:	469e      	mov	lr, r3
 80051e2:	4770      	bx	lr

080051e4 <_fini>:
 80051e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051e6:	bf00      	nop
 80051e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051ea:	bc08      	pop	{r3}
 80051ec:	469e      	mov	lr, r3
 80051ee:	4770      	bx	lr
